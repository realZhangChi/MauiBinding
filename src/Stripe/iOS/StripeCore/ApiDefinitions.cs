using System;
using System.Runtime.InteropServices;
using CoreFoundation;
using Foundation;
using ObjCRuntime;
using Security;

namespace Chi.MauiBinding.iOS.StripeCore
{
	[Static]
	partial interface Constants
	{
		// extern _RuneLocale _DefaultRuneLocale;
		[Field ("_DefaultRuneLocale", "__Internal")]
		_RuneLocale _DefaultRuneLocale { get; }

		// extern _RuneLocale * _CurrentRuneLocale;
		[Field ("_CurrentRuneLocale", "__Internal")]
		unsafe _RuneLocale* _CurrentRuneLocale { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern int signgam;
		[Field ("signgam", "__Internal")]
		int signgam { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const char *const[32] sys_signame;
		[Field ("sys_signame", "__Internal")]
		unsafe sbyte*[] sys_signame { get; }

		// extern const char *const[32] sys_siglist;
		[Field ("sys_siglist", "__Internal")]
		unsafe sbyte*[] sys_siglist { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern FILE * __stdinp;
		[Field ("__stdinp", "__Internal")]
		unsafe FILE* __stdinp { get; }

		// extern FILE * __stdoutp;
		[Field ("__stdoutp", "__Internal")]
		unsafe FILE* __stdoutp { get; }

		// extern FILE * __stderrp;
		[Field ("__stderrp", "__Internal")]
		unsafe FILE* __stderrp { get; }

		// extern const int sys_nerr;
		[Field ("sys_nerr", "__Internal")]
		int sys_nerr { get; }

		// extern const char *const[] sys_errlist;
		[Field ("sys_errlist", "__Internal")]
		unsafe sbyte*[] sys_errlist { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern int __mb_cur_max;
		[Field ("__mb_cur_max", "__Internal")]
		int __mb_cur_max { get; }

		// extern char * suboptarg;
		[Field ("suboptarg", "__Internal")]
		unsafe sbyte* suboptarg { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern char *[] tzname;
		[Field ("tzname", "__Internal")]
		unsafe sbyte*[] tzname { get; }

		// extern int getdate_err;
		[Field ("getdate_err", "__Internal")]
		int getdate_err { get; }

		// extern long timezone asm("_timezone");
		[Field ("timezone", "__Internal")]
		nint timezone { get; }

		// extern int daylight;
		[Field ("daylight", "__Internal")]
		int daylight { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern void *[32] _NSConcreteGlobalBlock __attribute__((availability(ios, introduced=3.2)));
		[iOS (3, 2)]
		[Field ("_NSConcreteGlobalBlock", "__Internal")]
		unsafe void*[] _NSConcreteGlobalBlock { get; }

		// extern void *[32] _NSConcreteStackBlock __attribute__((availability(ios, introduced=3.2)));
		[iOS (3, 2)]
		[Field ("_NSConcreteStackBlock", "__Internal")]
		unsafe void*[] _NSConcreteStackBlock { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern double kCFCoreFoundationVersionNumber;
		[Field ("kCFCoreFoundationVersionNumber", "__Internal")]
		double kCFCoreFoundationVersionNumber { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFNullRef kCFNull;
		[Field ("kCFNull", "__Internal")]
		unsafe CFNullRef* kCFNull { get; }

		// extern const CFAllocatorRef kCFAllocatorDefault;
		[Field ("kCFAllocatorDefault", "__Internal")]
		unsafe CFAllocatorRef* kCFAllocatorDefault { get; }

		// extern const CFAllocatorRef kCFAllocatorSystemDefault;
		[Field ("kCFAllocatorSystemDefault", "__Internal")]
		unsafe CFAllocatorRef* kCFAllocatorSystemDefault { get; }

		// extern const CFAllocatorRef kCFAllocatorMalloc;
		[Field ("kCFAllocatorMalloc", "__Internal")]
		unsafe CFAllocatorRef* kCFAllocatorMalloc { get; }

		// extern const CFAllocatorRef kCFAllocatorMallocZone;
		[Field ("kCFAllocatorMallocZone", "__Internal")]
		unsafe CFAllocatorRef* kCFAllocatorMallocZone { get; }

		// extern const CFAllocatorRef kCFAllocatorNull;
		[Field ("kCFAllocatorNull", "__Internal")]
		unsafe CFAllocatorRef* kCFAllocatorNull { get; }

		// extern const CFAllocatorRef kCFAllocatorUseContext;
		[Field ("kCFAllocatorUseContext", "__Internal")]
		unsafe CFAllocatorRef* kCFAllocatorUseContext { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFArrayCallBacks kCFTypeArrayCallBacks;
		[Field ("kCFTypeArrayCallBacks", "__Internal")]
		CFArrayCallBacks kCFTypeArrayCallBacks { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFBagCallBacks kCFTypeBagCallBacks;
		[Field ("kCFTypeBagCallBacks", "__Internal")]
		CFBagCallBacks kCFTypeBagCallBacks { get; }

		// extern const CFBagCallBacks kCFCopyStringBagCallBacks;
		[Field ("kCFCopyStringBagCallBacks", "__Internal")]
		CFBagCallBacks kCFCopyStringBagCallBacks { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFBinaryHeapCallBacks kCFStringBinaryHeapCallBacks;
		[Field ("kCFStringBinaryHeapCallBacks", "__Internal")]
		CFBinaryHeapCallBacks kCFStringBinaryHeapCallBacks { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks;
		[Field ("kCFTypeDictionaryKeyCallBacks", "__Internal")]
		CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks { get; }

		// extern const CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks;
		[Field ("kCFCopyStringDictionaryKeyCallBacks", "__Internal")]
		CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks;
		[Field ("kCFTypeDictionaryValueCallBacks", "__Internal")]
		CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFNotificationName kCFLocaleCurrentLocaleDidChangeNotification __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFLocaleCurrentLocaleDidChangeNotification", "__Internal")]
		unsafe CFNotificationName* kCFLocaleCurrentLocaleDidChangeNotification { get; }

		// extern const CFLocaleKey kCFLocaleIdentifier;
		[Field ("kCFLocaleIdentifier", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleIdentifier { get; }

		// extern const CFLocaleKey kCFLocaleLanguageCode;
		[Field ("kCFLocaleLanguageCode", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleLanguageCode { get; }

		// extern const CFLocaleKey kCFLocaleCountryCode;
		[Field ("kCFLocaleCountryCode", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleCountryCode { get; }

		// extern const CFLocaleKey kCFLocaleScriptCode;
		[Field ("kCFLocaleScriptCode", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleScriptCode { get; }

		// extern const CFLocaleKey kCFLocaleVariantCode;
		[Field ("kCFLocaleVariantCode", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleVariantCode { get; }

		// extern const CFLocaleKey kCFLocaleExemplarCharacterSet;
		[Field ("kCFLocaleExemplarCharacterSet", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleExemplarCharacterSet { get; }

		// extern const CFLocaleKey kCFLocaleCalendarIdentifier;
		[Field ("kCFLocaleCalendarIdentifier", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleCalendarIdentifier { get; }

		// extern const CFLocaleKey kCFLocaleCalendar;
		[Field ("kCFLocaleCalendar", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleCalendar { get; }

		// extern const CFLocaleKey kCFLocaleCollationIdentifier;
		[Field ("kCFLocaleCollationIdentifier", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleCollationIdentifier { get; }

		// extern const CFLocaleKey kCFLocaleUsesMetricSystem;
		[Field ("kCFLocaleUsesMetricSystem", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleUsesMetricSystem { get; }

		// extern const CFLocaleKey kCFLocaleMeasurementSystem;
		[Field ("kCFLocaleMeasurementSystem", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleMeasurementSystem { get; }

		// extern const CFLocaleKey kCFLocaleDecimalSeparator;
		[Field ("kCFLocaleDecimalSeparator", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleDecimalSeparator { get; }

		// extern const CFLocaleKey kCFLocaleGroupingSeparator;
		[Field ("kCFLocaleGroupingSeparator", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleGroupingSeparator { get; }

		// extern const CFLocaleKey kCFLocaleCurrencySymbol;
		[Field ("kCFLocaleCurrencySymbol", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleCurrencySymbol { get; }

		// extern const CFLocaleKey kCFLocaleCurrencyCode;
		[Field ("kCFLocaleCurrencyCode", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleCurrencyCode { get; }

		// extern const CFLocaleKey kCFLocaleCollatorIdentifier __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFLocaleCollatorIdentifier", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleCollatorIdentifier { get; }

		// extern const CFLocaleKey kCFLocaleQuotationBeginDelimiterKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFLocaleQuotationBeginDelimiterKey", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleQuotationBeginDelimiterKey { get; }

		// extern const CFLocaleKey kCFLocaleQuotationEndDelimiterKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFLocaleQuotationEndDelimiterKey", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleQuotationEndDelimiterKey { get; }

		// extern const CFLocaleKey kCFLocaleAlternateQuotationBeginDelimiterKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFLocaleAlternateQuotationBeginDelimiterKey", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleAlternateQuotationBeginDelimiterKey { get; }

		// extern const CFLocaleKey kCFLocaleAlternateQuotationEndDelimiterKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFLocaleAlternateQuotationEndDelimiterKey", "__Internal")]
		unsafe CFLocaleKey* kCFLocaleAlternateQuotationEndDelimiterKey { get; }

		// extern const CFCalendarIdentifier kCFGregorianCalendar;
		[Field ("kCFGregorianCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFGregorianCalendar { get; }

		// extern const CFCalendarIdentifier kCFBuddhistCalendar;
		[Field ("kCFBuddhistCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFBuddhistCalendar { get; }

		// extern const CFCalendarIdentifier kCFChineseCalendar;
		[Field ("kCFChineseCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFChineseCalendar { get; }

		// extern const CFCalendarIdentifier kCFHebrewCalendar;
		[Field ("kCFHebrewCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFHebrewCalendar { get; }

		// extern const CFCalendarIdentifier kCFIslamicCalendar;
		[Field ("kCFIslamicCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFIslamicCalendar { get; }

		// extern const CFCalendarIdentifier kCFIslamicCivilCalendar;
		[Field ("kCFIslamicCivilCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFIslamicCivilCalendar { get; }

		// extern const CFCalendarIdentifier kCFJapaneseCalendar;
		[Field ("kCFJapaneseCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFJapaneseCalendar { get; }

		// extern const CFCalendarIdentifier kCFRepublicOfChinaCalendar __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFRepublicOfChinaCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFRepublicOfChinaCalendar { get; }

		// extern const CFCalendarIdentifier kCFPersianCalendar __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFPersianCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFPersianCalendar { get; }

		// extern const CFCalendarIdentifier kCFIndianCalendar __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFIndianCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFIndianCalendar { get; }

		// extern const CFCalendarIdentifier kCFISO8601Calendar __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFISO8601Calendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFISO8601Calendar { get; }

		// extern const CFCalendarIdentifier kCFIslamicTabularCalendar __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("kCFIslamicTabularCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFIslamicTabularCalendar { get; }

		// extern const CFCalendarIdentifier kCFIslamicUmmAlQuraCalendar __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("kCFIslamicUmmAlQuraCalendar", "__Internal")]
		unsafe CFCalendarIdentifier* kCFIslamicUmmAlQuraCalendar { get; }

		// extern const CFTimeInterval kCFAbsoluteTimeIntervalSince1970;
		[Field ("kCFAbsoluteTimeIntervalSince1970", "__Internal")]
		double kCFAbsoluteTimeIntervalSince1970 { get; }

		// extern const CFTimeInterval kCFAbsoluteTimeIntervalSince1904;
		[Field ("kCFAbsoluteTimeIntervalSince1904", "__Internal")]
		double kCFAbsoluteTimeIntervalSince1904 { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFErrorDomain kCFErrorDomainPOSIX __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorDomainPOSIX", "__Internal")]
		unsafe CFErrorDomain* kCFErrorDomainPOSIX { get; }

		// extern const CFErrorDomain kCFErrorDomainOSStatus __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorDomainOSStatus", "__Internal")]
		unsafe CFErrorDomain* kCFErrorDomainOSStatus { get; }

		// extern const CFErrorDomain kCFErrorDomainMach __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorDomainMach", "__Internal")]
		unsafe CFErrorDomain* kCFErrorDomainMach { get; }

		// extern const CFErrorDomain kCFErrorDomainCocoa __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorDomainCocoa", "__Internal")]
		unsafe CFErrorDomain* kCFErrorDomainCocoa { get; }

		// extern const CFStringRef kCFErrorLocalizedDescriptionKey __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorLocalizedDescriptionKey", "__Internal")]
		unsafe CFStringRef* kCFErrorLocalizedDescriptionKey { get; }

		// extern const CFStringRef kCFErrorLocalizedFailureKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kCFErrorLocalizedFailureKey", "__Internal")]
		unsafe CFStringRef* kCFErrorLocalizedFailureKey { get; }

		// extern const CFStringRef kCFErrorLocalizedFailureReasonKey __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorLocalizedFailureReasonKey", "__Internal")]
		unsafe CFStringRef* kCFErrorLocalizedFailureReasonKey { get; }

		// extern const CFStringRef kCFErrorLocalizedRecoverySuggestionKey __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorLocalizedRecoverySuggestionKey", "__Internal")]
		unsafe CFStringRef* kCFErrorLocalizedRecoverySuggestionKey { get; }

		// extern const CFStringRef kCFErrorDescriptionKey __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorDescriptionKey", "__Internal")]
		unsafe CFStringRef* kCFErrorDescriptionKey { get; }

		// extern const CFStringRef kCFErrorUnderlyingErrorKey __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFErrorUnderlyingErrorKey", "__Internal")]
		unsafe CFStringRef* kCFErrorUnderlyingErrorKey { get; }

		// extern const CFStringRef kCFErrorURLKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFErrorURLKey", "__Internal")]
		unsafe CFStringRef* kCFErrorURLKey { get; }

		// extern const CFStringRef kCFErrorFilePathKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFErrorFilePathKey", "__Internal")]
		unsafe CFStringRef* kCFErrorFilePathKey { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef kCFStringTransformStripCombiningMarks;
		[Field ("kCFStringTransformStripCombiningMarks", "__Internal")]
		unsafe CFStringRef* kCFStringTransformStripCombiningMarks { get; }

		// extern const CFStringRef kCFStringTransformToLatin;
		[Field ("kCFStringTransformToLatin", "__Internal")]
		unsafe CFStringRef* kCFStringTransformToLatin { get; }

		// extern const CFStringRef kCFStringTransformFullwidthHalfwidth;
		[Field ("kCFStringTransformFullwidthHalfwidth", "__Internal")]
		unsafe CFStringRef* kCFStringTransformFullwidthHalfwidth { get; }

		// extern const CFStringRef kCFStringTransformLatinKatakana;
		[Field ("kCFStringTransformLatinKatakana", "__Internal")]
		unsafe CFStringRef* kCFStringTransformLatinKatakana { get; }

		// extern const CFStringRef kCFStringTransformLatinHiragana;
		[Field ("kCFStringTransformLatinHiragana", "__Internal")]
		unsafe CFStringRef* kCFStringTransformLatinHiragana { get; }

		// extern const CFStringRef kCFStringTransformHiraganaKatakana;
		[Field ("kCFStringTransformHiraganaKatakana", "__Internal")]
		unsafe CFStringRef* kCFStringTransformHiraganaKatakana { get; }

		// extern const CFStringRef kCFStringTransformMandarinLatin;
		[Field ("kCFStringTransformMandarinLatin", "__Internal")]
		unsafe CFStringRef* kCFStringTransformMandarinLatin { get; }

		// extern const CFStringRef kCFStringTransformLatinHangul;
		[Field ("kCFStringTransformLatinHangul", "__Internal")]
		unsafe CFStringRef* kCFStringTransformLatinHangul { get; }

		// extern const CFStringRef kCFStringTransformLatinArabic;
		[Field ("kCFStringTransformLatinArabic", "__Internal")]
		unsafe CFStringRef* kCFStringTransformLatinArabic { get; }

		// extern const CFStringRef kCFStringTransformLatinHebrew;
		[Field ("kCFStringTransformLatinHebrew", "__Internal")]
		unsafe CFStringRef* kCFStringTransformLatinHebrew { get; }

		// extern const CFStringRef kCFStringTransformLatinThai;
		[Field ("kCFStringTransformLatinThai", "__Internal")]
		unsafe CFStringRef* kCFStringTransformLatinThai { get; }

		// extern const CFStringRef kCFStringTransformLatinCyrillic;
		[Field ("kCFStringTransformLatinCyrillic", "__Internal")]
		unsafe CFStringRef* kCFStringTransformLatinCyrillic { get; }

		// extern const CFStringRef kCFStringTransformLatinGreek;
		[Field ("kCFStringTransformLatinGreek", "__Internal")]
		unsafe CFStringRef* kCFStringTransformLatinGreek { get; }

		// extern const CFStringRef kCFStringTransformToXMLHex;
		[Field ("kCFStringTransformToXMLHex", "__Internal")]
		unsafe CFStringRef* kCFStringTransformToXMLHex { get; }

		// extern const CFStringRef kCFStringTransformToUnicodeName;
		[Field ("kCFStringTransformToUnicodeName", "__Internal")]
		unsafe CFStringRef* kCFStringTransformToUnicodeName { get; }

		// extern const CFStringRef kCFStringTransformStripDiacritics __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFStringTransformStripDiacritics", "__Internal")]
		unsafe CFStringRef* kCFStringTransformStripDiacritics { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFNotificationName kCFTimeZoneSystemTimeZoneDidChangeNotification __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFTimeZoneSystemTimeZoneDidChangeNotification", "__Internal")]
		unsafe CFNotificationName* kCFTimeZoneSystemTimeZoneDidChangeNotification { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFDateFormatterKey kCFDateFormatterIsLenient;
		[Field ("kCFDateFormatterIsLenient", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterIsLenient { get; }

		// extern const CFDateFormatterKey kCFDateFormatterTimeZone;
		[Field ("kCFDateFormatterTimeZone", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterTimeZone { get; }

		// extern const CFDateFormatterKey kCFDateFormatterCalendarName;
		[Field ("kCFDateFormatterCalendarName", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterCalendarName { get; }

		// extern const CFDateFormatterKey kCFDateFormatterDefaultFormat;
		[Field ("kCFDateFormatterDefaultFormat", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterDefaultFormat { get; }

		// extern const CFDateFormatterKey kCFDateFormatterTwoDigitStartDate;
		[Field ("kCFDateFormatterTwoDigitStartDate", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterTwoDigitStartDate { get; }

		// extern const CFDateFormatterKey kCFDateFormatterDefaultDate;
		[Field ("kCFDateFormatterDefaultDate", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterDefaultDate { get; }

		// extern const CFDateFormatterKey kCFDateFormatterCalendar;
		[Field ("kCFDateFormatterCalendar", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterCalendar { get; }

		// extern const CFDateFormatterKey kCFDateFormatterEraSymbols;
		[Field ("kCFDateFormatterEraSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterEraSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterMonthSymbols;
		[Field ("kCFDateFormatterMonthSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterMonthSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterShortMonthSymbols;
		[Field ("kCFDateFormatterShortMonthSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterShortMonthSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterWeekdaySymbols;
		[Field ("kCFDateFormatterWeekdaySymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterWeekdaySymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterShortWeekdaySymbols;
		[Field ("kCFDateFormatterShortWeekdaySymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterShortWeekdaySymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterAMSymbol;
		[Field ("kCFDateFormatterAMSymbol", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterAMSymbol { get; }

		// extern const CFDateFormatterKey kCFDateFormatterPMSymbol;
		[Field ("kCFDateFormatterPMSymbol", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterPMSymbol { get; }

		// extern const CFDateFormatterKey kCFDateFormatterLongEraSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterLongEraSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterLongEraSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterVeryShortMonthSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterVeryShortMonthSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterVeryShortMonthSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterStandaloneMonthSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterStandaloneMonthSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterStandaloneMonthSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterShortStandaloneMonthSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterShortStandaloneMonthSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterShortStandaloneMonthSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterVeryShortStandaloneMonthSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterVeryShortStandaloneMonthSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterVeryShortStandaloneMonthSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterVeryShortWeekdaySymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterVeryShortWeekdaySymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterVeryShortWeekdaySymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterStandaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterStandaloneWeekdaySymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterStandaloneWeekdaySymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterShortStandaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterShortStandaloneWeekdaySymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterShortStandaloneWeekdaySymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterVeryShortStandaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterVeryShortStandaloneWeekdaySymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterVeryShortStandaloneWeekdaySymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterQuarterSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterQuarterSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterQuarterSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterShortQuarterSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterShortQuarterSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterShortQuarterSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterStandaloneQuarterSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterStandaloneQuarterSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterStandaloneQuarterSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterShortStandaloneQuarterSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterShortStandaloneQuarterSymbols", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterShortStandaloneQuarterSymbols { get; }

		// extern const CFDateFormatterKey kCFDateFormatterGregorianStartDate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFDateFormatterGregorianStartDate", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterGregorianStartDate { get; }

		// extern const CFDateFormatterKey kCFDateFormatterDoesRelativeDateFormattingKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFDateFormatterDoesRelativeDateFormattingKey", "__Internal")]
		unsafe CFDateFormatterKey* kCFDateFormatterDoesRelativeDateFormattingKey { get; }

		// extern const CFBooleanRef kCFBooleanTrue;
		[Field ("kCFBooleanTrue", "__Internal")]
		unsafe CFBooleanRef* kCFBooleanTrue { get; }

		// extern const CFBooleanRef kCFBooleanFalse;
		[Field ("kCFBooleanFalse", "__Internal")]
		unsafe CFBooleanRef* kCFBooleanFalse { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFNumberRef kCFNumberPositiveInfinity;
		[Field ("kCFNumberPositiveInfinity", "__Internal")]
		unsafe CFNumberRef* kCFNumberPositiveInfinity { get; }

		// extern const CFNumberRef kCFNumberNegativeInfinity;
		[Field ("kCFNumberNegativeInfinity", "__Internal")]
		unsafe CFNumberRef* kCFNumberNegativeInfinity { get; }

		// extern const CFNumberRef kCFNumberNaN;
		[Field ("kCFNumberNaN", "__Internal")]
		unsafe CFNumberRef* kCFNumberNaN { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFNumberFormatterKey kCFNumberFormatterCurrencyCode;
		[Field ("kCFNumberFormatterCurrencyCode", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterCurrencyCode { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterDecimalSeparator;
		[Field ("kCFNumberFormatterDecimalSeparator", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterDecimalSeparator { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterCurrencyDecimalSeparator;
		[Field ("kCFNumberFormatterCurrencyDecimalSeparator", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterCurrencyDecimalSeparator { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterAlwaysShowDecimalSeparator;
		[Field ("kCFNumberFormatterAlwaysShowDecimalSeparator", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterAlwaysShowDecimalSeparator { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterGroupingSeparator;
		[Field ("kCFNumberFormatterGroupingSeparator", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterGroupingSeparator { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterUseGroupingSeparator;
		[Field ("kCFNumberFormatterUseGroupingSeparator", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterUseGroupingSeparator { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterPercentSymbol;
		[Field ("kCFNumberFormatterPercentSymbol", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterPercentSymbol { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterZeroSymbol;
		[Field ("kCFNumberFormatterZeroSymbol", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterZeroSymbol { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterNaNSymbol;
		[Field ("kCFNumberFormatterNaNSymbol", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterNaNSymbol { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterInfinitySymbol;
		[Field ("kCFNumberFormatterInfinitySymbol", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterInfinitySymbol { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterMinusSign;
		[Field ("kCFNumberFormatterMinusSign", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterMinusSign { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterPlusSign;
		[Field ("kCFNumberFormatterPlusSign", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterPlusSign { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterCurrencySymbol;
		[Field ("kCFNumberFormatterCurrencySymbol", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterCurrencySymbol { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterExponentSymbol;
		[Field ("kCFNumberFormatterExponentSymbol", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterExponentSymbol { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterMinIntegerDigits;
		[Field ("kCFNumberFormatterMinIntegerDigits", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterMinIntegerDigits { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterMaxIntegerDigits;
		[Field ("kCFNumberFormatterMaxIntegerDigits", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterMaxIntegerDigits { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterMinFractionDigits;
		[Field ("kCFNumberFormatterMinFractionDigits", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterMinFractionDigits { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterMaxFractionDigits;
		[Field ("kCFNumberFormatterMaxFractionDigits", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterMaxFractionDigits { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterGroupingSize;
		[Field ("kCFNumberFormatterGroupingSize", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterGroupingSize { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterSecondaryGroupingSize;
		[Field ("kCFNumberFormatterSecondaryGroupingSize", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterSecondaryGroupingSize { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterRoundingMode;
		[Field ("kCFNumberFormatterRoundingMode", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterRoundingMode { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterRoundingIncrement;
		[Field ("kCFNumberFormatterRoundingIncrement", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterRoundingIncrement { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterFormatWidth;
		[Field ("kCFNumberFormatterFormatWidth", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterFormatWidth { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterPaddingPosition;
		[Field ("kCFNumberFormatterPaddingPosition", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterPaddingPosition { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterPaddingCharacter;
		[Field ("kCFNumberFormatterPaddingCharacter", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterPaddingCharacter { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterDefaultFormat;
		[Field ("kCFNumberFormatterDefaultFormat", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterDefaultFormat { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterMultiplier;
		[Field ("kCFNumberFormatterMultiplier", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterMultiplier { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterPositivePrefix;
		[Field ("kCFNumberFormatterPositivePrefix", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterPositivePrefix { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterPositiveSuffix;
		[Field ("kCFNumberFormatterPositiveSuffix", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterPositiveSuffix { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterNegativePrefix;
		[Field ("kCFNumberFormatterNegativePrefix", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterNegativePrefix { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterNegativeSuffix;
		[Field ("kCFNumberFormatterNegativeSuffix", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterNegativeSuffix { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterPerMillSymbol;
		[Field ("kCFNumberFormatterPerMillSymbol", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterPerMillSymbol { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterInternationalCurrencySymbol;
		[Field ("kCFNumberFormatterInternationalCurrencySymbol", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterInternationalCurrencySymbol { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterCurrencyGroupingSeparator __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFNumberFormatterCurrencyGroupingSeparator", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterCurrencyGroupingSeparator { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterIsLenient __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFNumberFormatterIsLenient", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterIsLenient { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterUseSignificantDigits __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFNumberFormatterUseSignificantDigits", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterUseSignificantDigits { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterMinSignificantDigits __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFNumberFormatterMinSignificantDigits", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterMinSignificantDigits { get; }

		// extern const CFNumberFormatterKey kCFNumberFormatterMaxSignificantDigits __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("kCFNumberFormatterMaxSignificantDigits", "__Internal")]
		unsafe CFNumberFormatterKey* kCFNumberFormatterMaxSignificantDigits { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef _Nonnull kCFPreferencesAnyApplication;
		[Field ("kCFPreferencesAnyApplication", "__Internal")]
		unsafe CFStringRef* kCFPreferencesAnyApplication { get; }

		// extern const CFStringRef _Nonnull kCFPreferencesCurrentApplication;
		[Field ("kCFPreferencesCurrentApplication", "__Internal")]
		unsafe CFStringRef* kCFPreferencesCurrentApplication { get; }

		// extern const CFStringRef _Nonnull kCFPreferencesAnyHost;
		[Field ("kCFPreferencesAnyHost", "__Internal")]
		unsafe CFStringRef* kCFPreferencesAnyHost { get; }

		// extern const CFStringRef _Nonnull kCFPreferencesCurrentHost;
		[Field ("kCFPreferencesCurrentHost", "__Internal")]
		unsafe CFStringRef* kCFPreferencesCurrentHost { get; }

		// extern const CFStringRef _Nonnull kCFPreferencesAnyUser;
		[Field ("kCFPreferencesAnyUser", "__Internal")]
		unsafe CFStringRef* kCFPreferencesAnyUser { get; }

		// extern const CFStringRef _Nonnull kCFPreferencesCurrentUser;
		[Field ("kCFPreferencesCurrentUser", "__Internal")]
		unsafe CFStringRef* kCFPreferencesCurrentUser { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef kCFURLKeysOfUnsetValuesKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLKeysOfUnsetValuesKey", "__Internal")]
		unsafe CFStringRef* kCFURLKeysOfUnsetValuesKey { get; }

		// extern const CFStringRef kCFURLNameKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLNameKey", "__Internal")]
		unsafe CFStringRef* kCFURLNameKey { get; }

		// extern const CFStringRef kCFURLLocalizedNameKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLLocalizedNameKey", "__Internal")]
		unsafe CFStringRef* kCFURLLocalizedNameKey { get; }

		// extern const CFStringRef kCFURLIsRegularFileKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsRegularFileKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsRegularFileKey { get; }

		// extern const CFStringRef kCFURLIsDirectoryKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsDirectoryKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsDirectoryKey { get; }

		// extern const CFStringRef kCFURLIsSymbolicLinkKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsSymbolicLinkKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsSymbolicLinkKey { get; }

		// extern const CFStringRef kCFURLIsVolumeKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsVolumeKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsVolumeKey { get; }

		// extern const CFStringRef kCFURLIsPackageKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsPackageKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsPackageKey { get; }

		// extern const CFStringRef kCFURLIsApplicationKey __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("kCFURLIsApplicationKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsApplicationKey { get; }

		// extern const CFStringRef kCFURLApplicationIsScriptableKey __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 11)]
		[Field ("kCFURLApplicationIsScriptableKey", "__Internal")]
		unsafe CFStringRef* kCFURLApplicationIsScriptableKey { get; }

		// extern const CFStringRef kCFURLIsSystemImmutableKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsSystemImmutableKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsSystemImmutableKey { get; }

		// extern const CFStringRef kCFURLIsUserImmutableKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsUserImmutableKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsUserImmutableKey { get; }

		// extern const CFStringRef kCFURLIsHiddenKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsHiddenKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsHiddenKey { get; }

		// extern const CFStringRef kCFURLHasHiddenExtensionKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLHasHiddenExtensionKey", "__Internal")]
		unsafe CFStringRef* kCFURLHasHiddenExtensionKey { get; }

		// extern const CFStringRef kCFURLCreationDateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLCreationDateKey", "__Internal")]
		unsafe CFStringRef* kCFURLCreationDateKey { get; }

		// extern const CFStringRef kCFURLContentAccessDateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLContentAccessDateKey", "__Internal")]
		unsafe CFStringRef* kCFURLContentAccessDateKey { get; }

		// extern const CFStringRef kCFURLContentModificationDateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLContentModificationDateKey", "__Internal")]
		unsafe CFStringRef* kCFURLContentModificationDateKey { get; }

		// extern const CFStringRef kCFURLAttributeModificationDateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLAttributeModificationDateKey", "__Internal")]
		unsafe CFStringRef* kCFURLAttributeModificationDateKey { get; }

		// extern const CFStringRef kCFURLFileIdentifierKey __attribute__((availability(macos, introduced=13.3))) __attribute__((availability(ios, introduced=16.4))) __attribute__((availability(watchos, introduced=9.4))) __attribute__((availability(tvos, introduced=16.4)));
		[Watch (9, 4), TV (16, 4), Mac (13, 3), iOS (16, 4)]
		[Field ("kCFURLFileIdentifierKey", "__Internal")]
		unsafe CFStringRef* kCFURLFileIdentifierKey { get; }

		// extern const CFStringRef kCFURLFileContentIdentifierKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("kCFURLFileContentIdentifierKey", "__Internal")]
		unsafe CFStringRef* kCFURLFileContentIdentifierKey { get; }

		// extern const CFStringRef kCFURLMayShareFileContentKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("kCFURLMayShareFileContentKey", "__Internal")]
		unsafe CFStringRef* kCFURLMayShareFileContentKey { get; }

		// extern const CFStringRef kCFURLMayHaveExtendedAttributesKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("kCFURLMayHaveExtendedAttributesKey", "__Internal")]
		unsafe CFStringRef* kCFURLMayHaveExtendedAttributesKey { get; }

		// extern const CFStringRef kCFURLIsPurgeableKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("kCFURLIsPurgeableKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsPurgeableKey { get; }

		// extern const CFStringRef kCFURLIsSparseKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("kCFURLIsSparseKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsSparseKey { get; }

		// extern const CFStringRef kCFURLLinkCountKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLLinkCountKey", "__Internal")]
		unsafe CFStringRef* kCFURLLinkCountKey { get; }

		// extern const CFStringRef kCFURLParentDirectoryURLKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLParentDirectoryURLKey", "__Internal")]
		unsafe CFStringRef* kCFURLParentDirectoryURLKey { get; }

		// extern const CFStringRef kCFURLVolumeURLKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeURLKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeURLKey { get; }

		// extern const CFStringRef kCFURLTypeIdentifierKey __attribute__((availability(macos, introduced=10.6, deprecated=100000))) __attribute__((availability(ios, introduced=4.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use NSURLContentTypeKey instead")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "Use NSURLContentTypeKey instead")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use NSURLContentTypeKey instead")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "Use NSURLContentTypeKey instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLContentTypeKey instead")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "Use NSURLContentTypeKey instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLContentTypeKey instead")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "Use NSURLContentTypeKey instead")]
		[Field ("kCFURLTypeIdentifierKey", "__Internal")]
		unsafe CFStringRef* kCFURLTypeIdentifierKey { get; }

		// extern const CFStringRef kCFURLLocalizedTypeDescriptionKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLLocalizedTypeDescriptionKey", "__Internal")]
		unsafe CFStringRef* kCFURLLocalizedTypeDescriptionKey { get; }

		// extern const CFStringRef kCFURLLabelNumberKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLLabelNumberKey", "__Internal")]
		unsafe CFStringRef* kCFURLLabelNumberKey { get; }

		// extern const CFStringRef kCFURLLabelColorKey __attribute__((availability(macos, introduced=10.6, deprecated=10.12))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=10.0)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use NSURLLabelColorKey")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use NSURLLabelColorKey")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use NSURLLabelColorKey")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use NSURLLabelColorKey")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLLabelColorKey")]
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use NSURLLabelColorKey")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLLabelColorKey")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use NSURLLabelColorKey")]
		[Field ("kCFURLLabelColorKey", "__Internal")]
		unsafe CFStringRef* kCFURLLabelColorKey { get; }

		// extern const CFStringRef kCFURLLocalizedLabelKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLLocalizedLabelKey", "__Internal")]
		unsafe CFStringRef* kCFURLLocalizedLabelKey { get; }

		// extern const CFStringRef kCFURLEffectiveIconKey __attribute__((availability(macos, introduced=10.6, deprecated=10.12))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=10.0)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use NSURLEffectiveIconKey")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use NSURLEffectiveIconKey")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use NSURLEffectiveIconKey")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use NSURLEffectiveIconKey")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLEffectiveIconKey")]
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use NSURLEffectiveIconKey")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLEffectiveIconKey")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use NSURLEffectiveIconKey")]
		[Field ("kCFURLEffectiveIconKey", "__Internal")]
		unsafe CFStringRef* kCFURLEffectiveIconKey { get; }

		// extern const CFStringRef kCFURLCustomIconKey __attribute__((availability(macos, introduced=10.6, deprecated=10.12))) __attribute__((availability(ios, introduced=4.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=10.0)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use NSURLCustomIconKey")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Use NSURLCustomIconKey")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use NSURLCustomIconKey")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use NSURLCustomIconKey")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLCustomIconKey")]
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Use NSURLCustomIconKey")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLCustomIconKey")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use NSURLCustomIconKey")]
		[Field ("kCFURLCustomIconKey", "__Internal")]
		unsafe CFStringRef* kCFURLCustomIconKey { get; }

		// extern const CFStringRef kCFURLFileResourceIdentifierKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceIdentifierKey", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceIdentifierKey { get; }

		// extern const CFStringRef kCFURLVolumeIdentifierKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeIdentifierKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIdentifierKey { get; }

		// extern const CFStringRef kCFURLPreferredIOBlockSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLPreferredIOBlockSizeKey", "__Internal")]
		unsafe CFStringRef* kCFURLPreferredIOBlockSizeKey { get; }

		// extern const CFStringRef kCFURLIsReadableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLIsReadableKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsReadableKey { get; }

		// extern const CFStringRef kCFURLIsWritableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLIsWritableKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsWritableKey { get; }

		// extern const CFStringRef kCFURLIsExecutableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLIsExecutableKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsExecutableKey { get; }

		// extern const CFStringRef kCFURLFileSecurityKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileSecurityKey", "__Internal")]
		unsafe CFStringRef* kCFURLFileSecurityKey { get; }

		// extern const CFStringRef kCFURLIsExcludedFromBackupKey __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=5.1))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (5, 1)]
		[Field ("kCFURLIsExcludedFromBackupKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsExcludedFromBackupKey { get; }

		// extern const CFStringRef kCFURLTagNamesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("kCFURLTagNamesKey", "__Internal")]
		unsafe CFStringRef* kCFURLTagNamesKey { get; }

		// extern const CFStringRef kCFURLPathKey __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Field ("kCFURLPathKey", "__Internal")]
		unsafe CFStringRef* kCFURLPathKey { get; }

		// extern const CFStringRef kCFURLCanonicalPathKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kCFURLCanonicalPathKey", "__Internal")]
		unsafe CFStringRef* kCFURLCanonicalPathKey { get; }

		// extern const CFStringRef kCFURLIsMountTriggerKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Field ("kCFURLIsMountTriggerKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsMountTriggerKey { get; }

		// extern const CFStringRef kCFURLGenerationIdentifierKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("kCFURLGenerationIdentifierKey", "__Internal")]
		unsafe CFStringRef* kCFURLGenerationIdentifierKey { get; }

		// extern const CFStringRef kCFURLDocumentIdentifierKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("kCFURLDocumentIdentifierKey", "__Internal")]
		unsafe CFStringRef* kCFURLDocumentIdentifierKey { get; }

		// extern const CFStringRef kCFURLAddedToDirectoryDateKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("kCFURLAddedToDirectoryDateKey", "__Internal")]
		unsafe CFStringRef* kCFURLAddedToDirectoryDateKey { get; }

		// extern const CFStringRef kCFURLQuarantinePropertiesKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 10)]
		[Field ("kCFURLQuarantinePropertiesKey", "__Internal")]
		unsafe CFStringRef* kCFURLQuarantinePropertiesKey { get; }

		// extern const CFStringRef kCFURLFileResourceTypeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeKey", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeKey { get; }

		// extern const CFStringRef kCFURLFileResourceTypeNamedPipe __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeNamedPipe", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeNamedPipe { get; }

		// extern const CFStringRef kCFURLFileResourceTypeCharacterSpecial __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeCharacterSpecial", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeCharacterSpecial { get; }

		// extern const CFStringRef kCFURLFileResourceTypeDirectory __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeDirectory", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeDirectory { get; }

		// extern const CFStringRef kCFURLFileResourceTypeBlockSpecial __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeBlockSpecial", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeBlockSpecial { get; }

		// extern const CFStringRef kCFURLFileResourceTypeRegular __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeRegular", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeRegular { get; }

		// extern const CFStringRef kCFURLFileResourceTypeSymbolicLink __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeSymbolicLink", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeSymbolicLink { get; }

		// extern const CFStringRef kCFURLFileResourceTypeSocket __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeSocket", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeSocket { get; }

		// extern const CFStringRef kCFURLFileResourceTypeUnknown __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLFileResourceTypeUnknown", "__Internal")]
		unsafe CFStringRef* kCFURLFileResourceTypeUnknown { get; }

		// extern const CFStringRef kCFURLFileSizeKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLFileSizeKey", "__Internal")]
		unsafe CFStringRef* kCFURLFileSizeKey { get; }

		// extern const CFStringRef kCFURLFileAllocatedSizeKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLFileAllocatedSizeKey", "__Internal")]
		unsafe CFStringRef* kCFURLFileAllocatedSizeKey { get; }

		// extern const CFStringRef kCFURLTotalFileSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLTotalFileSizeKey", "__Internal")]
		unsafe CFStringRef* kCFURLTotalFileSizeKey { get; }

		// extern const CFStringRef kCFURLTotalFileAllocatedSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLTotalFileAllocatedSizeKey", "__Internal")]
		unsafe CFStringRef* kCFURLTotalFileAllocatedSizeKey { get; }

		// extern const CFStringRef kCFURLIsAliasFileKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLIsAliasFileKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsAliasFileKey { get; }

		// extern const CFStringRef kCFURLFileProtectionKey __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
		[Field ("kCFURLFileProtectionKey", "__Internal")]
		unsafe CFStringRef* kCFURLFileProtectionKey { get; }

		// extern const CFStringRef kCFURLFileProtectionNone __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
		[Field ("kCFURLFileProtectionNone", "__Internal")]
		unsafe CFStringRef* kCFURLFileProtectionNone { get; }

		// extern const CFStringRef kCFURLFileProtectionComplete __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
		[Field ("kCFURLFileProtectionComplete", "__Internal")]
		unsafe CFStringRef* kCFURLFileProtectionComplete { get; }

		// extern const CFStringRef kCFURLFileProtectionCompleteUnlessOpen __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
		[Field ("kCFURLFileProtectionCompleteUnlessOpen", "__Internal")]
		unsafe CFStringRef* kCFURLFileProtectionCompleteUnlessOpen { get; }

		// extern const CFStringRef kCFURLFileProtectionCompleteUntilFirstUserAuthentication __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
		[Field ("kCFURLFileProtectionCompleteUntilFirstUserAuthentication", "__Internal")]
		unsafe CFStringRef* kCFURLFileProtectionCompleteUntilFirstUserAuthentication { get; }

		// extern const CFStringRef kCFURLVolumeLocalizedFormatDescriptionKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeLocalizedFormatDescriptionKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeLocalizedFormatDescriptionKey { get; }

		// extern const CFStringRef kCFURLVolumeTotalCapacityKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeTotalCapacityKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeTotalCapacityKey { get; }

		// extern const CFStringRef kCFURLVolumeAvailableCapacityKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeAvailableCapacityKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeAvailableCapacityKey { get; }

		// extern const CFStringRef kCFURLVolumeAvailableCapacityForImportantUsageKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 13), iOS (11, 0)]
		[Field ("kCFURLVolumeAvailableCapacityForImportantUsageKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeAvailableCapacityForImportantUsageKey { get; }

		// extern const CFStringRef kCFURLVolumeAvailableCapacityForOpportunisticUsageKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 13), iOS (11, 0)]
		[Field ("kCFURLVolumeAvailableCapacityForOpportunisticUsageKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeAvailableCapacityForOpportunisticUsageKey { get; }

		// extern const CFStringRef kCFURLVolumeResourceCountKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeResourceCountKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeResourceCountKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsPersistentIDsKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeSupportsPersistentIDsKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsPersistentIDsKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsSymbolicLinksKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeSupportsSymbolicLinksKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsSymbolicLinksKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsHardLinksKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeSupportsHardLinksKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsHardLinksKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsJournalingKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeSupportsJournalingKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsJournalingKey { get; }

		// extern const CFStringRef kCFURLVolumeIsJournalingKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeIsJournalingKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsJournalingKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsSparseFilesKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeSupportsSparseFilesKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsSparseFilesKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsZeroRunsKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeSupportsZeroRunsKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsZeroRunsKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsCaseSensitiveNamesKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeSupportsCaseSensitiveNamesKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsCaseSensitiveNamesKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsCasePreservedNamesKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("kCFURLVolumeSupportsCasePreservedNamesKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsCasePreservedNamesKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsRootDirectoryDatesKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeSupportsRootDirectoryDatesKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsRootDirectoryDatesKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsVolumeSizesKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeSupportsVolumeSizesKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsVolumeSizesKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsRenamingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeSupportsRenamingKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsRenamingKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsAdvisoryFileLockingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeSupportsAdvisoryFileLockingKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsAdvisoryFileLockingKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsExtendedSecurityKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeSupportsExtendedSecurityKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsExtendedSecurityKey { get; }

		// extern const CFStringRef kCFURLVolumeIsBrowsableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeIsBrowsableKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsBrowsableKey { get; }

		// extern const CFStringRef kCFURLVolumeMaximumFileSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeMaximumFileSizeKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeMaximumFileSizeKey { get; }

		// extern const CFStringRef kCFURLVolumeIsEjectableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeIsEjectableKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsEjectableKey { get; }

		// extern const CFStringRef kCFURLVolumeIsRemovableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeIsRemovableKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsRemovableKey { get; }

		// extern const CFStringRef kCFURLVolumeIsInternalKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeIsInternalKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsInternalKey { get; }

		// extern const CFStringRef kCFURLVolumeIsAutomountedKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeIsAutomountedKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsAutomountedKey { get; }

		// extern const CFStringRef kCFURLVolumeIsLocalKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeIsLocalKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsLocalKey { get; }

		// extern const CFStringRef kCFURLVolumeIsReadOnlyKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeIsReadOnlyKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsReadOnlyKey { get; }

		// extern const CFStringRef kCFURLVolumeCreationDateKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeCreationDateKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeCreationDateKey { get; }

		// extern const CFStringRef kCFURLVolumeURLForRemountingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeURLForRemountingKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeURLForRemountingKey { get; }

		// extern const CFStringRef kCFURLVolumeUUIDStringKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeUUIDStringKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeUUIDStringKey { get; }

		// extern const CFStringRef kCFURLVolumeNameKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeNameKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeNameKey { get; }

		// extern const CFStringRef kCFURLVolumeLocalizedNameKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLVolumeLocalizedNameKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeLocalizedNameKey { get; }

		// extern const CFStringRef kCFURLVolumeIsEncryptedKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kCFURLVolumeIsEncryptedKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsEncryptedKey { get; }

		// extern const CFStringRef kCFURLVolumeIsRootFileSystemKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kCFURLVolumeIsRootFileSystemKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeIsRootFileSystemKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsCompressionKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kCFURLVolumeSupportsCompressionKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsCompressionKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsFileCloningKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kCFURLVolumeSupportsFileCloningKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsFileCloningKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsSwapRenamingKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kCFURLVolumeSupportsSwapRenamingKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsSwapRenamingKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsExclusiveRenamingKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kCFURLVolumeSupportsExclusiveRenamingKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsExclusiveRenamingKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsImmutableFilesKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kCFURLVolumeSupportsImmutableFilesKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsImmutableFilesKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsAccessPermissionsKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kCFURLVolumeSupportsAccessPermissionsKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsAccessPermissionsKey { get; }

		// extern const CFStringRef kCFURLVolumeSupportsFileProtectionKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("kCFURLVolumeSupportsFileProtectionKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSupportsFileProtectionKey { get; }

		// extern const CFStringRef kCFURLVolumeTypeNameKey __attribute__((availability(macos, introduced=13.3))) __attribute__((availability(ios, introduced=16.4))) __attribute__((availability(watchos, introduced=9.4))) __attribute__((availability(tvos, introduced=16.4)));
		[Watch (9, 4), TV (16, 4), Mac (13, 3), iOS (16, 4)]
		[Field ("kCFURLVolumeTypeNameKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeTypeNameKey { get; }

		// extern const CFStringRef kCFURLVolumeSubtypeKey __attribute__((availability(macos, introduced=13.3))) __attribute__((availability(ios, introduced=16.4))) __attribute__((availability(watchos, introduced=9.4))) __attribute__((availability(tvos, introduced=16.4)));
		[Watch (9, 4), TV (16, 4), Mac (13, 3), iOS (16, 4)]
		[Field ("kCFURLVolumeSubtypeKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeSubtypeKey { get; }

		// extern const CFStringRef kCFURLVolumeMountFromLocationKey __attribute__((availability(macos, introduced=13.3))) __attribute__((availability(ios, introduced=16.4))) __attribute__((availability(watchos, introduced=9.4))) __attribute__((availability(tvos, introduced=16.4)));
		[Watch (9, 4), TV (16, 4), Mac (13, 3), iOS (16, 4)]
		[Field ("kCFURLVolumeMountFromLocationKey", "__Internal")]
		unsafe CFStringRef* kCFURLVolumeMountFromLocationKey { get; }

		// extern const CFStringRef kCFURLIsUbiquitousItemKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLIsUbiquitousItemKey", "__Internal")]
		unsafe CFStringRef* kCFURLIsUbiquitousItemKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemHasUnresolvedConflictsKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLUbiquitousItemHasUnresolvedConflictsKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemHasUnresolvedConflictsKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemIsDownloadedKey __attribute__((availability(macos, introduced=10.7, deprecated=10.9))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.iOS, 5, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use kCFURLUbiquitousItemDownloadingStatusKey instead")]
		[Field ("kCFURLUbiquitousItemIsDownloadedKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemIsDownloadedKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemIsDownloadingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLUbiquitousItemIsDownloadingKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemIsDownloadingKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemIsUploadedKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLUbiquitousItemIsUploadedKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemIsUploadedKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemIsUploadingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("kCFURLUbiquitousItemIsUploadingKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemIsUploadingKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemPercentDownloadedKey __attribute__((availability(macos, introduced=10.7, deprecated=10.8))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
		[Introduced (PlatformName.iOS, 5, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentDownloadedKey on NSMetadataItem instead")]
		[Field ("kCFURLUbiquitousItemPercentDownloadedKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemPercentDownloadedKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemPercentUploadedKey __attribute__((availability(macos, introduced=10.7, deprecated=10.8))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
		[Introduced (PlatformName.iOS, 5, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSMetadataQuery and NSMetadataUbiquitousItemPercentUploadedKey on NSMetadataItem instead")]
		[Field ("kCFURLUbiquitousItemPercentUploadedKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemPercentUploadedKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("kCFURLUbiquitousItemDownloadingStatusKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemDownloadingStatusKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemDownloadingErrorKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("kCFURLUbiquitousItemDownloadingErrorKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemDownloadingErrorKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemUploadingErrorKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("kCFURLUbiquitousItemUploadingErrorKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemUploadingErrorKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemIsExcludedFromSyncKey __attribute__((availability(macos, introduced=11.3))) __attribute__((availability(ios, introduced=14.5))) __attribute__((availability(watchos, introduced=7.4))) __attribute__((availability(tvos, introduced=14.5)));
		[Watch (7, 4), TV (14, 5), Mac (11, 3), iOS (14, 5)]
		[Field ("kCFURLUbiquitousItemIsExcludedFromSyncKey", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemIsExcludedFromSyncKey { get; }

		// extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusNotDownloaded __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("kCFURLUbiquitousItemDownloadingStatusNotDownloaded", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemDownloadingStatusNotDownloaded { get; }

		// extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusDownloaded __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("kCFURLUbiquitousItemDownloadingStatusDownloaded", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemDownloadingStatusDownloaded { get; }

		// extern const CFStringRef kCFURLUbiquitousItemDownloadingStatusCurrent __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("kCFURLUbiquitousItemDownloadingStatusCurrent", "__Internal")]
		unsafe CFStringRef* kCFURLUbiquitousItemDownloadingStatusCurrent { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFRunLoopMode kCFRunLoopDefaultMode;
		[Field ("kCFRunLoopDefaultMode", "__Internal")]
		unsafe CFRunLoopMode* kCFRunLoopDefaultMode { get; }

		// extern const CFRunLoopMode kCFRunLoopCommonModes;
		[Field ("kCFRunLoopCommonModes", "__Internal")]
		unsafe CFRunLoopMode* kCFRunLoopCommonModes { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef kCFSocketCommandKey;
		[Field ("kCFSocketCommandKey", "__Internal")]
		unsafe CFStringRef* kCFSocketCommandKey { get; }

		// extern const CFStringRef kCFSocketNameKey;
		[Field ("kCFSocketNameKey", "__Internal")]
		unsafe CFStringRef* kCFSocketNameKey { get; }

		// extern const CFStringRef kCFSocketValueKey;
		[Field ("kCFSocketValueKey", "__Internal")]
		unsafe CFStringRef* kCFSocketValueKey { get; }

		// extern const CFStringRef kCFSocketResultKey;
		[Field ("kCFSocketResultKey", "__Internal")]
		unsafe CFStringRef* kCFSocketResultKey { get; }

		// extern const CFStringRef kCFSocketErrorKey;
		[Field ("kCFSocketErrorKey", "__Internal")]
		unsafe CFStringRef* kCFSocketErrorKey { get; }

		// extern const CFStringRef kCFSocketRegisterCommand;
		[Field ("kCFSocketRegisterCommand", "__Internal")]
		unsafe CFStringRef* kCFSocketRegisterCommand { get; }

		// extern const CFStringRef kCFSocketRetrieveCommand;
		[Field ("kCFSocketRetrieveCommand", "__Internal")]
		unsafe CFStringRef* kCFSocketRetrieveCommand { get; }
	}

	// typedef void (^os_block_t)();
	delegate void os_block_t ();

	[Static]
	partial interface Constants
	{
		// extern char * optarg;
		[Field ("optarg", "__Internal")]
		unsafe sbyte* optarg { get; }

		// extern int optind;
		[Field ("optind", "__Internal")]
		int optind { get; }

		// extern int opterr;
		[Field ("opterr", "__Internal")]
		int opterr { get; }

		// extern int optopt;
		[Field ("optopt", "__Internal")]
		int optopt { get; }

		// extern char * suboptarg;
		[Field ("suboptarg", "__Internal")]
		unsafe sbyte* suboptarg { get; }

		// extern int optreset;
		[Field ("optreset", "__Internal")]
		int optreset { get; }
	}

	// @protocol NSObject
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSObject
	{
		// @required -(BOOL)isEqual:(id)object;
		[Abstract]
		[Export ("isEqual:")]
		bool IsEqual (NSObject @object);

		// @required @property (readonly) NSUInteger hash;
		[Abstract]
		[Export ("hash")]
		nuint Hash { get; }

		// @required @property (readonly) Class superclass;
		[Abstract]
		[Export ("superclass")]
		Class Superclass { get; }

		// @required -(Class)class __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Abstract]
		[Export ("class")]
		Class Class { get; }

		// @required -(instancetype)self;
		[Abstract]
		[Export ("self")]
		NSObject Self ();

		// @required -(id)performSelector:(SEL)aSelector;
		[Abstract]
		[Export ("performSelector:")]
		NSObject PerformSelector (Selector aSelector);

		// @required -(id)performSelector:(SEL)aSelector withObject:(id)object;
		[Abstract]
		[Export ("performSelector:withObject:")]
		NSObject PerformSelector (Selector aSelector, NSObject @object);

		// @required -(id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;
		[Abstract]
		[Export ("performSelector:withObject:withObject:")]
		NSObject PerformSelector (Selector aSelector, NSObject object1, NSObject object2);

		// @required -(BOOL)isProxy;
		[Abstract]
		[Export ("isProxy")]
		bool IsProxy { get; }

		// @required -(BOOL)isKindOfClass:(Class)aClass;
		[Abstract]
		[Export ("isKindOfClass:")]
		bool IsKindOfClass (Class aClass);

		// @required -(BOOL)isMemberOfClass:(Class)aClass;
		[Abstract]
		[Export ("isMemberOfClass:")]
		bool IsMemberOfClass (Class aClass);

		// @required -(BOOL)conformsToProtocol:(Protocol *)aProtocol;
		[Abstract]
		[Export ("conformsToProtocol:")]
		bool ConformsToProtocol (Protocol aProtocol);

		// @required -(BOOL)respondsToSelector:(SEL)aSelector;
		[Abstract]
		[Export ("respondsToSelector:")]
		bool RespondsToSelector (Selector aSelector);

		// @required -(instancetype)retain;
		[Abstract]
		[Export ("retain")]
		NSObject Retain ();

		// @required -(void)release;
		[Abstract]
		[Export ("release")]
		void Release ();

		// @required -(instancetype)autorelease;
		[Abstract]
		[Export ("autorelease")]
		NSObject Autorelease ();

		// @required -(NSUInteger)retainCount;
		[Abstract]
		[Export ("retainCount")]
		nuint RetainCount { get; }

		// @required -(struct _NSZone *)zone;
		[Abstract]
		[Export ("zone")]
		unsafe _NSZone* Zone { get; }

		// @required @property (readonly, copy) NSString * description;
		[Abstract]
		[Export ("description")]
		string Description { get; }

		// @optional @property (readonly, copy) NSString * debugDescription;
		[Export ("debugDescription")]
		string DebugDescription { get; }
	}

	// @interface NSObject <NSObject>
	[Watch (1,0), TV (9,0), Mac (10,0), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSObject
	{
		// +(void)load;
		[Static]
		[Export ("load")]
		void Load ();

		// +(void)initialize;
		[Static]
		[Export ("initialize")]
		void Initialize ();

		// +(instancetype)new __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Static]
		[Export ("new")]
		NSObject New ();

		// +(instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Static]
		[Export ("allocWithZone:")]
		unsafe NSObject AllocWithZone (_NSZone* zone);

		// +(instancetype)alloc __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Static]
		[Export ("alloc")]
		NSObject Alloc ();

		// -(void)dealloc __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("dealloc")]
		void Dealloc ();

		// -(void)finalize __attribute__((deprecated("Objective-C garbage collection is no longer supported")));
		[Export ("finalize")]
		void Finalize ();

		// -(id)copy;
		[Export ("copy")]
		NSObject Copy { get; }

		// -(id)mutableCopy;
		[Export ("mutableCopy")]
		NSObject MutableCopy { get; }

		// +(id)copyWithZone:(struct _NSZone *)zone;
		[Static]
		[Export ("copyWithZone:")]
		unsafe NSObject CopyWithZone (_NSZone* zone);

		// +(id)mutableCopyWithZone:(struct _NSZone *)zone;
		[Static]
		[Export ("mutableCopyWithZone:")]
		unsafe NSObject MutableCopyWithZone (_NSZone* zone);

		// +(BOOL)instancesRespondToSelector:(SEL)aSelector;
		[Static]
		[Export ("instancesRespondToSelector:")]
		bool InstancesRespondToSelector (Selector aSelector);

		// +(BOOL)conformsToProtocol:(Protocol *)protocol;
		[Static]
		[Export ("conformsToProtocol:")]
		bool ConformsToProtocol (Protocol protocol);

		// -(IMP)methodForSelector:(SEL)aSelector;
		[Export ("methodForSelector:")]
		unsafe IMP* MethodForSelector (Selector aSelector);

		// +(IMP)instanceMethodForSelector:(SEL)aSelector;
		[Static]
		[Export ("instanceMethodForSelector:")]
		unsafe IMP* InstanceMethodForSelector (Selector aSelector);

		// -(void)doesNotRecognizeSelector:(SEL)aSelector;
		[Export ("doesNotRecognizeSelector:")]
		void DoesNotRecognizeSelector (Selector aSelector);

		// -(id)forwardingTargetForSelector:(SEL)aSelector __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("forwardingTargetForSelector:")]
		NSObject ForwardingTargetForSelector (Selector aSelector);

		// -(void)forwardInvocation:(NSInvocation *)anInvocation __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("forwardInvocation:")]
		void ForwardInvocation (NSInvocation anInvocation);

		// -(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("methodSignatureForSelector:")]
		NSMethodSignature MethodSignatureForSelector (Selector aSelector);

		// +(NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Static]
		[Export ("instanceMethodSignatureForSelector:")]
		NSMethodSignature InstanceMethodSignatureForSelector (Selector aSelector);

		// +(BOOL)isSubclassOfClass:(Class)aClass;
		[Static]
		[Export ("isSubclassOfClass:")]
		bool IsSubclassOfClass (Class aClass);

		// +(BOOL)resolveClassMethod:(SEL)sel __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Static]
		[Export ("resolveClassMethod:")]
		bool ResolveClassMethod (Selector sel);

		// +(BOOL)resolveInstanceMethod:(SEL)sel __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Static]
		[Export ("resolveInstanceMethod:")]
		bool ResolveInstanceMethod (Selector sel);

		// +(NSUInteger)hash;
		[Static]
		[Export ("hash")]
		nuint Hash { get; }

		// +(Class)superclass;
		[Static]
		[Export ("superclass")]
		Class Superclass { get; }

		// +(Class)class __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Static]
		[Export ("class")]
		Class Class { get; }

		// +(NSString *)description;
		[Static]
		[Export ("description")]
		string Description { get; }

		// +(NSString *)debugDescription;
		[Static]
		[Export ("debugDescription")]
		string DebugDescription { get; }
	}

	// @interface OS_object : NSObject
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface OS_object
	{
	}

	// @interface OS_os_workgroup : OS_object
	[BaseType (typeof(OS_object))]
	[DisableDefaultCtor]
	interface OS_os_workgroup
	{
	}

	// @protocol OS_os_workgroup_interval
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_os_workgroup_interval
	{
	}

	// @interface OS_os_workgroup_interval : OS_os_workgroup <OS_os_workgroup_interval>
	[BaseType (typeof(OS_os_workgroup))]
	[DisableDefaultCtor]
	interface OS_os_workgroup_interval : IOS_os_workgroup_interval
	{
	}

	// @protocol OS_os_workgroup_parallel
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_os_workgroup_parallel
	{
	}

	// @interface OS_os_workgroup_parallel : OS_os_workgroup <OS_os_workgroup_parallel>
	[BaseType (typeof(OS_os_workgroup))]
	[DisableDefaultCtor]
	interface OS_os_workgroup_parallel : IOS_os_workgroup_parallel
	{
	}

	// @protocol OS_dispatch_object <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface OS_dispatch_object
	{
	}

	// typedef void (^dispatch_block_t)();
	delegate void dispatch_block_t ();

	// @protocol OS_dispatch_queue <OS_dispatch_object>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_queue : IOS_dispatch_object
	{
	}

	// @protocol OS_dispatch_queue_global <OS_dispatch_queue>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_queue_global : IOS_dispatch_queue
	{
	}

	// @protocol OS_dispatch_queue_serial <OS_dispatch_queue>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_queue_serial : IOS_dispatch_queue
	{
	}

	// @protocol OS_dispatch_queue_main <OS_dispatch_queue_serial>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_queue_main : IOS_dispatch_queue_serial
	{
	}

	// @protocol OS_dispatch_queue_concurrent <OS_dispatch_queue>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_queue_concurrent : IOS_dispatch_queue
	{
	}

	[Static]
	partial interface Constants
	{
		// extern struct dispatch_queue_s _dispatch_main_q __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_main_q", "__Internal")]
		dispatch_queue_s _dispatch_main_q { get; }
	}

	// @protocol OS_dispatch_queue_attr <OS_dispatch_object>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_queue_attr : IOS_dispatch_object
	{
	}

	[Static]
	partial interface Constants
	{
		// extern struct dispatch_queue_attr_s _dispatch_queue_attr_concurrent __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.3))) __attribute__((visibility("default")));
		[Mac (10, 7), iOS (4, 3)]
		[Field ("_dispatch_queue_attr_concurrent", "__Internal")]
		dispatch_queue_attr_s _dispatch_queue_attr_concurrent { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const security_token_t KERNEL_SECURITY_TOKEN;
		[Field ("KERNEL_SECURITY_TOKEN", "__Internal")]
		security_token_t KERNEL_SECURITY_TOKEN { get; }

		// extern const audit_token_t KERNEL_AUDIT_TOKEN;
		[Field ("KERNEL_AUDIT_TOKEN", "__Internal")]
		audit_token_t KERNEL_AUDIT_TOKEN { get; }
	}

	// @protocol OS_dispatch_source <OS_dispatch_object>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_source : IOS_dispatch_object
	{
	}

	[Static]
	partial interface Constants
	{
		// extern const struct dispatch_source_type_s _dispatch_source_type_data_add __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_data_add", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_data_add { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_data_or __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_data_or", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_data_or { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_data_replace __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((visibility("default")));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("_dispatch_source_type_data_replace", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_data_replace { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_mach_send __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_mach_send", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_mach_send { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_mach_recv __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_mach_recv", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_mach_recv { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_memorypressure __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((visibility("default")));
		[Mac (10, 9), iOS (8, 0)]
		[Field ("_dispatch_source_type_memorypressure", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_memorypressure { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_proc __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_proc", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_proc { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_read __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_read", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_read { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_signal __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_signal", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_signal { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_timer __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_timer", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_timer { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_vnode __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_vnode", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_vnode { get; }

		// extern const struct dispatch_source_type_s _dispatch_source_type_write __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((visibility("default")));
		[Mac (10, 6), iOS (4, 0)]
		[Field ("_dispatch_source_type_write", "__Internal")]
		dispatch_source_type_s _dispatch_source_type_write { get; }
	}

	// @protocol OS_dispatch_group <OS_dispatch_object>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_group : IOS_dispatch_object
	{
	}

	// @protocol OS_dispatch_semaphore <OS_dispatch_object>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_semaphore : IOS_dispatch_object
	{
	}

	// @protocol OS_dispatch_data <OS_dispatch_object>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_data : IOS_dispatch_object
	{
	}

	[Static]
	partial interface Constants
	{
		// extern struct dispatch_data_s _dispatch_data_empty __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default")));
		[Mac (10, 7), iOS (5, 0)]
		[Field ("_dispatch_data_empty", "__Internal")]
		dispatch_data_s _dispatch_data_empty { get; }

		// extern const dispatch_block_t _Nonnull _dispatch_data_destructor_free __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((visibility("default")));
		[Mac (10, 7), iOS (5, 0)]
		[Field ("_dispatch_data_destructor_free", "__Internal")]
		dispatch_block_t _dispatch_data_destructor_free { get; }

		// extern const dispatch_block_t _Nonnull _dispatch_data_destructor_munmap __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((visibility("default")));
		[Mac (10, 9), iOS (7, 0)]
		[Field ("_dispatch_data_destructor_munmap", "__Internal")]
		dispatch_block_t _dispatch_data_destructor_munmap { get; }
	}

	// typedef _Bool (^dispatch_data_applier_t)(dispatch_data_t _Nonnull, size_t, const void * _Nonnull, size_t);
	unsafe delegate bool dispatch_data_applier_t (DispatchData arg0, nuint arg1, void* arg2, nuint arg3);

	// @protocol OS_dispatch_io <OS_dispatch_object>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_io : IOS_dispatch_object
	{
	}

	// typedef void (^dispatch_io_handler_t)(_Bool, dispatch_data_t _Nullable, int);
	delegate void dispatch_io_handler_t (bool arg0, [NullAllowed] DispatchData arg1, int arg2);

	// @protocol OS_dispatch_workloop <OS_dispatch_queue>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface OS_dispatch_workloop : IOS_dispatch_queue
	{
	}

	[Static]
	partial interface Constants
	{
		// extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertyDataWritten;
		[Field ("kCFStreamPropertyDataWritten", "__Internal")]
		unsafe CFStreamPropertyKey* kCFStreamPropertyDataWritten { get; }

		// extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertyAppendToFile;
		[Field ("kCFStreamPropertyAppendToFile", "__Internal")]
		unsafe CFStreamPropertyKey* kCFStreamPropertyAppendToFile { get; }

		// extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertyFileCurrentOffset;
		[Field ("kCFStreamPropertyFileCurrentOffset", "__Internal")]
		unsafe CFStreamPropertyKey* kCFStreamPropertyFileCurrentOffset { get; }

		// extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertySocketNativeHandle;
		[Field ("kCFStreamPropertySocketNativeHandle", "__Internal")]
		unsafe CFStreamPropertyKey* kCFStreamPropertySocketNativeHandle { get; }

		// extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertySocketRemoteHostName;
		[Field ("kCFStreamPropertySocketRemoteHostName", "__Internal")]
		unsafe CFStreamPropertyKey* kCFStreamPropertySocketRemoteHostName { get; }

		// extern CFStreamPropertyKey  _Null_unspecified const kCFStreamPropertySocketRemotePortNumber;
		[Field ("kCFStreamPropertySocketRemotePortNumber", "__Internal")]
		unsafe CFStreamPropertyKey* kCFStreamPropertySocketRemotePortNumber { get; }

		// extern const int kCFStreamErrorDomainSOCKS __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainSOCKS", "__Internal")]
		int kCFStreamErrorDomainSOCKS { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamPropertySOCKSProxy __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySOCKSProxy", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySOCKSProxy { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamPropertySOCKSProxyHost __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySOCKSProxyHost", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySOCKSProxyHost { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamPropertySOCKSProxyPort __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySOCKSProxyPort", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySOCKSProxyPort { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamPropertySOCKSVersion __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySOCKSVersion", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySOCKSVersion { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamSocketSOCKSVersion4 __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSocketSOCKSVersion4", "__Internal")]
		unsafe CFStringRef* kCFStreamSocketSOCKSVersion4 { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamSocketSOCKSVersion5 __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSocketSOCKSVersion5", "__Internal")]
		unsafe CFStringRef* kCFStreamSocketSOCKSVersion5 { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamPropertySOCKSUser __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySOCKSUser", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySOCKSUser { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamPropertySOCKSPassword __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySOCKSPassword", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySOCKSPassword { get; }

		// extern const int kCFStreamErrorDomainSSL __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainSSL", "__Internal")]
		int kCFStreamErrorDomainSSL { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamPropertySocketSecurityLevel __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySocketSecurityLevel", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySocketSecurityLevel { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamSocketSecurityLevelNone __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSocketSecurityLevelNone", "__Internal")]
		unsafe CFStringRef* kCFStreamSocketSecurityLevelNone { get; }

		// extern CF_DEPRECATED(10_2, 10_12, 2_0, 10_0) CFStringRef kCFStreamSocketSecurityLevelSSLv2 __attribute__((availability(ios, introduced=2.0, deprecated=10.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 10, 0)]
		[Field ("kCFStreamSocketSecurityLevelSSLv2", "__Internal")]
		unsafe CFStringRef* kCFStreamSocketSecurityLevelSSLv2 { get; }

		// extern CF_DEPRECATED(10_2, 10_12, 2_0, 10_0) CFStringRef kCFStreamSocketSecurityLevelSSLv3 __attribute__((availability(ios, introduced=2.0, deprecated=10.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 10, 0)]
		[Field ("kCFStreamSocketSecurityLevelSSLv3", "__Internal")]
		unsafe CFStringRef* kCFStreamSocketSecurityLevelSSLv3 { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamSocketSecurityLevelTLSv1 __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSocketSecurityLevelTLSv1", "__Internal")]
		unsafe CFStringRef* kCFStreamSocketSecurityLevelTLSv1 { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamSocketSecurityLevelNegotiatedSSL __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSocketSecurityLevelNegotiatedSSL", "__Internal")]
		unsafe CFStringRef* kCFStreamSocketSecurityLevelNegotiatedSSL { get; }

		// extern CF_AVAILABLE(10_2, 2_0) CFStringRef kCFStreamPropertyShouldCloseNativeSocket __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertyShouldCloseNativeSocket", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyShouldCloseNativeSocket { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFSetCallBacks kCFTypeSetCallBacks;
		[Field ("kCFTypeSetCallBacks", "__Internal")]
		CFSetCallBacks kCFTypeSetCallBacks { get; }

		// extern const CFSetCallBacks kCFCopyStringSetCallBacks;
		[Field ("kCFCopyStringSetCallBacks", "__Internal")]
		CFSetCallBacks kCFCopyStringSetCallBacks { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef kCFURLFileExists __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFURLResourceIsReachable instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use CFURLResourceIsReachable instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFURLResourceIsReachable instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use CFURLResourceIsReachable instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFURLResourceIsReachable instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFURLResourceIsReachable instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFURLResourceIsReachable instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFURLResourceIsReachable instead.")]
		[Field ("kCFURLFileExists", "__Internal")]
		unsafe CFStringRef* kCFURLFileExists { get; }

		// extern const CFStringRef kCFURLFileDirectoryContents __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use the CFURLEnumerator API instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use the CFURLEnumerator API instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use the CFURLEnumerator API instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use the CFURLEnumerator API instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use the CFURLEnumerator API instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use the CFURLEnumerator API instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use the CFURLEnumerator API instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use the CFURLEnumerator API instead.")]
		[Field ("kCFURLFileDirectoryContents", "__Internal")]
		unsafe CFStringRef* kCFURLFileDirectoryContents { get; }

		// extern const CFStringRef kCFURLFileLength __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSizeKey instead.")]
		[Field ("kCFURLFileLength", "__Internal")]
		unsafe CFStringRef* kCFURLFileLength { get; }

		// extern const CFStringRef kCFURLFileLastModificationTime __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLContentModificationDateKey instead.")]
		[Field ("kCFURLFileLastModificationTime", "__Internal")]
		unsafe CFStringRef* kCFURLFileLastModificationTime { get; }

		// extern const CFStringRef kCFURLFilePOSIXMode __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Field ("kCFURLFilePOSIXMode", "__Internal")]
		unsafe CFStringRef* kCFURLFilePOSIXMode { get; }

		// extern const CFStringRef kCFURLFileOwnerID __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use CFURLCopyResourcePropertyForKey with kCFURLFileSecurityKey and then the CFFileSecurity API instead.")]
		[Field ("kCFURLFileOwnerID", "__Internal")]
		unsafe CFStringRef* kCFURLFileOwnerID { get; }

		// extern const CFStringRef kCFURLHTTPStatusCode __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use NSHTTPURLResponse methods instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Field ("kCFURLHTTPStatusCode", "__Internal")]
		unsafe CFStringRef* kCFURLHTTPStatusCode { get; }

		// extern const CFStringRef kCFURLHTTPStatusLine __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use NSHTTPURLResponse methods instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSHTTPURLResponse methods instead.")]
		[Field ("kCFURLHTTPStatusLine", "__Internal")]
		unsafe CFStringRef* kCFURLHTTPStatusLine { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef kCFBundleInfoDictionaryVersionKey;
		[Field ("kCFBundleInfoDictionaryVersionKey", "__Internal")]
		unsafe CFStringRef* kCFBundleInfoDictionaryVersionKey { get; }

		// extern const CFStringRef kCFBundleExecutableKey;
		[Field ("kCFBundleExecutableKey", "__Internal")]
		unsafe CFStringRef* kCFBundleExecutableKey { get; }

		// extern const CFStringRef kCFBundleIdentifierKey;
		[Field ("kCFBundleIdentifierKey", "__Internal")]
		unsafe CFStringRef* kCFBundleIdentifierKey { get; }

		// extern const CFStringRef kCFBundleVersionKey;
		[Field ("kCFBundleVersionKey", "__Internal")]
		unsafe CFStringRef* kCFBundleVersionKey { get; }

		// extern const CFStringRef kCFBundleDevelopmentRegionKey;
		[Field ("kCFBundleDevelopmentRegionKey", "__Internal")]
		unsafe CFStringRef* kCFBundleDevelopmentRegionKey { get; }

		// extern const CFStringRef kCFBundleNameKey;
		[Field ("kCFBundleNameKey", "__Internal")]
		unsafe CFStringRef* kCFBundleNameKey { get; }

		// extern const CFStringRef kCFBundleLocalizationsKey;
		[Field ("kCFBundleLocalizationsKey", "__Internal")]
		unsafe CFStringRef* kCFBundleLocalizationsKey { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef kCFPlugInDynamicRegistrationKey;
		[Field ("kCFPlugInDynamicRegistrationKey", "__Internal")]
		unsafe CFStringRef* kCFPlugInDynamicRegistrationKey { get; }

		// extern const CFStringRef kCFPlugInDynamicRegisterFunctionKey;
		[Field ("kCFPlugInDynamicRegisterFunctionKey", "__Internal")]
		unsafe CFStringRef* kCFPlugInDynamicRegisterFunctionKey { get; }

		// extern const CFStringRef kCFPlugInUnloadFunctionKey;
		[Field ("kCFPlugInUnloadFunctionKey", "__Internal")]
		unsafe CFStringRef* kCFPlugInUnloadFunctionKey { get; }

		// extern const CFStringRef kCFPlugInFactoriesKey;
		[Field ("kCFPlugInFactoriesKey", "__Internal")]
		unsafe CFStringRef* kCFPlugInFactoriesKey { get; }

		// extern const CFStringRef kCFPlugInTypesKey;
		[Field ("kCFPlugInTypesKey", "__Internal")]
		unsafe CFStringRef* kCFPlugInTypesKey { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef kCFUserNotificationIconURLKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationIconURLKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationIconURLKey { get; }

		// extern const CFStringRef kCFUserNotificationSoundURLKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationSoundURLKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationSoundURLKey { get; }

		// extern const CFStringRef kCFUserNotificationLocalizationURLKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationLocalizationURLKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationLocalizationURLKey { get; }

		// extern const CFStringRef kCFUserNotificationAlertHeaderKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationAlertHeaderKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationAlertHeaderKey { get; }

		// extern const CFStringRef kCFUserNotificationAlertMessageKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationAlertMessageKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationAlertMessageKey { get; }

		// extern const CFStringRef kCFUserNotificationDefaultButtonTitleKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationDefaultButtonTitleKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationDefaultButtonTitleKey { get; }

		// extern const CFStringRef kCFUserNotificationAlternateButtonTitleKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationAlternateButtonTitleKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationAlternateButtonTitleKey { get; }

		// extern const CFStringRef kCFUserNotificationOtherButtonTitleKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationOtherButtonTitleKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationOtherButtonTitleKey { get; }

		// extern const CFStringRef kCFUserNotificationProgressIndicatorValueKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationProgressIndicatorValueKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationProgressIndicatorValueKey { get; }

		// extern const CFStringRef kCFUserNotificationPopUpTitlesKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationPopUpTitlesKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationPopUpTitlesKey { get; }

		// extern const CFStringRef kCFUserNotificationTextFieldTitlesKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationTextFieldTitlesKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationTextFieldTitlesKey { get; }

		// extern const CFStringRef kCFUserNotificationCheckBoxTitlesKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationCheckBoxTitlesKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationCheckBoxTitlesKey { get; }

		// extern const CFStringRef kCFUserNotificationTextFieldValuesKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationTextFieldValuesKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationTextFieldValuesKey { get; }

		// extern const CFStringRef kCFUserNotificationPopUpSelectionKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 3)]
		[Field ("kCFUserNotificationPopUpSelectionKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationPopUpSelectionKey { get; }

		// extern const CFStringRef kCFUserNotificationAlertTopMostKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationAlertTopMostKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationAlertTopMostKey { get; }

		// extern const CFStringRef kCFUserNotificationKeyboardTypesKey __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 0)]
		[Field ("kCFUserNotificationKeyboardTypesKey", "__Internal")]
		unsafe CFStringRef* kCFUserNotificationKeyboardTypesKey { get; }

		// extern double NSFoundationVersionNumber;
		[Field ("NSFoundationVersionNumber", "__Internal")]
		double NSFoundationVersionNumber { get; }
	}

	// typedef NSComparisonResult (^NSComparator)(id _Nonnull, id _Nonnull);
	delegate NSComparisonResult NSComparator (NSObject arg0, NSObject arg1);

	// @protocol NSCopying
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSCopying
	{
		// @required -(id _Nonnull)copyWithZone:(NSZone * _Nullable)zone;
		[Abstract]
		[Export ("copyWithZone:")]
		unsafe NSObject CopyWithZone ([NullAllowed] NSZone* zone);
	}

	// @protocol NSMutableCopying
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSMutableCopying
	{
		// @required -(id _Nonnull)mutableCopyWithZone:(NSZone * _Nullable)zone;
		[Abstract]
		[Export ("mutableCopyWithZone:")]
		unsafe NSObject MutableCopyWithZone ([NullAllowed] NSZone* zone);
	}

	// @protocol NSCoding
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSCoding
	{
		// @required -(void)encodeWithCoder:(NSCoder * _Nonnull)coder;
		[Abstract]
		[Export ("encodeWithCoder:")]
		void EncodeWithCoder (NSCoder coder);

		// @required -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder;
		[Abstract]
		[Export ("initWithCoder:")]
		NativeHandle Constructor (NSCoder coder);
	}

	// @protocol NSSecureCoding <NSCoding>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSSecureCoding : INSCoding
	{
		// @required @property (readonly, class) BOOL supportsSecureCoding;
		[Static, Abstract]
		[Export ("supportsSecureCoding")]
		bool SupportsSecureCoding { get; }
	}

	// @interface NSCoderMethods (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSCoderMethods
	{
		// +(NSInteger)version;
		// +(void)setVersion:(NSInteger)aVersion;
		[Static]
		[Export ("version")]
		nint Version { get; set; }

		// @property (readonly) Class _Nonnull classForCoder;
		[Export ("classForCoder")]
		Class ClassForCoder { get; }

		// -(id _Nullable)replacementObjectForCoder:(NSCoder * _Nonnull)coder;
		[Export ("replacementObjectForCoder:")]
		[return: NullAllowed]
		NSObject ReplacementObjectForCoder (NSCoder coder);

		// -(id _Nullable)awakeAfterUsingCoder:(NSCoder * _Nonnull)coder __attribute__((ns_consumes_self)) __attribute__((ns_returns_retained));
		[Export ("awakeAfterUsingCoder:")]
		[return: NullAllowed]
		NSObject AwakeAfterUsingCoder (NSCoder coder);
	}

	// @protocol NSDiscardableContent
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSDiscardableContent
	{
		// @required -(BOOL)beginContentAccess;
		[Abstract]
		[Export ("beginContentAccess")]
		bool BeginContentAccess { get; }

		// @required -(void)endContentAccess;
		[Abstract]
		[Export ("endContentAccess")]
		void EndContentAccess ();

		// @required -(void)discardContentIfPossible;
		[Abstract]
		[Export ("discardContentIfPossible")]
		void DiscardContentIfPossible ();

		// @required -(BOOL)isContentDiscarded;
		[Abstract]
		[Export ("isContentDiscarded")]
		bool IsContentDiscarded { get; }
	}

	// @interface NSDiscardableContentProxy (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSDiscardableContentProxy
	{
		// @property (readonly, retain) id _Nonnull autoContentAccessingProxy __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("autoContentAccessingProxy", ArgumentSemantic.Retain)]
		NSObject AutoContentAccessingProxy { get; }
	}

	// @protocol NSFastEnumeration
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSFastEnumeration
	{
		// @required -(NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState * _Nonnull)state objects:(id  _Nullable * _Nonnull)buffer count:(NSUInteger)len;
		[Abstract]
		[Export ("countByEnumeratingWithState:objects:count:")]
		unsafe nuint Objects (NSFastEnumerationState* state, NSObject[] buffer, nuint len);
	}

	// audit-objc-generics: @interface NSEnumerator<ObjectType> : NSObject <NSFastEnumeration>
	[BaseType (typeof(NSObject))]
	interface NSEnumerator : INSFastEnumeration
	{
		// -(ObjectType _Nullable)nextObject;
		[NullAllowed, Export ("nextObject")]
		NSObject NextObject { get; }
	}

	// @interface NSExtendedEnumerator (NSEnumerator)
	[Category]
	[BaseType (typeof(NSEnumerator))]
	interface NSEnumerator_NSExtendedEnumerator
	{
		// @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
		[Export ("allObjects", ArgumentSemantic.Copy)]
		NSObject[] AllObjects { get; }
	}

	// @interface NSValue : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSValue : INSCopying, INSSecureCoding
	{
		// -(void)getValue:(void * _Nonnull)value size:(NSUInteger)size __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("getValue:size:")]
		unsafe void GetValue (void* value, nuint size);

		// @property (readonly) NS_RETURNS_INNER_POINTER const char * objCType __attribute__((objc_returns_inner_pointer));
		[Export ("objCType")]
		unsafe sbyte* ObjCType { get; }

		// -(instancetype _Nonnull)initWithBytes:(const void * _Nonnull)value objCType:(const char * _Nonnull)type __attribute__((objc_designated_initializer));
		[Export ("initWithBytes:objCType:")]
		[DesignatedInitializer]
		unsafe NativeHandle Constructor (void* value, sbyte* type);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSValueCreation (NSValue)
	[Category]
	[BaseType (typeof(NSValue))]
	interface NSValue_NSValueCreation
	{
		// +(NSValue * _Nonnull)valueWithBytes:(const void * _Nonnull)value objCType:(const char * _Nonnull)type;
		[Static]
		[Export ("valueWithBytes:objCType:")]
		unsafe NSValue ValueWithBytes (void* value, sbyte* type);

		// +(NSValue * _Nonnull)value:(const void * _Nonnull)value withObjCType:(const char * _Nonnull)type;
		[Static]
		[Export ("value:withObjCType:")]
		unsafe NSValue Value (void* value, sbyte* type);
	}

	// @interface NSValueExtensionMethods (NSValue)
	[Category]
	[BaseType (typeof(NSValue))]
	interface NSValue_NSValueExtensionMethods
	{
		// +(NSValue * _Nonnull)valueWithNonretainedObject:(id _Nullable)anObject;
		[Static]
		[Export ("valueWithNonretainedObject:")]
		NSValue ValueWithNonretainedObject ([NullAllowed] NSObject anObject);

		// @property (readonly) id _Nullable nonretainedObjectValue;
		[NullAllowed, Export ("nonretainedObjectValue")]
		NSObject NonretainedObjectValue { get; }

		// +(NSValue * _Nonnull)valueWithPointer:(const void * _Nullable)pointer;
		[Static]
		[Export ("valueWithPointer:")]
		unsafe NSValue ValueWithPointer ([NullAllowed] void* pointer);

		// @property (readonly) void * _Nullable pointerValue;
		[NullAllowed, Export ("pointerValue")]
		unsafe void* PointerValue { get; }

		// -(BOOL)isEqualToValue:(NSValue * _Nonnull)value;
		[Export ("isEqualToValue:")]
		bool IsEqualToValue (NSValue value);
	}

	// @interface NSNumber : NSValue
	[BaseType (typeof(NSValue))]
	interface NSNumber
	{
		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// -(NSNumber * _Nonnull)initWithChar:(char)value __attribute__((objc_designated_initializer));
		[Export ("initWithChar:")]
		[DesignatedInitializer]
		NativeHandle Constructor (sbyte value);

		// -(NSNumber * _Nonnull)initWithUnsignedChar:(unsigned char)value __attribute__((objc_designated_initializer));
		[Export ("initWithUnsignedChar:")]
		[DesignatedInitializer]
		NativeHandle Constructor (byte value);

		// -(NSNumber * _Nonnull)initWithShort:(short)value __attribute__((objc_designated_initializer));
		[Export ("initWithShort:")]
		[DesignatedInitializer]
		NativeHandle Constructor (short value);

		// -(NSNumber * _Nonnull)initWithUnsignedShort:(unsigned short)value __attribute__((objc_designated_initializer));
		[Export ("initWithUnsignedShort:")]
		[DesignatedInitializer]
		NativeHandle Constructor (ushort value);

		// -(NSNumber * _Nonnull)initWithInt:(int)value __attribute__((objc_designated_initializer));
		[Export ("initWithInt:")]
		[DesignatedInitializer]
		NativeHandle Constructor (int value);

		// -(NSNumber * _Nonnull)initWithUnsignedInt:(unsigned int)value __attribute__((objc_designated_initializer));
		[Export ("initWithUnsignedInt:")]
		[DesignatedInitializer]
		NativeHandle Constructor (uint value);

		// -(NSNumber * _Nonnull)initWithLong:(long)value __attribute__((objc_designated_initializer));
		[Export ("initWithLong:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nint value);

		// -(NSNumber * _Nonnull)initWithUnsignedLong:(unsigned long)value __attribute__((objc_designated_initializer));
		[Export ("initWithUnsignedLong:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nuint value);

		// -(NSNumber * _Nonnull)initWithLongLong:(long long)value __attribute__((objc_designated_initializer));
		[Export ("initWithLongLong:")]
		[DesignatedInitializer]
		NativeHandle Constructor (long value);

		// -(NSNumber * _Nonnull)initWithUnsignedLongLong:(unsigned long long)value __attribute__((objc_designated_initializer));
		[Export ("initWithUnsignedLongLong:")]
		[DesignatedInitializer]
		NativeHandle Constructor (ulong value);

		// -(NSNumber * _Nonnull)initWithFloat:(float)value __attribute__((objc_designated_initializer));
		[Export ("initWithFloat:")]
		[DesignatedInitializer]
		NativeHandle Constructor (float value);

		// -(NSNumber * _Nonnull)initWithDouble:(double)value __attribute__((objc_designated_initializer));
		[Export ("initWithDouble:")]
		[DesignatedInitializer]
		NativeHandle Constructor (double value);

		// -(NSNumber * _Nonnull)initWithBool:(BOOL)value __attribute__((objc_designated_initializer));
		[Export ("initWithBool:")]
		[DesignatedInitializer]
		NativeHandle Constructor (bool value);

		// -(NSNumber * _Nonnull)initWithInteger:(NSInteger)value __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("initWithInteger:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nint value);

		// -(NSNumber * _Nonnull)initWithUnsignedInteger:(NSUInteger)value __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("initWithUnsignedInteger:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nuint value);

		// @property (readonly) char charValue;
		[Export ("charValue")]
		sbyte CharValue { get; }

		// @property (readonly) unsigned char unsignedCharValue;
		[Export ("unsignedCharValue")]
		byte UnsignedCharValue { get; }

		// @property (readonly) short shortValue;
		[Export ("shortValue")]
		short ShortValue { get; }

		// @property (readonly) unsigned short unsignedShortValue;
		[Export ("unsignedShortValue")]
		ushort UnsignedShortValue { get; }

		// @property (readonly) int intValue;
		[Export ("intValue")]
		int IntValue { get; }

		// @property (readonly) unsigned int unsignedIntValue;
		[Export ("unsignedIntValue")]
		uint UnsignedIntValue { get; }

		// @property (readonly) long longValue;
		[Export ("longValue")]
		nint LongValue { get; }

		// @property (readonly) unsigned long unsignedLongValue;
		[Export ("unsignedLongValue")]
		nuint UnsignedLongValue { get; }

		// @property (readonly) long long longLongValue;
		[Export ("longLongValue")]
		long LongLongValue { get; }

		// @property (readonly) unsigned long long unsignedLongLongValue;
		[Export ("unsignedLongLongValue")]
		ulong UnsignedLongLongValue { get; }

		// @property (readonly) float floatValue;
		[Export ("floatValue")]
		float FloatValue { get; }

		// @property (readonly) double doubleValue;
		[Export ("doubleValue")]
		double DoubleValue { get; }

		// @property (readonly) BOOL boolValue;
		[Export ("boolValue")]
		bool BoolValue { get; }

		// @property (readonly) NSInteger integerValue __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("integerValue")]
		nint IntegerValue { get; }

		// @property (readonly) NSUInteger unsignedIntegerValue __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("unsignedIntegerValue")]
		nuint UnsignedIntegerValue { get; }

		// @property (readonly, copy) NSString * _Nonnull stringValue;
		[Export ("stringValue")]
		string StringValue { get; }

		// -(NSComparisonResult)compare:(NSNumber * _Nonnull)otherNumber;
		[Export ("compare:")]
		NSComparisonResult Compare (NSNumber otherNumber);

		// -(BOOL)isEqualToNumber:(NSNumber * _Nonnull)number;
		[Export ("isEqualToNumber:")]
		bool IsEqualToNumber (NSNumber number);

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
		[Export ("descriptionWithLocale:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale);
	}

	// @interface NSNumberCreation (NSNumber)
	[Category]
	[BaseType (typeof(NSNumber))]
	interface NSNumber_NSNumberCreation
	{
		// +(NSNumber * _Nonnull)numberWithChar:(char)value;
		[Static]
		[Export ("numberWithChar:")]
		NSNumber NumberWithChar (sbyte value);

		// +(NSNumber * _Nonnull)numberWithUnsignedChar:(unsigned char)value;
		[Static]
		[Export ("numberWithUnsignedChar:")]
		NSNumber NumberWithUnsignedChar (byte value);

		// +(NSNumber * _Nonnull)numberWithShort:(short)value;
		[Static]
		[Export ("numberWithShort:")]
		NSNumber NumberWithShort (short value);

		// +(NSNumber * _Nonnull)numberWithUnsignedShort:(unsigned short)value;
		[Static]
		[Export ("numberWithUnsignedShort:")]
		NSNumber NumberWithUnsignedShort (ushort value);

		// +(NSNumber * _Nonnull)numberWithInt:(int)value;
		[Static]
		[Export ("numberWithInt:")]
		NSNumber NumberWithInt (int value);

		// +(NSNumber * _Nonnull)numberWithUnsignedInt:(unsigned int)value;
		[Static]
		[Export ("numberWithUnsignedInt:")]
		NSNumber NumberWithUnsignedInt (uint value);

		// +(NSNumber * _Nonnull)numberWithLong:(long)value;
		[Static]
		[Export ("numberWithLong:")]
		NSNumber NumberWithLong (nint value);

		// +(NSNumber * _Nonnull)numberWithUnsignedLong:(unsigned long)value;
		[Static]
		[Export ("numberWithUnsignedLong:")]
		NSNumber NumberWithUnsignedLong (nuint value);

		// +(NSNumber * _Nonnull)numberWithLongLong:(long long)value;
		[Static]
		[Export ("numberWithLongLong:")]
		NSNumber NumberWithLongLong (long value);

		// +(NSNumber * _Nonnull)numberWithUnsignedLongLong:(unsigned long long)value;
		[Static]
		[Export ("numberWithUnsignedLongLong:")]
		NSNumber NumberWithUnsignedLongLong (ulong value);

		// +(NSNumber * _Nonnull)numberWithFloat:(float)value;
		[Static]
		[Export ("numberWithFloat:")]
		NSNumber NumberWithFloat (float value);

		// +(NSNumber * _Nonnull)numberWithDouble:(double)value;
		[Static]
		[Export ("numberWithDouble:")]
		NSNumber NumberWithDouble (double value);

		// +(NSNumber * _Nonnull)numberWithBool:(BOOL)value;
		[Static]
		[Export ("numberWithBool:")]
		NSNumber NumberWithBool (bool value);

		// +(NSNumber * _Nonnull)numberWithInteger:(NSInteger)value __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Static]
		[Export ("numberWithInteger:")]
		NSNumber NumberWithInteger (nint value);

		// +(NSNumber * _Nonnull)numberWithUnsignedInteger:(NSUInteger)value __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Static]
		[Export ("numberWithUnsignedInteger:")]
		NSNumber NumberWithUnsignedInteger (nuint value);
	}

	// @interface NSDeprecated (NSValue)
	[Category]
	[BaseType (typeof(NSValue))]
	interface NSValue_NSDeprecated
	{
		// -(void)getValue:(void * _Nonnull)value __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("getValue:")]
		unsafe void GetValue (void* value);
	}

	// @interface NSValueRangeExtensions (NSValue)
	[Category]
	[BaseType (typeof(NSValue))]
	interface NSValue_NSValueRangeExtensions
	{
		// +(NSValue * _Nonnull)valueWithRange:(NSRange)range;
		[Static]
		[Export ("valueWithRange:")]
		NSValue ValueWithRange (NSRange range);

		// @property (readonly) NSRange rangeValue;
		[Export ("rangeValue")]
		NSRange RangeValue { get; }
	}

	// audit-objc-generics: @interface NSOrderedCollectionChange<ObjectType> : NSObject
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface NSOrderedCollectionChange
	{
		// +(NSOrderedCollectionChange<ObjectType> * _Nonnull)changeWithObject:(ObjectType _Nullable)anObject type:(NSCollectionChangeType)type index:(NSUInteger)index;
		[Static]
		[Export ("changeWithObject:type:index:")]
		NSOrderedCollectionChange<NSObject> ChangeWithObject ([NullAllowed] NSObject anObject, NSCollectionChangeType type, nuint index);

		// +(NSOrderedCollectionChange<ObjectType> * _Nonnull)changeWithObject:(ObjectType _Nullable)anObject type:(NSCollectionChangeType)type index:(NSUInteger)index associatedIndex:(NSUInteger)associatedIndex;
		[Static]
		[Export ("changeWithObject:type:index:associatedIndex:")]
		NSOrderedCollectionChange<NSObject> ChangeWithObject ([NullAllowed] NSObject anObject, NSCollectionChangeType type, nuint index, nuint associatedIndex);

		// @property (readonly, strong) ObjectType _Nullable object;
		[NullAllowed, Export ("object", ArgumentSemantic.Strong)]
		NSObject Object { get; }

		// @property (readonly) NSCollectionChangeType changeType;
		[Export ("changeType")]
		NSCollectionChangeType ChangeType { get; }

		// @property (readonly) NSUInteger index;
		[Export ("index")]
		nuint Index { get; }

		// @property (readonly) NSUInteger associatedIndex;
		[Export ("associatedIndex")]
		nuint AssociatedIndex { get; }

		// -(instancetype _Nonnull)initWithObject:(ObjectType _Nullable)anObject type:(NSCollectionChangeType)type index:(NSUInteger)index;
		[Export ("initWithObject:type:index:")]
		NativeHandle Constructor ([NullAllowed] NSObject anObject, NSCollectionChangeType type, nuint index);

		// -(instancetype _Nonnull)initWithObject:(ObjectType _Nullable)anObject type:(NSCollectionChangeType)type index:(NSUInteger)index associatedIndex:(NSUInteger)associatedIndex __attribute__((objc_designated_initializer));
		[Export ("initWithObject:type:index:associatedIndex:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] NSObject anObject, NSCollectionChangeType type, nuint index, nuint associatedIndex);
	}

	// @interface NSIndexSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSIndexSet : INSCopying, INSMutableCopying, INSSecureCoding
	{
		[StructLayout (LayoutKind.Sequential)]
		public struct 
		{
			public nuint _isEmpty;

			public nuint _hasSingleRange;

			public nuint _cacheValid;

			public nuint _reservedArrayBinderController;
		}


		[StructLayout (LayoutKind.Explicit)]
		public struct 
		{
			[StructLayout (LayoutKind.Sequential)]
			public struct __singleRange
			{
				public NSRange _range;
			}


			[FieldOffset (0)]
			public __singleRange _singleRange;

			[StructLayout (LayoutKind.Sequential)]
			public struct __multipleRanges
			{
				public unsafe void* _data;

				public unsafe void* _reserved;
			}


			[FieldOffset (0)]
			public __multipleRanges _multipleRanges;
		}


		// +(instancetype _Nonnull)indexSet;
		[Static]
		[Export ("indexSet")]
		NSIndexSet IndexSet ();

		// +(instancetype _Nonnull)indexSetWithIndex:(NSUInteger)value;
		[Static]
		[Export ("indexSetWithIndex:")]
		NSIndexSet IndexSetWithIndex (nuint value);

		// +(instancetype _Nonnull)indexSetWithIndexesInRange:(NSRange)range;
		[Static]
		[Export ("indexSetWithIndexesInRange:")]
		NSIndexSet IndexSetWithIndexesInRange (NSRange range);

		// -(instancetype _Nonnull)initWithIndexesInRange:(NSRange)range __attribute__((objc_designated_initializer));
		[Export ("initWithIndexesInRange:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSRange range);

		// -(instancetype _Nonnull)initWithIndexSet:(NSIndexSet * _Nonnull)indexSet __attribute__((objc_designated_initializer));
		[Export ("initWithIndexSet:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSIndexSet indexSet);

		// -(instancetype _Nonnull)initWithIndex:(NSUInteger)value;
		[Export ("initWithIndex:")]
		NativeHandle Constructor (nuint value);

		// -(BOOL)isEqualToIndexSet:(NSIndexSet * _Nonnull)indexSet;
		[Export ("isEqualToIndexSet:")]
		bool IsEqualToIndexSet (NSIndexSet indexSet);

		// @property (readonly) NSUInteger count;
		[Export ("count")]
		nuint Count { get; }

		// @property (readonly) NSUInteger firstIndex;
		[Export ("firstIndex")]
		nuint FirstIndex { get; }

		// @property (readonly) NSUInteger lastIndex;
		[Export ("lastIndex")]
		nuint LastIndex { get; }

		// -(NSUInteger)indexGreaterThanIndex:(NSUInteger)value;
		[Export ("indexGreaterThanIndex:")]
		nuint IndexGreaterThanIndex (nuint value);

		// -(NSUInteger)indexLessThanIndex:(NSUInteger)value;
		[Export ("indexLessThanIndex:")]
		nuint IndexLessThanIndex (nuint value);

		// -(NSUInteger)indexGreaterThanOrEqualToIndex:(NSUInteger)value;
		[Export ("indexGreaterThanOrEqualToIndex:")]
		nuint IndexGreaterThanOrEqualToIndex (nuint value);

		// -(NSUInteger)indexLessThanOrEqualToIndex:(NSUInteger)value;
		[Export ("indexLessThanOrEqualToIndex:")]
		nuint IndexLessThanOrEqualToIndex (nuint value);

		// -(NSUInteger)getIndexes:(NSUInteger * _Nonnull)indexBuffer maxCount:(NSUInteger)bufferSize inIndexRange:(NSRangePointer _Nullable)range;
		[Export ("getIndexes:maxCount:inIndexRange:")]
		unsafe nuint GetIndexes (nuint* indexBuffer, nuint bufferSize, [NullAllowed] NSRangePointer* range);

		// -(NSUInteger)countOfIndexesInRange:(NSRange)range __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("countOfIndexesInRange:")]
		nuint CountOfIndexesInRange (NSRange range);

		// -(BOOL)containsIndex:(NSUInteger)value;
		[Export ("containsIndex:")]
		bool ContainsIndex (nuint value);

		// -(BOOL)containsIndexesInRange:(NSRange)range;
		[Export ("containsIndexesInRange:")]
		bool ContainsIndexesInRange (NSRange range);

		// -(BOOL)containsIndexes:(NSIndexSet * _Nonnull)indexSet;
		[Export ("containsIndexes:")]
		bool ContainsIndexes (NSIndexSet indexSet);

		// -(BOOL)intersectsIndexesInRange:(NSRange)range;
		[Export ("intersectsIndexesInRange:")]
		bool IntersectsIndexesInRange (NSRange range);

		// -(void)enumerateIndexesUsingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateIndexesUsingBlock:")]
		unsafe void EnumerateIndexesUsingBlock (Action<nuint, bool*> block);

		// -(void)enumerateIndexesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateIndexesWithOptions:usingBlock:")]
		unsafe void EnumerateIndexesWithOptions (NSEnumerationOptions opts, Action<nuint, bool*> block);

		// -(void)enumerateIndexesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateIndexesInRange:options:usingBlock:")]
		unsafe void EnumerateIndexesInRange (NSRange range, NSEnumerationOptions opts, Action<nuint, bool*> block);

		// -(NSUInteger)indexPassingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexPassingTest:")]
		unsafe nuint IndexPassingTest (Func<nuint, bool*, bool> predicate);

		// -(NSUInteger)indexWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexWithOptions:passingTest:")]
		unsafe nuint IndexWithOptions (NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

		// -(NSUInteger)indexInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexInRange:options:passingTest:")]
		unsafe nuint IndexInRange (NSRange range, NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesPassingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexesPassingTest:")]
		unsafe NSIndexSet IndexesPassingTest (Func<nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexesWithOptions:passingTest:")]
		unsafe NSIndexSet IndexesWithOptions (NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexesInRange:options:passingTest:")]
		unsafe NSIndexSet IndexesInRange (NSRange range, NSEnumerationOptions opts, Func<nuint, bool*, bool> predicate);

		// -(void)enumerateRangesUsingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("enumerateRangesUsingBlock:")]
		unsafe void EnumerateRangesUsingBlock (Action<NSRange, bool*> block);

		// -(void)enumerateRangesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("enumerateRangesWithOptions:usingBlock:")]
		unsafe void EnumerateRangesWithOptions (NSEnumerationOptions opts, Action<NSRange, bool*> block);

		// -(void)enumerateRangesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("enumerateRangesInRange:options:usingBlock:")]
		unsafe void EnumerateRangesInRange (NSRange range, NSEnumerationOptions opts, Action<NSRange, bool*> block);
	}

	// @interface NSMutableIndexSet : NSIndexSet
	[BaseType (typeof(NSIndexSet))]
	interface NSMutableIndexSet
	{
		// -(void)addIndexes:(NSIndexSet * _Nonnull)indexSet;
		[Export ("addIndexes:")]
		void AddIndexes (NSIndexSet indexSet);

		// -(void)removeIndexes:(NSIndexSet * _Nonnull)indexSet;
		[Export ("removeIndexes:")]
		void RemoveIndexes (NSIndexSet indexSet);

		// -(void)removeAllIndexes;
		[Export ("removeAllIndexes")]
		void RemoveAllIndexes ();

		// -(void)addIndex:(NSUInteger)value;
		[Export ("addIndex:")]
		void AddIndex (nuint value);

		// -(void)removeIndex:(NSUInteger)value;
		[Export ("removeIndex:")]
		void RemoveIndex (nuint value);

		// -(void)addIndexesInRange:(NSRange)range;
		[Export ("addIndexesInRange:")]
		void AddIndexesInRange (NSRange range);

		// -(void)removeIndexesInRange:(NSRange)range;
		[Export ("removeIndexesInRange:")]
		void RemoveIndexesInRange (NSRange range);

		// -(void)shiftIndexesStartingAtIndex:(NSUInteger)index by:(NSInteger)delta;
		[Export ("shiftIndexesStartingAtIndex:by:")]
		void ShiftIndexesStartingAtIndex (nuint index, nint delta);
	}

	// audit-objc-generics: @interface NSOrderedCollectionDifference<ObjectType> : NSObject <NSFastEnumeration>
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[BaseType (typeof(NSObject))]
	interface NSOrderedCollectionDifference : INSFastEnumeration
	{
		// -(instancetype _Nonnull)initWithChanges:(NSArray<NSOrderedCollectionChange<ObjectType> *> * _Nonnull)changes;
		[Export ("initWithChanges:")]
		NativeHandle Constructor (NSOrderedCollectionChange<NSObject>[] changes);

		// -(instancetype _Nonnull)initWithInsertIndexes:(NSIndexSet * _Nonnull)inserts insertedObjects:(NSArray<ObjectType> * _Nullable)insertedObjects removeIndexes:(NSIndexSet * _Nonnull)removes removedObjects:(NSArray<ObjectType> * _Nullable)removedObjects additionalChanges:(NSArray<NSOrderedCollectionChange<ObjectType> *> * _Nonnull)changes __attribute__((objc_designated_initializer));
		[Export ("initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSIndexSet inserts, [NullAllowed] NSObject[] insertedObjects, NSIndexSet removes, [NullAllowed] NSObject[] removedObjects, NSOrderedCollectionChange<NSObject>[] changes);

		// -(instancetype _Nonnull)initWithInsertIndexes:(NSIndexSet * _Nonnull)inserts insertedObjects:(NSArray<ObjectType> * _Nullable)insertedObjects removeIndexes:(NSIndexSet * _Nonnull)removes removedObjects:(NSArray<ObjectType> * _Nullable)removedObjects;
		[Export ("initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:")]
		NativeHandle Constructor (NSIndexSet inserts, [NullAllowed] NSObject[] insertedObjects, NSIndexSet removes, [NullAllowed] NSObject[] removedObjects);

		// @property (readonly, strong) NSArray<NSOrderedCollectionChange<ObjectType> *> * _Nonnull insertions __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("insertions", ArgumentSemantic.Strong)]
		NSOrderedCollectionChange<NSObject>[] Insertions { get; }

		// @property (readonly, strong) NSArray<NSOrderedCollectionChange<ObjectType> *> * _Nonnull removals __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("removals", ArgumentSemantic.Strong)]
		NSOrderedCollectionChange<NSObject>[] Removals { get; }

		// @property (readonly, assign) BOOL hasChanges;
		[Export ("hasChanges")]
		bool HasChanges { get; }

		// -(NSOrderedCollectionDifference<id> * _Nonnull)differenceByTransformingChangesWithBlock:(NSOrderedCollectionChange<id> * _Nonnull (^ _Nonnull)(NSOrderedCollectionChange<ObjectType> * _Nonnull))block;
		[Export ("differenceByTransformingChangesWithBlock:")]
		NSOrderedCollectionDifference<NSObject> DifferenceByTransformingChangesWithBlock (Func<NSOrderedCollectionChange<NSObject>, NSOrderedCollectionChange<NSObject>> block);

		// -(instancetype _Nonnull)inverseDifference __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("inverseDifference")]
		NSOrderedCollectionDifference InverseDifference ();
	}

	// audit-objc-generics: @interface NSArray<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
	[BaseType (typeof(NSObject))]
	interface NSArray : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
	{
		// @property (readonly) NSUInteger count;
		[Export ("count")]
		nuint Count { get; }

		// -(ObjectType _Nonnull)objectAtIndex:(NSUInteger)index;
		[Export ("objectAtIndex:")]
		NSObject ObjectAtIndex (nuint index);

		// -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
		[Export ("initWithObjects:count:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] NSObject[] objects, nuint cnt);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSExtendedArray (NSArray)
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSExtendedArray
	{
		// -(NSArray<ObjectType> * _Nonnull)arrayByAddingObject:(ObjectType _Nonnull)anObject;
		[Export ("arrayByAddingObject:")]
		NSObject[] ArrayByAddingObject (NSObject anObject);

		// -(NSArray<ObjectType> * _Nonnull)arrayByAddingObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
		[Export ("arrayByAddingObjectsFromArray:")]
		NSObject[] ArrayByAddingObjectsFromArray (NSObject[] otherArray);

		// -(NSString * _Nonnull)componentsJoinedByString:(NSString * _Nonnull)separator;
		[Export ("componentsJoinedByString:")]
		string ComponentsJoinedByString (string separator);

		// -(BOOL)containsObject:(ObjectType _Nonnull)anObject;
		[Export ("containsObject:")]
		bool ContainsObject (NSObject anObject);

		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
		[Export ("descriptionWithLocale:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale);

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
		[Export ("descriptionWithLocale:indent:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale, nuint level);

		// -(ObjectType _Nullable)firstObjectCommonWithArray:(NSArray<ObjectType> * _Nonnull)otherArray;
		[Export ("firstObjectCommonWithArray:")]
		[return: NullAllowed]
		NSObject FirstObjectCommonWithArray (NSObject[] otherArray);

		// -(void)getObjects:(ObjectType  _Nonnull * _Nonnull)objects range:(NSRange)range __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("getObjects:range:")]
		void GetObjects (NSObject[] objects, NSRange range);

		// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)anObject;
		[Export ("indexOfObject:")]
		nuint IndexOfObject (NSObject anObject);

		// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
		[Export ("indexOfObject:inRange:")]
		nuint IndexOfObject (NSObject anObject, NSRange range);

		// -(NSUInteger)indexOfObjectIdenticalTo:(ObjectType _Nonnull)anObject;
		[Export ("indexOfObjectIdenticalTo:")]
		nuint IndexOfObjectIdenticalTo (NSObject anObject);

		// -(NSUInteger)indexOfObjectIdenticalTo:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
		[Export ("indexOfObjectIdenticalTo:inRange:")]
		nuint IndexOfObjectIdenticalTo (NSObject anObject, NSRange range);

		// -(BOOL)isEqualToArray:(NSArray<ObjectType> * _Nonnull)otherArray;
		[Export ("isEqualToArray:")]
		bool IsEqualToArray (NSObject[] otherArray);

		// @property (readonly, nonatomic) ObjectType _Nullable firstObject __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("firstObject")]
		NSObject FirstObject { get; }

		// @property (readonly, nonatomic) ObjectType _Nullable lastObject;
		[NullAllowed, Export ("lastObject")]
		NSObject LastObject { get; }

		// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
		[Export ("objectEnumerator")]
		NSEnumerator<NSObject> ObjectEnumerator { get; }

		// -(NSEnumerator<ObjectType> * _Nonnull)reverseObjectEnumerator;
		[Export ("reverseObjectEnumerator")]
		NSEnumerator<NSObject> ReverseObjectEnumerator { get; }

		// @property (readonly, copy) NSData * _Nonnull sortedArrayHint;
		[Export ("sortedArrayHint", ArgumentSemantic.Copy)]
		NSData SortedArrayHint { get; }

		// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))comparator context:(void * _Nullable)context;
		[Export ("sortedArrayUsingFunction:context:")]
		unsafe NSObject[] SortedArrayUsingFunction (Func<NSObject, NSObject, void*, nint>* comparator, [NullAllowed] void* context);

		// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))comparator context:(void * _Nullable)context hint:(NSData * _Nullable)hint;
		[Export ("sortedArrayUsingFunction:context:hint:")]
		unsafe NSObject[] SortedArrayUsingFunction (Func<NSObject, NSObject, void*, nint>* comparator, [NullAllowed] void* context, [NullAllowed] NSData hint);

		// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingSelector:(SEL _Nonnull)comparator;
		[Export ("sortedArrayUsingSelector:")]
		NSObject[] SortedArrayUsingSelector (Selector comparator);

		// -(NSArray<ObjectType> * _Nonnull)subarrayWithRange:(NSRange)range;
		[Export ("subarrayWithRange:")]
		NSObject[] SubarrayWithRange (NSRange range);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("writeToURL:error:")]
		bool WriteToURL (NSURL url, [NullAllowed] out NSError error);

		// -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("makeObjectsPerformSelector:")]
		void MakeObjectsPerformSelector (Selector aSelector);

		// -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)argument __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("makeObjectsPerformSelector:withObject:")]
		void MakeObjectsPerformSelector (Selector aSelector, [NullAllowed] NSObject argument);

		// -(NSArray<ObjectType> * _Nonnull)objectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
		[Export ("objectsAtIndexes:")]
		NSObject[] ObjectsAtIndexes (NSIndexSet indexes);

		// -(ObjectType _Nonnull)objectAtIndexedSubscript:(NSUInteger)idx __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("objectAtIndexedSubscript:")]
		NSObject ObjectAtIndexedSubscript (nuint idx);

		// -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateObjectsUsingBlock:")]
		unsafe void EnumerateObjectsUsingBlock (Action<NSObject, nuint, bool*> block);

		// -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateObjectsWithOptions:usingBlock:")]
		unsafe void EnumerateObjectsWithOptions (NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

		// -(void)enumerateObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateObjectsAtIndexes:options:usingBlock:")]
		unsafe void EnumerateObjectsAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

		// -(NSUInteger)indexOfObjectPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexOfObjectPassingTest:")]
		unsafe nuint IndexOfObjectPassingTest (Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexOfObjectWithOptions:passingTest:")]
		unsafe nuint IndexOfObjectWithOptions (NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSUInteger)indexOfObjectAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexOfObjectAtIndexes:options:passingTest:")]
		unsafe nuint IndexOfObjectAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesOfObjectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexesOfObjectsPassingTest:")]
		unsafe NSIndexSet IndexesOfObjectsPassingTest (Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexesOfObjectsWithOptions:passingTest:")]
		unsafe NSIndexSet IndexesOfObjectsWithOptions (NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesOfObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexesOfObjectsAtIndexes:options:passingTest:")]
		unsafe NSIndexSet IndexesOfObjectsAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("sortedArrayUsingComparator:")]
		NSObject[] SortedArrayUsingComparator (NSComparator cmptr);

		// -(NSArray<ObjectType> * _Nonnull)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("sortedArrayWithOptions:usingComparator:")]
		NSObject[] SortedArrayWithOptions (NSSortOptions opts, NSComparator cmptr);

		// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator _Nonnull)cmp __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("indexOfObject:inSortedRange:options:usingComparator:")]
		nuint IndexOfObject (NSObject obj, NSRange r, NSBinarySearchingOptions opts, NSComparator cmp);
	}

	// @interface NSArrayCreation (NSArray)
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSArrayCreation
	{
		// +(instancetype _Nonnull)array;
		[Static]
		[Export ("array")]
		NSArray Array ();

		// +(instancetype _Nonnull)arrayWithObject:(ObjectType _Nonnull)anObject;
		[Static]
		[Export ("arrayWithObject:")]
		NSArray ArrayWithObject (NSObject anObject);

		// +(instancetype _Nonnull)arrayWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
		[Static]
		[Export ("arrayWithObjects:count:")]
		NSArray ArrayWithObjects (NSObject[] objects, nuint cnt);

		// +(instancetype _Nonnull)arrayWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
		[Static, Internal]
		[Export ("arrayWithObjects:", IsVariadic = true)]
		NSArray ArrayWithObjects (NSObject firstObj, IntPtr varArgs);

		// +(instancetype _Nonnull)arrayWithArray:(NSArray<ObjectType> * _Nonnull)array;
		[Static]
		[Export ("arrayWithArray:")]
		NSArray ArrayWithArray (NSObject[] array);

		// -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
		[Internal]
		[Export ("initWithObjects:", IsVariadic = true)]
		NativeHandle Constructor (NSObject firstObj, IntPtr varArgs);

		// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
		[Export ("initWithArray:")]
		NativeHandle Constructor (NSObject[] array);

		// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array copyItems:(BOOL)flag;
		[Export ("initWithArray:copyItems:")]
		NativeHandle Constructor (NSObject[] array, bool flag);

		// -(NSArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("initWithContentsOfURL:error:")]
		NativeHandle Constructor (NSURL url, [NullAllowed] out NSError error);

		// +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Static]
		[Export ("arrayWithContentsOfURL:error:")]
		[return: NullAllowed]
		NSObject[] ArrayWithContentsOfURL (NSURL url, [NullAllowed] out NSError error);
	}

	// @interface NSArrayDiffing (NSArray)
	[Unavailable (PlatformName.Swift)]
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSArrayDiffing
	{
		// -(NSOrderedCollectionDifference<ObjectType> * _Nonnull)differenceFromArray:(NSArray<ObjectType> * _Nonnull)other withOptions:(NSOrderedCollectionDifferenceCalculationOptions)options usingEquivalenceTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull))block;
		[Export ("differenceFromArray:withOptions:usingEquivalenceTest:")]
		NSOrderedCollectionDifference<NSObject> DifferenceFromArray (NSObject[] other, NSOrderedCollectionDifferenceCalculationOptions options, Func<NSObject, NSObject, bool> block);

		// -(NSOrderedCollectionDifference<ObjectType> * _Nonnull)differenceFromArray:(NSArray<ObjectType> * _Nonnull)other withOptions:(NSOrderedCollectionDifferenceCalculationOptions)options;
		[Export ("differenceFromArray:withOptions:")]
		NSOrderedCollectionDifference<NSObject> DifferenceFromArray (NSObject[] other, NSOrderedCollectionDifferenceCalculationOptions options);

		// -(NSOrderedCollectionDifference<ObjectType> * _Nonnull)differenceFromArray:(NSArray<ObjectType> * _Nonnull)other;
		[Export ("differenceFromArray:")]
		NSOrderedCollectionDifference<NSObject> DifferenceFromArray (NSObject[] other);

		// -(NSArray<ObjectType> * _Nullable)arrayByApplyingDifference:(NSOrderedCollectionDifference<ObjectType> * _Nonnull)difference;
		[Export ("arrayByApplyingDifference:")]
		[return: NullAllowed]
		NSObject[] ArrayByApplyingDifference (NSOrderedCollectionDifference<NSObject> difference);
	}

	// @interface NSDeprecated (NSArray)
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSDeprecated
	{
		// -(void)getObjects:(ObjectType  _Nonnull * _Nonnull)objects __attribute__((availability(swift, unavailable))) __attribute__((availability(macos, introduced=10.0, deprecated=10.13))) __attribute__((availability(ios, introduced=2.0, deprecated=11.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=4.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=11.0)));
		[Unavailable (PlatformName.Swift)]
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getObjects:range: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "Use -getObjects:range: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -getObjects:range: instead")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "Use -getObjects:range: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getObjects:range: instead")]
		[Deprecated (PlatformName.WatchOS, 4, 0, message: "Use -getObjects:range: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getObjects:range: instead")]
		[Deprecated (PlatformName.TvOS, 11, 0, message: "Use -getObjects:range: instead")]
		[Export ("getObjects:")]
		void GetObjects (NSObject[] objects);

		// +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Static]
		[Export ("arrayWithContentsOfFile:")]
		[return: NullAllowed]
		NSObject[] ArrayWithContentsOfFile (string path);

		// +(NSArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Static]
		[Export ("arrayWithContentsOfURL:")]
		[return: NullAllowed]
		NSObject[] ArrayWithContentsOfURL (NSURL url);

		// -(NSArray<ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("initWithContentsOfFile:")]
		NativeHandle Constructor (string path);

		// -(NSArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("initWithContentsOfURL:")]
		NativeHandle Constructor (NSURL url);

		// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("writeToFile:atomically:")]
		bool WriteToFile (string path, bool useAuxiliaryFile);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("writeToURL:atomically:")]
		bool WriteToURL (NSURL url, bool atomically);
	}

	// audit-objc-generics: @interface NSMutableArray<ObjectType> : NSArray
	[BaseType (typeof(NSArray))]
	interface NSMutableArray
	{
		// -(void)addObject:(ObjectType _Nonnull)anObject;
		[Export ("addObject:")]
		void AddObject (NSObject anObject);

		// -(void)insertObject:(ObjectType _Nonnull)anObject atIndex:(NSUInteger)index;
		[Export ("insertObject:atIndex:")]
		void InsertObject (NSObject anObject, nuint index);

		// -(void)removeLastObject;
		[Export ("removeLastObject")]
		void RemoveLastObject ();

		// -(void)removeObjectAtIndex:(NSUInteger)index;
		[Export ("removeObjectAtIndex:")]
		void RemoveObjectAtIndex (nuint index);

		// -(void)replaceObjectAtIndex:(NSUInteger)index withObject:(ObjectType _Nonnull)anObject;
		[Export ("replaceObjectAtIndex:withObject:")]
		void ReplaceObjectAtIndex (nuint index, NSObject anObject);

		// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
		[Export ("initWithCapacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nuint numItems);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSExtendedMutableArray (NSMutableArray)
	[Category]
	[BaseType (typeof(NSMutableArray))]
	interface NSMutableArray_NSExtendedMutableArray
	{
		// -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
		[Export ("addObjectsFromArray:")]
		void AddObjectsFromArray (NSObject[] otherArray);

		// -(void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2;
		[Export ("exchangeObjectAtIndex:withObjectAtIndex:")]
		void ExchangeObjectAtIndex (nuint idx1, nuint idx2);

		// -(void)removeAllObjects;
		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		// -(void)removeObject:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
		[Export ("removeObject:inRange:")]
		void RemoveObject (NSObject anObject, NSRange range);

		// -(void)removeObject:(ObjectType _Nonnull)anObject;
		[Export ("removeObject:")]
		void RemoveObject (NSObject anObject);

		// -(void)removeObjectIdenticalTo:(ObjectType _Nonnull)anObject inRange:(NSRange)range;
		[Export ("removeObjectIdenticalTo:inRange:")]
		void RemoveObjectIdenticalTo (NSObject anObject, NSRange range);

		// -(void)removeObjectIdenticalTo:(ObjectType _Nonnull)anObject;
		[Export ("removeObjectIdenticalTo:")]
		void RemoveObjectIdenticalTo (NSObject anObject);

		// -(void)removeObjectsFromIndices:(NSUInteger * _Nonnull)indices numIndices:(NSUInteger)cnt __attribute__((availability(macos, introduced=10.0, deprecated=10.6))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 6, message: "Not supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 4, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Export ("removeObjectsFromIndices:numIndices:")]
		unsafe void RemoveObjectsFromIndices (nuint* indices, nuint cnt);

		// -(void)removeObjectsInArray:(NSArray<ObjectType> * _Nonnull)otherArray;
		[Export ("removeObjectsInArray:")]
		void RemoveObjectsInArray (NSObject[] otherArray);

		// -(void)removeObjectsInRange:(NSRange)range;
		[Export ("removeObjectsInRange:")]
		void RemoveObjectsInRange (NSRange range);

		// -(void)replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray range:(NSRange)otherRange;
		[Export ("replaceObjectsInRange:withObjectsFromArray:range:")]
		void ReplaceObjectsInRange (NSRange range, NSObject[] otherArray, NSRange otherRange);

		// -(void)replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray<ObjectType> * _Nonnull)otherArray;
		[Export ("replaceObjectsInRange:withObjectsFromArray:")]
		void ReplaceObjectsInRange (NSRange range, NSObject[] otherArray);

		// -(void)setArray:(NSArray<ObjectType> * _Nonnull)otherArray;
		[Export ("setArray:")]
		void SetArray (NSObject[] otherArray);

		// -(void)sortUsingFunction:(NSInteger (* _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull, void * _Nullable))compare context:(void * _Nullable)context;
		[Export ("sortUsingFunction:context:")]
		unsafe void SortUsingFunction (Func<NSObject, NSObject, void*, nint>* compare, [NullAllowed] void* context);

		// -(void)sortUsingSelector:(SEL _Nonnull)comparator;
		[Export ("sortUsingSelector:")]
		void SortUsingSelector (Selector comparator);

		// -(void)insertObjects:(NSArray<ObjectType> * _Nonnull)objects atIndexes:(NSIndexSet * _Nonnull)indexes;
		[Export ("insertObjects:atIndexes:")]
		void InsertObjects (NSObject[] objects, NSIndexSet indexes);

		// -(void)removeObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
		[Export ("removeObjectsAtIndexes:")]
		void RemoveObjectsAtIndexes (NSIndexSet indexes);

		// -(void)replaceObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes withObjects:(NSArray<ObjectType> * _Nonnull)objects;
		[Export ("replaceObjectsAtIndexes:withObjects:")]
		void ReplaceObjectsAtIndexes (NSIndexSet indexes, NSObject[] objects);

		// -(void)setObject:(ObjectType _Nonnull)obj atIndexedSubscript:(NSUInteger)idx __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("setObject:atIndexedSubscript:")]
		void SetObject (NSObject obj, nuint idx);

		// -(void)sortUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("sortUsingComparator:")]
		void SortUsingComparator (NSComparator cmptr);

		// -(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("sortWithOptions:usingComparator:")]
		void SortWithOptions (NSSortOptions opts, NSComparator cmptr);
	}

	// @interface NSMutableArrayCreation (NSMutableArray)
	[Category]
	[BaseType (typeof(NSMutableArray))]
	interface NSMutableArray_NSMutableArrayCreation
	{
		// +(instancetype _Nonnull)arrayWithCapacity:(NSUInteger)numItems;
		[Static]
		[Export ("arrayWithCapacity:")]
		NSMutableArray ArrayWithCapacity (nuint numItems);

		// +(NSMutableArray<ObjectType> * _Nullable)arrayWithContentsOfFile:(NSString * _Nonnull)path;
		[Static]
		[Export ("arrayWithContentsOfFile:")]
		[return: NullAllowed]
		NSMutableArray<NSObject> ArrayWithContentsOfFile (string path);

		// +(NSMutableArray<ObjectType> * _Nullable)arrayWithContentsOfURL:(NSURL * _Nonnull)url;
		[Static]
		[Export ("arrayWithContentsOfURL:")]
		[return: NullAllowed]
		NSMutableArray<NSObject> ArrayWithContentsOfURL (NSURL url);

		// -(NSMutableArray<ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
		[Export ("initWithContentsOfFile:")]
		NativeHandle Constructor (string path);

		// -(NSMutableArray<ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
		[Export ("initWithContentsOfURL:")]
		NativeHandle Constructor (NSURL url);
	}

	// @interface NSMutableArrayDiffing (NSMutableArray)
	[Unavailable (PlatformName.Swift)]
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Category]
	[BaseType (typeof(NSMutableArray))]
	interface NSMutableArray_NSMutableArrayDiffing
	{
		// -(void)applyDifference:(NSOrderedCollectionDifference<ObjectType> * _Nonnull)difference;
		[Export ("applyDifference:")]
		void ApplyDifference (NSOrderedCollectionDifference<NSObject> difference);
	}

	// @interface NSAutoreleasePool : NSObject
	[BaseType (typeof(NSObject))]
	interface NSAutoreleasePool
	{
		// +(void)addObject:(id _Nonnull)anObject;
		[Static]
		[Export ("addObject:")]
		void AddObject (NSObject anObject);

		// -(void)addObject:(id _Nonnull)anObject;
		[Export ("addObject:")]
		void AddObject (NSObject anObject);

		// -(void)drain;
		[Export ("drain")]
		void Drain ();
	}

	// @protocol NSItemProviderWriting <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	[Protocol]
	[BaseType (typeof(NSObject))]
	interface NSItemProviderWriting
	{
		// @required @property (readonly, copy, nonatomic, class) NSArray<NSString *> * _Nonnull writableTypeIdentifiersForItemProvider;
		[Static, Abstract]
		[Export ("writableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
		string[] WritableTypeIdentifiersForItemProvider { get; }

		// @optional @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull writableTypeIdentifiersForItemProvider;
		[Export ("writableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
		string[] WritableTypeIdentifiersForItemProvider { get; }

		// @optional +(NSItemProviderRepresentationVisibility)itemProviderVisibilityForRepresentationWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
		[Static]
		[Export ("itemProviderVisibilityForRepresentationWithTypeIdentifier:")]
		NSItemProviderRepresentationVisibility ItemProviderVisibilityForRepresentationWithTypeIdentifier (string typeIdentifier);

		// @optional -(NSItemProviderRepresentationVisibility)itemProviderVisibilityForRepresentationWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
		[Export ("itemProviderVisibilityForRepresentationWithTypeIdentifier:")]
		NSItemProviderRepresentationVisibility ItemProviderVisibilityForRepresentationWithTypeIdentifier (string typeIdentifier);

		// @required -(NSProgress * _Nullable)loadDataWithTypeIdentifier:(NSString * _Nonnull)typeIdentifier forItemProviderCompletionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
		[Abstract]
		[Export ("loadDataWithTypeIdentifier:forItemProviderCompletionHandler:")]
		[return: NullAllowed]
		NSProgress LoadDataWithTypeIdentifier (string typeIdentifier, Action<NSData, NSError> completionHandler);
	}

	// @protocol NSItemProviderReading <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
	[Protocol]
	[BaseType (typeof(NSObject))]
	interface NSItemProviderReading
	{
		// @required @property (readonly, copy, nonatomic, class) NSArray<NSString *> * _Nonnull readableTypeIdentifiersForItemProvider;
		[Static, Abstract]
		[Export ("readableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
		string[] ReadableTypeIdentifiersForItemProvider { get; }

		// @required +(instancetype _Nullable)objectWithItemProviderData:(NSData * _Nonnull)data typeIdentifier:(NSString * _Nonnull)typeIdentifier error:(NSError * _Nullable * _Nullable)outError;
		[Static, Abstract]
		[Export ("objectWithItemProviderData:typeIdentifier:error:")]
		[return: NullAllowed]
		NSItemProviderReading TypeIdentifier (NSData data, string typeIdentifier, [NullAllowed] out NSError outError);
	}

	// typedef void (^NSItemProviderCompletionHandler)(__kindof id<NSSecureCoding> _Nullable, NSError * _Null_unspecified);
	delegate void NSItemProviderCompletionHandler ([NullAllowed] NSSecureCoding arg0, NSError arg1);

	// typedef void (^NSItemProviderLoadHandler)(NSItemProviderCompletionHandler _Null_unspecified, Class _Null_unspecified, NSDictionary * _Null_unspecified);
	delegate void NSItemProviderLoadHandler (NSItemProviderCompletionHandler arg0, Class arg1, NSDictionary arg2);

	// @interface NSItemProvider : NSObject <NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSObject))]
	interface NSItemProvider : INSCopying
	{
		// -(void)registerDataRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable)))loadHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("registerDataRepresentationForTypeIdentifier:visibility:loadHandler:")]
		void RegisterDataRepresentationForTypeIdentifier (string typeIdentifier, NSItemProviderRepresentationVisibility visibility, Func<Action<NSData, NSError>, NSProgress> loadHandler);

		// -(void)registerFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier fileOptions:(NSItemProviderFileOptions)fileOptions visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(NSURL * _Nullable, BOOL, NSError * _Nullable)))loadHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:")]
		void RegisterFileRepresentationForTypeIdentifier (string typeIdentifier, NSItemProviderFileOptions fileOptions, NSItemProviderRepresentationVisibility visibility, Func<Action<NSURL, bool, NSError>, NSProgress> loadHandler);

		// @property (readonly, copy, atomic) NSArray<NSString *> * _Nonnull registeredTypeIdentifiers;
		[Export ("registeredTypeIdentifiers", ArgumentSemantic.Copy)]
		string[] RegisteredTypeIdentifiers { get; }

		// -(NSArray<NSString *> * _Nonnull)registeredTypeIdentifiersWithFileOptions:(NSItemProviderFileOptions)fileOptions __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("registeredTypeIdentifiersWithFileOptions:")]
		string[] RegisteredTypeIdentifiersWithFileOptions (NSItemProviderFileOptions fileOptions);

		// -(BOOL)hasItemConformingToTypeIdentifier:(NSString * _Nonnull)typeIdentifier;
		[Export ("hasItemConformingToTypeIdentifier:")]
		bool HasItemConformingToTypeIdentifier (string typeIdentifier);

		// -(BOOL)hasRepresentationConformingToTypeIdentifier:(NSString * _Nonnull)typeIdentifier fileOptions:(NSItemProviderFileOptions)fileOptions __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("hasRepresentationConformingToTypeIdentifier:fileOptions:")]
		bool HasRepresentationConformingToTypeIdentifier (string typeIdentifier, NSItemProviderFileOptions fileOptions);

		// -(NSProgress * _Nonnull)loadDataRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("loadDataRepresentationForTypeIdentifier:completionHandler:")]
		NSProgress LoadDataRepresentationForTypeIdentifier (string typeIdentifier, Action<NSData, NSError> completionHandler);

		// -(NSProgress * _Nonnull)loadFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("loadFileRepresentationForTypeIdentifier:completionHandler:")]
		NSProgress LoadFileRepresentationForTypeIdentifier (string typeIdentifier, Action<NSURL, NSError> completionHandler);

		// -(NSProgress * _Nonnull)loadInPlaceFileRepresentationForTypeIdentifier:(NSString * _Nonnull)typeIdentifier completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, BOOL, NSError * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:")]
		NSProgress LoadInPlaceFileRepresentationForTypeIdentifier (string typeIdentifier, Action<NSURL, bool, NSError> completionHandler);

		// @property (copy, atomic) NSString * _Nullable suggestedName __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 14), iOS (11, 0)]
		[NullAllowed, Export ("suggestedName")]
		string SuggestedName { get; set; }

		// -(instancetype _Nonnull)initWithObject:(id<NSItemProviderWriting> _Nonnull)object __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("initWithObject:")]
		NativeHandle Constructor (NSItemProviderWriting @object);

		// -(void)registerObject:(id<NSItemProviderWriting> _Nonnull)object visibility:(NSItemProviderRepresentationVisibility)visibility __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("registerObject:visibility:")]
		void RegisterObject (NSItemProviderWriting @object, NSItemProviderRepresentationVisibility visibility);

		// -(void)registerObjectOfClass:(Class<NSItemProviderWriting> _Nonnull)aClass visibility:(NSItemProviderRepresentationVisibility)visibility loadHandler:(NSProgress * _Nullable (^ _Nonnull)(void (^ _Nonnull)(__kindof id<NSItemProviderWriting> _Nullable, NSError * _Nullable)))loadHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("registerObjectOfClass:visibility:loadHandler:")]
		void RegisterObjectOfClass (NSItemProviderWriting aClass, NSItemProviderRepresentationVisibility visibility, Func<Action<NSItemProviderWriting, NSError>, NSProgress> loadHandler);

		// -(BOOL)canLoadObjectOfClass:(Class<NSItemProviderReading> _Nonnull)aClass __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("canLoadObjectOfClass:")]
		bool CanLoadObjectOfClass (NSItemProviderReading aClass);

		// -(NSProgress * _Nonnull)loadObjectOfClass:(Class<NSItemProviderReading> _Nonnull)aClass completionHandler:(void (^ _Nonnull)(__kindof id<NSItemProviderReading> _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("loadObjectOfClass:completionHandler:")]
		NSProgress LoadObjectOfClass (NSItemProviderReading aClass, Action<NSItemProviderReading, NSError> completionHandler);

		// -(instancetype _Nonnull)initWithItem:(id<NSSecureCoding> _Nullable)item typeIdentifier:(NSString * _Nullable)typeIdentifier __attribute__((objc_designated_initializer));
		[Export ("initWithItem:typeIdentifier:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] NSSecureCoding item, [NullAllowed] string typeIdentifier);

		// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Null_unspecified)fileURL;
		[Export ("initWithContentsOfURL:")]
		NativeHandle Constructor (NSURL fileURL);

		// -(void)registerItemForTypeIdentifier:(NSString * _Nonnull)typeIdentifier loadHandler:(NSItemProviderLoadHandler _Nonnull)loadHandler;
		[Export ("registerItemForTypeIdentifier:loadHandler:")]
		void RegisterItemForTypeIdentifier (string typeIdentifier, NSItemProviderLoadHandler loadHandler);

		// -(void)loadItemForTypeIdentifier:(NSString * _Nonnull)typeIdentifier options:(NSDictionary * _Nullable)options completionHandler:(NSItemProviderCompletionHandler _Nullable)completionHandler;
		[Export ("loadItemForTypeIdentifier:options:completionHandler:")]
		void LoadItemForTypeIdentifier (string typeIdentifier, [NullAllowed] NSDictionary options, [NullAllowed] NSItemProviderCompletionHandler completionHandler);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSItemProviderPreferredImageSizeKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSItemProviderPreferredImageSizeKey", "__Internal")]
		NSString NSItemProviderPreferredImageSizeKey { get; }
	}

	// @interface NSPreviewSupport (NSItemProvider)
	[Category]
	[BaseType (typeof(NSItemProvider))]
	interface NSItemProvider_NSPreviewSupport
	{
		// @property (copy, atomic) NSItemProviderLoadHandler _Nullable previewImageHandler __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[NullAllowed, Export ("previewImageHandler", ArgumentSemantic.Copy)]
		NSItemProviderLoadHandler PreviewImageHandler { get; set; }

		// -(void)loadPreviewImageWithOptions:(NSDictionary * _Null_unspecified)options completionHandler:(NSItemProviderCompletionHandler _Null_unspecified)completionHandler __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("loadPreviewImageWithOptions:completionHandler:")]
		void LoadPreviewImageWithOptions (NSDictionary options, NSItemProviderCompletionHandler completionHandler);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Null_unspecified NSExtensionJavaScriptPreprocessingResultsKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSExtensionJavaScriptPreprocessingResultsKey", "__Internal")]
		NSString NSExtensionJavaScriptPreprocessingResultsKey { get; }

		// extern API_UNAVAILABLE(macos) NSString *const NSExtensionJavaScriptFinalizeArgumentKey __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (8, 0)]
		[Field ("NSExtensionJavaScriptFinalizeArgumentKey", "__Internal")]
		NSString NSExtensionJavaScriptFinalizeArgumentKey { get; }

		// extern NSString *const _Nonnull NSItemProviderErrorDomain __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSItemProviderErrorDomain", "__Internal")]
		NSString NSItemProviderErrorDomain { get; }
	}

	// @interface NSString : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSString : INSCopying, INSMutableCopying, INSSecureCoding
	{
		// @property (readonly) NSUInteger length;
		[Export ("length")]
		nuint Length { get; }

		// -(unichar)characterAtIndex:(NSUInteger)index;
		[Export ("characterAtIndex:")]
		ushort CharacterAtIndex (nuint index);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSStringExtensionMethods (NSString)
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSStringExtensionMethods
	{
		// -(NSString * _Nonnull)substringFromIndex:(NSUInteger)from;
		[Export ("substringFromIndex:")]
		string SubstringFromIndex (nuint from);

		// -(NSString * _Nonnull)substringToIndex:(NSUInteger)to;
		[Export ("substringToIndex:")]
		string SubstringToIndex (nuint to);

		// -(NSString * _Nonnull)substringWithRange:(NSRange)range;
		[Export ("substringWithRange:")]
		string SubstringWithRange (NSRange range);

		// -(void)getCharacters:(unichar * _Nonnull)buffer range:(NSRange)range;
		[Export ("getCharacters:range:")]
		unsafe void GetCharacters (ushort* buffer, NSRange range);

		// -(NSComparisonResult)compare:(NSString * _Nonnull)string;
		[Export ("compare:")]
		NSComparisonResult Compare (string @string);

		// -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask;
		[Export ("compare:options:")]
		NSComparisonResult Compare (string @string, NSStringCompareOptions mask);

		// -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToCompare;
		[Export ("compare:options:range:")]
		NSComparisonResult Compare (string @string, NSStringCompareOptions mask, NSRange rangeOfReceiverToCompare);

		// -(NSComparisonResult)compare:(NSString * _Nonnull)string options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToCompare locale:(id _Nullable)locale;
		[Export ("compare:options:range:locale:")]
		NSComparisonResult Compare (string @string, NSStringCompareOptions mask, NSRange rangeOfReceiverToCompare, [NullAllowed] NSObject locale);

		// -(NSComparisonResult)caseInsensitiveCompare:(NSString * _Nonnull)string;
		[Export ("caseInsensitiveCompare:")]
		NSComparisonResult CaseInsensitiveCompare (string @string);

		// -(NSComparisonResult)localizedCompare:(NSString * _Nonnull)string;
		[Export ("localizedCompare:")]
		NSComparisonResult LocalizedCompare (string @string);

		// -(NSComparisonResult)localizedCaseInsensitiveCompare:(NSString * _Nonnull)string;
		[Export ("localizedCaseInsensitiveCompare:")]
		NSComparisonResult LocalizedCaseInsensitiveCompare (string @string);

		// -(NSComparisonResult)localizedStandardCompare:(NSString * _Nonnull)string __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("localizedStandardCompare:")]
		NSComparisonResult LocalizedStandardCompare (string @string);

		// -(BOOL)isEqualToString:(NSString * _Nonnull)aString;
		[Export ("isEqualToString:")]
		bool IsEqualToString (string aString);

		// -(BOOL)hasPrefix:(NSString * _Nonnull)str;
		[Export ("hasPrefix:")]
		bool HasPrefix (string str);

		// -(BOOL)hasSuffix:(NSString * _Nonnull)str;
		[Export ("hasSuffix:")]
		bool HasSuffix (string str);

		// -(NSString * _Nonnull)commonPrefixWithString:(NSString * _Nonnull)str options:(NSStringCompareOptions)mask;
		[Export ("commonPrefixWithString:options:")]
		string CommonPrefixWithString (string str, NSStringCompareOptions mask);

		// -(BOOL)containsString:(NSString * _Nonnull)str __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("containsString:")]
		bool ContainsString (string str);

		// -(BOOL)localizedCaseInsensitiveContainsString:(NSString * _Nonnull)str __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("localizedCaseInsensitiveContainsString:")]
		bool LocalizedCaseInsensitiveContainsString (string str);

		// -(BOOL)localizedStandardContainsString:(NSString * _Nonnull)str __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("localizedStandardContainsString:")]
		bool LocalizedStandardContainsString (string str);

		// -(NSRange)localizedStandardRangeOfString:(NSString * _Nonnull)str __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("localizedStandardRangeOfString:")]
		NSRange LocalizedStandardRangeOfString (string str);

		// -(NSRange)rangeOfString:(NSString * _Nonnull)searchString;
		[Export ("rangeOfString:")]
		NSRange RangeOfString (string searchString);

		// -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask;
		[Export ("rangeOfString:options:")]
		NSRange RangeOfString (string searchString, NSStringCompareOptions mask);

		// -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch;
		[Export ("rangeOfString:options:range:")]
		NSRange RangeOfString (string searchString, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch);

		// -(NSRange)rangeOfString:(NSString * _Nonnull)searchString options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch locale:(NSLocale * _Nullable)locale __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("rangeOfString:options:range:locale:")]
		NSRange RangeOfString (string searchString, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch, [NullAllowed] NSLocale locale);

		// -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet;
		[Export ("rangeOfCharacterFromSet:")]
		NSRange RangeOfCharacterFromSet (NSCharacterSet searchSet);

		// -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet options:(NSStringCompareOptions)mask;
		[Export ("rangeOfCharacterFromSet:options:")]
		NSRange RangeOfCharacterFromSet (NSCharacterSet searchSet, NSStringCompareOptions mask);

		// -(NSRange)rangeOfCharacterFromSet:(NSCharacterSet * _Nonnull)searchSet options:(NSStringCompareOptions)mask range:(NSRange)rangeOfReceiverToSearch;
		[Export ("rangeOfCharacterFromSet:options:range:")]
		NSRange RangeOfCharacterFromSet (NSCharacterSet searchSet, NSStringCompareOptions mask, NSRange rangeOfReceiverToSearch);

		// -(NSRange)rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)index;
		[Export ("rangeOfComposedCharacterSequenceAtIndex:")]
		NSRange RangeOfComposedCharacterSequenceAtIndex (nuint index);

		// -(NSRange)rangeOfComposedCharacterSequencesForRange:(NSRange)range __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("rangeOfComposedCharacterSequencesForRange:")]
		NSRange RangeOfComposedCharacterSequencesForRange (NSRange range);

		// -(NSString * _Nonnull)stringByAppendingString:(NSString * _Nonnull)aString;
		[Export ("stringByAppendingString:")]
		string StringByAppendingString (string aString);

		// -(NSString * _Nonnull)stringByAppendingFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
		[Internal]
		[Export ("stringByAppendingFormat:", IsVariadic = true)]
		string StringByAppendingFormat (string format, IntPtr varArgs);

		// @property (readonly) double doubleValue;
		[Export ("doubleValue")]
		double DoubleValue { get; }

		// @property (readonly) float floatValue;
		[Export ("floatValue")]
		float FloatValue { get; }

		// @property (readonly) int intValue;
		[Export ("intValue")]
		int IntValue { get; }

		// @property (readonly) NSInteger integerValue __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("integerValue")]
		nint IntegerValue { get; }

		// @property (readonly) long long longLongValue __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("longLongValue")]
		long LongLongValue { get; }

		// @property (readonly) BOOL boolValue __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("boolValue")]
		bool BoolValue { get; }

		// @property (readonly, copy) NSString * _Nonnull uppercaseString;
		[Export ("uppercaseString")]
		string UppercaseString { get; }

		// @property (readonly, copy) NSString * _Nonnull lowercaseString;
		[Export ("lowercaseString")]
		string LowercaseString { get; }

		// @property (readonly, copy) NSString * _Nonnull capitalizedString;
		[Export ("capitalizedString")]
		string CapitalizedString { get; }

		// @property (readonly, copy) NSString * _Nonnull localizedUppercaseString __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("localizedUppercaseString")]
		string LocalizedUppercaseString { get; }

		// @property (readonly, copy) NSString * _Nonnull localizedLowercaseString __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("localizedLowercaseString")]
		string LocalizedLowercaseString { get; }

		// @property (readonly, copy) NSString * _Nonnull localizedCapitalizedString __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("localizedCapitalizedString")]
		string LocalizedCapitalizedString { get; }

		// -(NSString * _Nonnull)uppercaseStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("uppercaseStringWithLocale:")]
		string UppercaseStringWithLocale ([NullAllowed] NSLocale locale);

		// -(NSString * _Nonnull)lowercaseStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("lowercaseStringWithLocale:")]
		string LowercaseStringWithLocale ([NullAllowed] NSLocale locale);

		// -(NSString * _Nonnull)capitalizedStringWithLocale:(NSLocale * _Nullable)locale __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("capitalizedStringWithLocale:")]
		string CapitalizedStringWithLocale ([NullAllowed] NSLocale locale);

		// -(void)getLineStart:(NSUInteger * _Nullable)startPtr end:(NSUInteger * _Nullable)lineEndPtr contentsEnd:(NSUInteger * _Nullable)contentsEndPtr forRange:(NSRange)range;
		[Export ("getLineStart:end:contentsEnd:forRange:")]
		unsafe void GetLineStart ([NullAllowed] nuint* startPtr, [NullAllowed] nuint* lineEndPtr, [NullAllowed] nuint* contentsEndPtr, NSRange range);

		// -(NSRange)lineRangeForRange:(NSRange)range;
		[Export ("lineRangeForRange:")]
		NSRange LineRangeForRange (NSRange range);

		// -(void)getParagraphStart:(NSUInteger * _Nullable)startPtr end:(NSUInteger * _Nullable)parEndPtr contentsEnd:(NSUInteger * _Nullable)contentsEndPtr forRange:(NSRange)range;
		[Export ("getParagraphStart:end:contentsEnd:forRange:")]
		unsafe void GetParagraphStart ([NullAllowed] nuint* startPtr, [NullAllowed] nuint* parEndPtr, [NullAllowed] nuint* contentsEndPtr, NSRange range);

		// -(NSRange)paragraphRangeForRange:(NSRange)range;
		[Export ("paragraphRangeForRange:")]
		NSRange ParagraphRangeForRange (NSRange range);

		// -(void)enumerateSubstringsInRange:(NSRange)range options:(NSStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSString * _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateSubstringsInRange:options:usingBlock:")]
		unsafe void EnumerateSubstringsInRange (NSRange range, NSStringEnumerationOptions opts, Action<NSString, NSRange, NSRange, bool*> block);

		// -(void)enumerateLinesUsingBlock:(void (^ _Nonnull)(NSString * _Nonnull, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateLinesUsingBlock:")]
		unsafe void EnumerateLinesUsingBlock (Action<NSString, bool*> block);

		// @property (readonly) NS_RETURNS_INNER_POINTER const char * UTF8String __attribute__((objc_returns_inner_pointer));
		[Export ("UTF8String")]
		unsafe sbyte* UTF8String { get; }

		// @property (readonly) NSStringEncoding fastestEncoding;
		[Export ("fastestEncoding")]
		nuint FastestEncoding { get; }

		// @property (readonly) NSStringEncoding smallestEncoding;
		[Export ("smallestEncoding")]
		nuint SmallestEncoding { get; }

		// -(NSData * _Nullable)dataUsingEncoding:(NSStringEncoding)encoding allowLossyConversion:(BOOL)lossy;
		[Export ("dataUsingEncoding:allowLossyConversion:")]
		[return: NullAllowed]
		NSData DataUsingEncoding (nuint encoding, bool lossy);

		// -(NSData * _Nullable)dataUsingEncoding:(NSStringEncoding)encoding;
		[Export ("dataUsingEncoding:")]
		[return: NullAllowed]
		NSData DataUsingEncoding (nuint encoding);

		// -(BOOL)canBeConvertedToEncoding:(NSStringEncoding)encoding;
		[Export ("canBeConvertedToEncoding:")]
		bool CanBeConvertedToEncoding (nuint encoding);

		// -(const char * _Nullable)cStringUsingEncoding:(NSStringEncoding)encoding __attribute__((objc_returns_inner_pointer));
		[Export ("cStringUsingEncoding:")]
		[return: NullAllowed]
		unsafe sbyte* CStringUsingEncoding (nuint encoding);

		// -(BOOL)getCString:(char * _Nonnull)buffer maxLength:(NSUInteger)maxBufferCount encoding:(NSStringEncoding)encoding;
		[Export ("getCString:maxLength:encoding:")]
		unsafe bool GetCString (sbyte* buffer, nuint maxBufferCount, nuint encoding);

		// -(BOOL)getBytes:(void * _Nullable)buffer maxLength:(NSUInteger)maxBufferCount usedLength:(NSUInteger * _Nullable)usedBufferCount encoding:(NSStringEncoding)encoding options:(NSStringEncodingConversionOptions)options range:(NSRange)range remainingRange:(NSRangePointer _Nullable)leftover;
		[Export ("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:")]
		unsafe bool GetBytes ([NullAllowed] void* buffer, nuint maxBufferCount, [NullAllowed] nuint* usedBufferCount, nuint encoding, NSStringEncodingConversionOptions options, NSRange range, [NullAllowed] NSRangePointer* leftover);

		// -(NSUInteger)maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc;
		[Export ("maximumLengthOfBytesUsingEncoding:")]
		nuint MaximumLengthOfBytesUsingEncoding (nuint enc);

		// -(NSUInteger)lengthOfBytesUsingEncoding:(NSStringEncoding)enc;
		[Export ("lengthOfBytesUsingEncoding:")]
		nuint LengthOfBytesUsingEncoding (nuint enc);

		// @property (readonly, class) const NSStringEncoding * _Nonnull availableStringEncodings;
		[Static]
		[Export ("availableStringEncodings")]
		unsafe nuint* AvailableStringEncodings { get; }

		// +(NSString * _Nonnull)localizedNameOfStringEncoding:(NSStringEncoding)encoding;
		[Static]
		[Export ("localizedNameOfStringEncoding:")]
		string LocalizedNameOfStringEncoding (nuint encoding);

		// @property (readonly, class) NSStringEncoding defaultCStringEncoding;
		[Static]
		[Export ("defaultCStringEncoding")]
		nuint DefaultCStringEncoding { get; }

		// @property (readonly, copy) NSString * _Nonnull decomposedStringWithCanonicalMapping;
		[Export ("decomposedStringWithCanonicalMapping")]
		string DecomposedStringWithCanonicalMapping { get; }

		// @property (readonly, copy) NSString * _Nonnull precomposedStringWithCanonicalMapping;
		[Export ("precomposedStringWithCanonicalMapping")]
		string PrecomposedStringWithCanonicalMapping { get; }

		// @property (readonly, copy) NSString * _Nonnull decomposedStringWithCompatibilityMapping;
		[Export ("decomposedStringWithCompatibilityMapping")]
		string DecomposedStringWithCompatibilityMapping { get; }

		// @property (readonly, copy) NSString * _Nonnull precomposedStringWithCompatibilityMapping;
		[Export ("precomposedStringWithCompatibilityMapping")]
		string PrecomposedStringWithCompatibilityMapping { get; }

		// -(NSArray<NSString *> * _Nonnull)componentsSeparatedByString:(NSString * _Nonnull)separator;
		[Export ("componentsSeparatedByString:")]
		string[] ComponentsSeparatedByString (string separator);

		// -(NSArray<NSString *> * _Nonnull)componentsSeparatedByCharactersInSet:(NSCharacterSet * _Nonnull)separator __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("componentsSeparatedByCharactersInSet:")]
		string[] ComponentsSeparatedByCharactersInSet (NSCharacterSet separator);

		// -(NSString * _Nonnull)stringByTrimmingCharactersInSet:(NSCharacterSet * _Nonnull)set;
		[Export ("stringByTrimmingCharactersInSet:")]
		string StringByTrimmingCharactersInSet (NSCharacterSet set);

		// -(NSString * _Nonnull)stringByPaddingToLength:(NSUInteger)newLength withString:(NSString * _Nonnull)padString startingAtIndex:(NSUInteger)padIndex;
		[Export ("stringByPaddingToLength:withString:startingAtIndex:")]
		string StringByPaddingToLength (nuint newLength, string padString, nuint padIndex);

		// -(NSString * _Nonnull)stringByFoldingWithOptions:(NSStringCompareOptions)options locale:(NSLocale * _Nullable)locale __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("stringByFoldingWithOptions:locale:")]
		string StringByFoldingWithOptions (NSStringCompareOptions options, [NullAllowed] NSLocale locale);

		// -(NSString * _Nonnull)stringByReplacingOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("stringByReplacingOccurrencesOfString:withString:options:range:")]
		string StringByReplacingOccurrencesOfString (string target, string replacement, NSStringCompareOptions options, NSRange searchRange);

		// -(NSString * _Nonnull)stringByReplacingOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("stringByReplacingOccurrencesOfString:withString:")]
		string StringByReplacingOccurrencesOfString (string target, string replacement);

		// -(NSString * _Nonnull)stringByReplacingCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)replacement __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("stringByReplacingCharactersInRange:withString:")]
		string StringByReplacingCharactersInRange (NSRange range, string replacement);

		// -(NSString * _Nullable)stringByApplyingTransform:(NSStringTransform _Nonnull)transform reverse:(BOOL)reverse __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("stringByApplyingTransform:reverse:")]
		[return: NullAllowed]
		string StringByApplyingTransform (string transform, bool reverse);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
		[Export ("writeToURL:atomically:encoding:error:")]
		bool WriteToURL (NSURL url, bool useAuxiliaryFile, nuint enc, [NullAllowed] out NSError error);

		// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
		[Export ("writeToFile:atomically:encoding:error:")]
		bool WriteToFile (string path, bool useAuxiliaryFile, nuint enc, [NullAllowed] out NSError error);

		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// @property (readonly) NSUInteger hash;
		[Export ("hash")]
		nuint Hash { get; }

		// -(instancetype _Nonnull)initWithCharactersNoCopy:(unichar * _Nonnull)characters length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer;
		[Export ("initWithCharactersNoCopy:length:freeWhenDone:")]
		unsafe NativeHandle Constructor (ushort* characters, nuint length, bool freeBuffer);

		// -(instancetype _Nonnull)initWithCharactersNoCopy:(unichar * _Nonnull)chars length:(NSUInteger)len deallocator:(void (^ _Nullable)(unichar * _Nonnull, NSUInteger))deallocator;
		[Export ("initWithCharactersNoCopy:length:deallocator:")]
		unsafe NativeHandle Constructor (ushort* chars, nuint len, [NullAllowed] Action<ushort*, nuint> deallocator);

		// -(instancetype _Nonnull)initWithCharacters:(const unichar * _Nonnull)characters length:(NSUInteger)length;
		[Export ("initWithCharacters:length:")]
		unsafe NativeHandle Constructor (ushort* characters, nuint length);

		// -(instancetype _Nullable)initWithUTF8String:(const char * _Nonnull)nullTerminatedCString __attribute__((format_arg(1)));
		[Export ("initWithUTF8String:")]
		unsafe NativeHandle Constructor (sbyte* nullTerminatedCString);

		// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)aString __attribute__((format_arg(1)));
		[Export ("initWithString:")]
		NativeHandle Constructor (string aString);

		// -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
		[Internal]
		[Export ("initWithFormat:", IsVariadic = true)]
		NativeHandle Constructor (string format, IntPtr varArgs);

		// -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format arguments:(va_list)argList __attribute__((format(NSString, 1, 0)));
		[Export ("initWithFormat:arguments:")]
		unsafe NativeHandle Constructor (string format, sbyte* argList);

		// -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format locale:(id _Nullable)locale, ... __attribute__((format(NSString, 1, 3)));
		[Internal]
		[Export ("initWithFormat:locale:", IsVariadic = true)]
		NativeHandle Constructor (string format, [NullAllowed] NSObject locale, IntPtr varArgs);

		// -(instancetype _Nonnull)initWithFormat:(NSString * _Nonnull)format locale:(id _Nullable)locale arguments:(va_list)argList __attribute__((format(NSString, 1, 0)));
		[Export ("initWithFormat:locale:arguments:")]
		unsafe NativeHandle Constructor (string format, [NullAllowed] NSObject locale, sbyte* argList);

		// -(instancetype _Nullable)initWithValidatedFormat:(NSString * _Nonnull)format validFormatSpecifiers:(NSString * _Nonnull)validFormatSpecifiers error:(NSError * _Nullable * _Nullable)error, ... __attribute__((format(NSString, 2, 4))) __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=8.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (8,0), TV (8,0), Mac (13,0), iOS (16,0)]
		[Internal]
		[Export ("initWithValidatedFormat:validFormatSpecifiers:error:", IsVariadic = true)]
		NativeHandle Constructor (string format, string validFormatSpecifiers, [NullAllowed] out NSError error, IntPtr varArgs);

		// -(instancetype _Nullable)initWithValidatedFormat:(NSString * _Nonnull)format validFormatSpecifiers:(NSString * _Nonnull)validFormatSpecifiers locale:(id _Nullable)locale error:(NSError * _Nullable * _Nullable)error, ... __attribute__((format(NSString, 2, 5))) __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=8.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (8,0), TV (8,0), Mac (13,0), iOS (16,0)]
		[Internal]
		[Export ("initWithValidatedFormat:validFormatSpecifiers:locale:error:", IsVariadic = true)]
		NativeHandle Constructor (string format, string validFormatSpecifiers, [NullAllowed] NSObject locale, [NullAllowed] out NSError error, IntPtr varArgs);

		// -(instancetype _Nullable)initWithValidatedFormat:(NSString * _Nonnull)format validFormatSpecifiers:(NSString * _Nonnull)validFormatSpecifiers arguments:(va_list)argList error:(NSError * _Nullable * _Nullable)error __attribute__((format(NSString, 2, 0))) __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=8.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (8,0), TV (8,0), Mac (13,0), iOS (16,0)]
		[Export ("initWithValidatedFormat:validFormatSpecifiers:arguments:error:")]
		unsafe NativeHandle Constructor (string format, string validFormatSpecifiers, sbyte* argList, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithValidatedFormat:(NSString * _Nonnull)format validFormatSpecifiers:(NSString * _Nonnull)validFormatSpecifiers locale:(id _Nullable)locale arguments:(va_list)argList error:(NSError * _Nullable * _Nullable)error __attribute__((format(NSString, 2, 0))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:")]
		unsafe NativeHandle Constructor (string format, string validFormatSpecifiers, [NullAllowed] NSObject locale, sbyte* argList, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithData:(NSData * _Nonnull)data encoding:(NSStringEncoding)encoding;
		[Export ("initWithData:encoding:")]
		NativeHandle Constructor (NSData data, nuint encoding);

		// -(instancetype _Nullable)initWithBytes:(const void * _Nonnull)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding;
		[Export ("initWithBytes:length:encoding:")]
		unsafe NativeHandle Constructor (void* bytes, nuint len, nuint encoding);

		// -(instancetype _Nullable)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding freeWhenDone:(BOOL)freeBuffer;
		[Export ("initWithBytesNoCopy:length:encoding:freeWhenDone:")]
		unsafe NativeHandle Constructor (void* bytes, nuint len, nuint encoding, bool freeBuffer);

		// -(instancetype _Nullable)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding deallocator:(void (^ _Nullable)(void * _Nonnull, NSUInteger))deallocator;
		[Export ("initWithBytesNoCopy:length:encoding:deallocator:")]
		unsafe NativeHandle Constructor (void* bytes, nuint len, nuint encoding, [NullAllowed] Action<void*, nuint> deallocator);

		// +(instancetype _Nonnull)string;
		[Static]
		[Export ("string")]
		NSString String ();

		// +(instancetype _Nonnull)stringWithString:(NSString * _Nonnull)string __attribute__((format_arg(1)));
		[Static]
		[Export ("stringWithString:")]
		NSString StringWithString (string @string);

		// +(instancetype _Nonnull)stringWithCharacters:(const unichar * _Nonnull)characters length:(NSUInteger)length;
		[Static]
		[Export ("stringWithCharacters:length:")]
		unsafe NSString StringWithCharacters (ushort* characters, nuint length);

		// +(instancetype _Nullable)stringWithUTF8String:(const char * _Nonnull)nullTerminatedCString __attribute__((format_arg(1)));
		[Static]
		[Export ("stringWithUTF8String:")]
		[return: NullAllowed]
		unsafe NSString StringWithUTF8String (sbyte* nullTerminatedCString);

		// +(instancetype _Nonnull)stringWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
		[Static, Internal]
		[Export ("stringWithFormat:", IsVariadic = true)]
		NSString StringWithFormat (string format, IntPtr varArgs);

		// +(instancetype _Nonnull)localizedStringWithFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
		[Static, Internal]
		[Export ("localizedStringWithFormat:", IsVariadic = true)]
		NSString LocalizedStringWithFormat (string format, IntPtr varArgs);

		// +(instancetype _Nullable)stringWithValidatedFormat:(NSString * _Nonnull)format validFormatSpecifiers:(NSString * _Nonnull)validFormatSpecifiers error:(NSError * _Nullable * _Nullable)error, ... __attribute__((format(NSString, 2, 4))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Static, Internal]
		[Export ("stringWithValidatedFormat:validFormatSpecifiers:error:", IsVariadic = true)]
		[return: NullAllowed]
		NSString StringWithValidatedFormat (string format, string validFormatSpecifiers, [NullAllowed] out NSError error, IntPtr varArgs);

		// +(instancetype _Nullable)localizedStringWithValidatedFormat:(NSString * _Nonnull)format validFormatSpecifiers:(NSString * _Nonnull)validFormatSpecifiers error:(NSError * _Nullable * _Nullable)error, ... __attribute__((format(NSString, 2, 4))) __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Static, Internal]
		[Export ("localizedStringWithValidatedFormat:validFormatSpecifiers:error:", IsVariadic = true)]
		[return: NullAllowed]
		NSString LocalizedStringWithValidatedFormat (string format, string validFormatSpecifiers, [NullAllowed] out NSError error, IntPtr varArgs);

		// -(instancetype _Nullable)initWithCString:(const char * _Nonnull)nullTerminatedCString encoding:(NSStringEncoding)encoding __attribute__((format_arg(1)));
		[Export ("initWithCString:encoding:")]
		unsafe NativeHandle Constructor (sbyte* nullTerminatedCString, nuint encoding);

		// +(instancetype _Nullable)stringWithCString:(const char * _Nonnull)cString encoding:(NSStringEncoding)enc __attribute__((format_arg(1)));
		[Static]
		[Export ("stringWithCString:encoding:")]
		[return: NullAllowed]
		unsafe NSString StringWithCString (sbyte* cString, nuint enc);

		// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
		[Export ("initWithContentsOfURL:encoding:error:")]
		NativeHandle Constructor (NSURL url, nuint enc, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
		[Export ("initWithContentsOfFile:encoding:error:")]
		NativeHandle Constructor (string path, nuint enc, [NullAllowed] out NSError error);

		// +(instancetype _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("stringWithContentsOfURL:encoding:error:")]
		[return: NullAllowed]
		NSString StringWithContentsOfURL (NSURL url, nuint enc, [NullAllowed] out NSError error);

		// +(instancetype _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path encoding:(NSStringEncoding)enc error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("stringWithContentsOfFile:encoding:error:")]
		[return: NullAllowed]
		NSString StringWithContentsOfFile (string path, nuint enc, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
		[Export ("initWithContentsOfURL:usedEncoding:error:")]
		unsafe NativeHandle Constructor (NSURL url, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
		[Export ("initWithContentsOfFile:usedEncoding:error:")]
		unsafe NativeHandle Constructor (string path, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

		// +(instancetype _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("stringWithContentsOfURL:usedEncoding:error:")]
		[return: NullAllowed]
		unsafe NSString StringWithContentsOfURL (NSURL url, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);

		// +(instancetype _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path usedEncoding:(NSStringEncoding * _Nullable)enc error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("stringWithContentsOfFile:usedEncoding:error:")]
		[return: NullAllowed]
		unsafe NSString StringWithContentsOfFile (string path, [NullAllowed] nuint* enc, [NullAllowed] out NSError error);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSStringTransform _Nonnull NSStringTransformLatinToKatakana __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformLatinToKatakana", "__Internal")]
		NSString NSStringTransformLatinToKatakana { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformLatinToHiragana __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformLatinToHiragana", "__Internal")]
		NSString NSStringTransformLatinToHiragana { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformLatinToHangul __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformLatinToHangul", "__Internal")]
		NSString NSStringTransformLatinToHangul { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformLatinToArabic __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformLatinToArabic", "__Internal")]
		NSString NSStringTransformLatinToArabic { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformLatinToHebrew __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformLatinToHebrew", "__Internal")]
		NSString NSStringTransformLatinToHebrew { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformLatinToThai __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformLatinToThai", "__Internal")]
		NSString NSStringTransformLatinToThai { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformLatinToCyrillic __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformLatinToCyrillic", "__Internal")]
		NSString NSStringTransformLatinToCyrillic { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformLatinToGreek __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformLatinToGreek", "__Internal")]
		NSString NSStringTransformLatinToGreek { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformToLatin __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformToLatin", "__Internal")]
		NSString NSStringTransformToLatin { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformMandarinToLatin __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformMandarinToLatin", "__Internal")]
		NSString NSStringTransformMandarinToLatin { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformHiraganaToKatakana __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformHiraganaToKatakana", "__Internal")]
		NSString NSStringTransformHiraganaToKatakana { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformFullwidthToHalfwidth __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformFullwidthToHalfwidth", "__Internal")]
		NSString NSStringTransformFullwidthToHalfwidth { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformToXMLHex __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformToXMLHex", "__Internal")]
		NSString NSStringTransformToXMLHex { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformToUnicodeName __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformToUnicodeName", "__Internal")]
		NSString NSStringTransformToUnicodeName { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformStripCombiningMarks __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformStripCombiningMarks", "__Internal")]
		NSString NSStringTransformStripCombiningMarks { get; }

		// extern const NSStringTransform _Nonnull NSStringTransformStripDiacritics __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSStringTransformStripDiacritics", "__Internal")]
		NSString NSStringTransformStripDiacritics { get; }
	}

	// @interface NSStringEncodingDetection (NSString)
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSStringEncodingDetection
	{
		// +(NSStringEncoding)stringEncodingForData:(NSData * _Nonnull)data encodingOptions:(NSDictionary<NSStringEncodingDetectionOptionsKey,id> * _Nullable)opts convertedString:(NSString * _Nullable * _Nullable)string usedLossyConversion:(BOOL * _Nullable)usedLossyConversion __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Static]
		[Export ("stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:")]
		unsafe nuint StringEncodingForData (NSData data, [NullAllowed] NSDictionary<NSString, NSObject> opts, [NullAllowed] out string @string, [NullAllowed] bool* usedLossyConversion);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionSuggestedEncodingsKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSStringEncodingDetectionSuggestedEncodingsKey", "__Internal")]
		NSString NSStringEncodingDetectionSuggestedEncodingsKey { get; }

		// extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionDisallowedEncodingsKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSStringEncodingDetectionDisallowedEncodingsKey", "__Internal")]
		NSString NSStringEncodingDetectionDisallowedEncodingsKey { get; }

		// extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionUseOnlySuggestedEncodingsKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSStringEncodingDetectionUseOnlySuggestedEncodingsKey", "__Internal")]
		NSString NSStringEncodingDetectionUseOnlySuggestedEncodingsKey { get; }

		// extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionAllowLossyKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSStringEncodingDetectionAllowLossyKey", "__Internal")]
		NSString NSStringEncodingDetectionAllowLossyKey { get; }

		// extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionFromWindowsKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSStringEncodingDetectionFromWindowsKey", "__Internal")]
		NSString NSStringEncodingDetectionFromWindowsKey { get; }

		// extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionLossySubstitutionKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSStringEncodingDetectionLossySubstitutionKey", "__Internal")]
		NSString NSStringEncodingDetectionLossySubstitutionKey { get; }

		// extern const NSStringEncodingDetectionOptionsKey _Nonnull NSStringEncodingDetectionLikelyLanguageKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSStringEncodingDetectionLikelyLanguageKey", "__Internal")]
		NSString NSStringEncodingDetectionLikelyLanguageKey { get; }
	}

	// @interface NSItemProvider (NSString) <NSItemProviderReading, NSItemProviderWriting>
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSItemProvider : INSItemProviderReading, INSItemProviderWriting
	{
	}

	// @interface NSMutableString : NSString
	[BaseType (typeof(NSString))]
	interface NSMutableString
	{
		// -(void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)aString;
		[Export ("replaceCharactersInRange:withString:")]
		void ReplaceCharactersInRange (NSRange range, string aString);
	}

	// @interface NSMutableStringExtensionMethods (NSMutableString)
	[Category]
	[BaseType (typeof(NSMutableString))]
	interface NSMutableString_NSMutableStringExtensionMethods
	{
		// -(void)insertString:(NSString * _Nonnull)aString atIndex:(NSUInteger)loc;
		[Export ("insertString:atIndex:")]
		void InsertString (string aString, nuint loc);

		// -(void)deleteCharactersInRange:(NSRange)range;
		[Export ("deleteCharactersInRange:")]
		void DeleteCharactersInRange (NSRange range);

		// -(void)appendString:(NSString * _Nonnull)aString;
		[Export ("appendString:")]
		void AppendString (string aString);

		// -(void)appendFormat:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 1, 2)));
		[Internal]
		[Export ("appendFormat:", IsVariadic = true)]
		void AppendFormat (string format, IntPtr varArgs);

		// -(void)setString:(NSString * _Nonnull)aString;
		[Export ("setString:")]
		void SetString (string aString);

		// -(NSUInteger)replaceOccurrencesOfString:(NSString * _Nonnull)target withString:(NSString * _Nonnull)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange;
		[Export ("replaceOccurrencesOfString:withString:options:range:")]
		nuint ReplaceOccurrencesOfString (string target, string replacement, NSStringCompareOptions options, NSRange searchRange);

		// -(BOOL)applyTransform:(NSStringTransform _Nonnull)transform reverse:(BOOL)reverse range:(NSRange)range updatedRange:(NSRangePointer _Nullable)resultingRange __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("applyTransform:reverse:range:updatedRange:")]
		unsafe bool ApplyTransform (string transform, bool reverse, NSRange range, [NullAllowed] NSRangePointer* resultingRange);

		// -(NSMutableString * _Nonnull)initWithCapacity:(NSUInteger)capacity;
		[Export ("initWithCapacity:")]
		NativeHandle Constructor (nuint capacity);

		// +(NSMutableString * _Nonnull)stringWithCapacity:(NSUInteger)capacity;
		[Static]
		[Export ("stringWithCapacity:")]
		NSMutableString StringWithCapacity (nuint capacity);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSExceptionName _Nonnull NSCharacterConversionException;
		[Field ("NSCharacterConversionException", "__Internal")]
		NSString NSCharacterConversionException { get; }

		// extern const NSExceptionName _Nonnull NSParseErrorException;
		[Field ("NSParseErrorException", "__Internal")]
		NSString NSParseErrorException { get; }
	}

	// @interface NSExtendedStringPropertyListParsing (NSString)
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSExtendedStringPropertyListParsing
	{
		// -(id _Nonnull)propertyList;
		[Export ("propertyList")]
		NSObject PropertyList { get; }

		// -(NSDictionary * _Nullable)propertyListFromStringsFileFormat;
		[NullAllowed, Export ("propertyListFromStringsFileFormat")]
		NSDictionary PropertyListFromStringsFileFormat { get; }
	}

	// @interface NSStringDeprecated (NSString)
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSStringDeprecated
	{
		// -(const char * _Nullable)cString __attribute__((objc_returns_inner_pointer)) __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -cStringUsingEncoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -cStringUsingEncoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
		[NullAllowed, Export ("cString")]
		unsafe sbyte* CString { get; }

		// -(const char * _Nullable)lossyCString __attribute__((objc_returns_inner_pointer)) __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -cStringUsingEncoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -cStringUsingEncoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -cStringUsingEncoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -cStringUsingEncoding: instead")]
		[NullAllowed, Export ("lossyCString")]
		unsafe sbyte* LossyCString { get; }

		// -(NSUInteger)cStringLength __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -lengthOfBytesUsingEncoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -lengthOfBytesUsingEncoding: instead")]
		[Export ("cStringLength")]
		nuint CStringLength { get; }

		// -(void)getCString:(char * _Nonnull)bytes __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Export ("getCString:")]
		unsafe void GetCString (sbyte* bytes);

		// -(void)getCString:(char * _Nonnull)bytes maxLength:(NSUInteger)maxLength __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Export ("getCString:maxLength:")]
		unsafe void GetCString (sbyte* bytes, nuint maxLength);

		// -(void)getCString:(char * _Nonnull)bytes maxLength:(NSUInteger)maxLength range:(NSRange)aRange remainingRange:(NSRangePointer _Nullable)leftoverRange __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -getCString:maxLength:encoding: instead")]
		[Export ("getCString:maxLength:range:remainingRange:")]
		unsafe void GetCString (sbyte* bytes, nuint maxLength, NSRange aRange, [NullAllowed] NSRangePointer* leftoverRange);

		// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -writeToFile:atomically:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -writeToFile:atomically:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -writeToFile:atomically:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -writeToFile:atomically:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -writeToFile:atomically:error: instead")]
		[Export ("writeToFile:atomically:")]
		bool WriteToFile (string path, bool useAuxiliaryFile);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -writeToURL:atomically:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -writeToURL:atomically:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -writeToURL:atomically:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -writeToURL:atomically:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -writeToURL:atomically:error: instead")]
		[Export ("writeToURL:atomically:")]
		bool WriteToURL (NSURL url, bool atomically);

		// -(id _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithContentsOfFile:encoding:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfFile:encoding:error: instead")]
		[Export ("initWithContentsOfFile:")]
		NativeHandle Constructor (string path);

		// -(id _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithContentsOfURL:encoding:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:encoding:error: instead")]
		[Export ("initWithContentsOfURL:")]
		NativeHandle Constructor (NSURL url);

		// +(id _Nullable)stringWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfFile:encoding:error: instead")]
		[Static]
		[Export ("stringWithContentsOfFile:")]
		[return: NullAllowed]
		NSObject StringWithContentsOfFile (string path);

		// +(id _Nullable)stringWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +stringWithContentsOfURL:encoding:error: instead")]
		[Static]
		[Export ("stringWithContentsOfURL:")]
		[return: NullAllowed]
		NSObject StringWithContentsOfURL (NSURL url);

		// -(id _Nullable)initWithCStringNoCopy:(char * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
		[Export ("initWithCStringNoCopy:length:freeWhenDone:")]
		unsafe NativeHandle Constructor (sbyte* bytes, nuint length, bool freeBuffer);

		// -(id _Nullable)initWithCString:(const char * _Nonnull)bytes length:(NSUInteger)length __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
		[Export ("initWithCString:length:")]
		unsafe NativeHandle Constructor (sbyte* bytes, nuint length);

		// -(id _Nullable)initWithCString:(const char * _Nonnull)bytes __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithCString:encoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithCString:encoding: instead")]
		[Export ("initWithCString:")]
		unsafe NativeHandle Constructor (sbyte* bytes);

		// +(id _Nullable)stringWithCString:(const char * _Nonnull)bytes length:(NSUInteger)length __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +stringWithCString:encoding:")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use +stringWithCString:encoding:")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding:")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding:")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding:")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding:")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding:")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding:")]
		[Static]
		[Export ("stringWithCString:length:")]
		[return: NullAllowed]
		unsafe NSObject StringWithCString (sbyte* bytes, nuint length);

		// +(id _Nullable)stringWithCString:(const char * _Nonnull)bytes __attribute__((availability(macos, introduced=10.0, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +stringWithCString:encoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Use +stringWithCString:encoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +stringWithCString:encoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +stringWithCString:encoding: instead")]
		[Static]
		[Export ("stringWithCString:")]
		[return: NullAllowed]
		unsafe NSObject StringWithCString (sbyte* bytes);

		// -(void)getCharacters:(unichar * _Nonnull)buffer;
		[Export ("getCharacters:")]
		unsafe void GetCharacters (ushort* buffer);
	}

	// @interface NSSimpleCString : NSString
	[Unavailable (PlatformName.Swift)]
	[BaseType (typeof(NSString))]
	interface NSSimpleCString
	{
	}

	// @interface NSConstantString : NSSimpleCString
	[Unavailable (PlatformName.Swift)]
	[BaseType (typeof(NSSimpleCString))]
	interface NSConstantString
	{
	}

	// audit-objc-generics: @interface NSDictionary<__covariant KeyType, __covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
	[BaseType (typeof(NSObject))]
	interface NSDictionary : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
	{
		// @property (readonly) NSUInteger count;
		[Export ("count")]
		nuint Count { get; }

		// -(ObjectType _Nullable)objectForKey:(KeyType _Nonnull)aKey;
		[Export ("objectForKey:")]
		[return: NullAllowed]
		NSObject ObjectForKey (NSObject aKey);

		// -(NSEnumerator<KeyType> * _Nonnull)keyEnumerator;
		[Export ("keyEnumerator")]
		NSEnumerator<NSObject> KeyEnumerator { get; }

		// -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects forKeys:(id<NSCopying>  _Nonnull const * _Nullable)keys count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
		[Export ("initWithObjects:forKeys:count:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] NSObject[] objects, [NullAllowed] NSCopying[] keys, nuint cnt);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSExtendedDictionary (NSDictionary)
	[Category]
	[BaseType (typeof(NSDictionary))]
	interface NSDictionary_NSExtendedDictionary
	{
		// @property (readonly, copy) NSArray<KeyType> * _Nonnull allKeys;
		[Export ("allKeys", ArgumentSemantic.Copy)]
		NSObject[] AllKeys { get; }

		// -(NSArray<KeyType> * _Nonnull)allKeysForObject:(ObjectType _Nonnull)anObject;
		[Export ("allKeysForObject:")]
		NSObject[] AllKeysForObject (NSObject anObject);

		// @property (readonly, copy) NSArray<ObjectType> * _Nonnull allValues;
		[Export ("allValues", ArgumentSemantic.Copy)]
		NSObject[] AllValues { get; }

		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// @property (readonly, copy) NSString * _Nonnull descriptionInStringsFileFormat;
		[Export ("descriptionInStringsFileFormat")]
		string DescriptionInStringsFileFormat { get; }

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
		[Export ("descriptionWithLocale:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale);

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
		[Export ("descriptionWithLocale:indent:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale, nuint level);

		// -(BOOL)isEqualToDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
		[Export ("isEqualToDictionary:")]
		bool IsEqualToDictionary (NSDictionary<NSObject, NSObject> otherDictionary);

		// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
		[Export ("objectEnumerator")]
		NSEnumerator<NSObject> ObjectEnumerator { get; }

		// -(NSArray<ObjectType> * _Nonnull)objectsForKeys:(NSArray<KeyType> * _Nonnull)keys notFoundMarker:(ObjectType _Nonnull)marker;
		[Export ("objectsForKeys:notFoundMarker:")]
		NSObject[] ObjectsForKeys (NSObject[] keys, NSObject marker);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("writeToURL:error:")]
		bool WriteToURL (NSURL url, [NullAllowed] out NSError error);

		// -(NSArray<KeyType> * _Nonnull)keysSortedByValueUsingSelector:(SEL _Nonnull)comparator;
		[Export ("keysSortedByValueUsingSelector:")]
		NSObject[] KeysSortedByValueUsingSelector (Selector comparator);

		// -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects andKeys:(KeyType  _Nonnull * _Nullable)keys count:(NSUInteger)count __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("getObjects:andKeys:count:")]
		void GetObjects ([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys, nuint count);

		// -(ObjectType _Nullable)objectForKeyedSubscript:(KeyType _Nonnull)key __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("objectForKeyedSubscript:")]
		[return: NullAllowed]
		NSObject ObjectForKeyedSubscript (NSObject key);

		// -(void)enumerateKeysAndObjectsUsingBlock:(void (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateKeysAndObjectsUsingBlock:")]
		unsafe void EnumerateKeysAndObjectsUsingBlock (Action<NSObject, NSObject, bool*> block);

		// -(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateKeysAndObjectsWithOptions:usingBlock:")]
		unsafe void EnumerateKeysAndObjectsWithOptions (NSEnumerationOptions opts, Action<NSObject, NSObject, bool*> block);

		// -(NSArray<KeyType> * _Nonnull)keysSortedByValueUsingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("keysSortedByValueUsingComparator:")]
		NSObject[] KeysSortedByValueUsingComparator (NSComparator cmptr);

		// -(NSArray<KeyType> * _Nonnull)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("keysSortedByValueWithOptions:usingComparator:")]
		NSObject[] KeysSortedByValueWithOptions (NSSortOptions opts, NSComparator cmptr);

		// -(NSSet<KeyType> * _Nonnull)keysOfEntriesPassingTest:(BOOL (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("keysOfEntriesPassingTest:")]
		unsafe NSSet<NSObject> KeysOfEntriesPassingTest (Func<NSObject, NSObject, bool*, bool> predicate);

		// -(NSSet<KeyType> * _Nonnull)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(KeyType _Nonnull, ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("keysOfEntriesWithOptions:passingTest:")]
		unsafe NSSet<NSObject> KeysOfEntriesWithOptions (NSEnumerationOptions opts, Func<NSObject, NSObject, bool*, bool> predicate);
	}

	// @interface NSDeprecated (NSDictionary)
	[Category]
	[BaseType (typeof(NSDictionary))]
	interface NSDictionary_NSDeprecated
	{
		// -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects andKeys:(KeyType  _Nonnull * _Nullable)keys __attribute__((availability(swift, unavailable))) __attribute__((availability(macos, introduced=10.0, deprecated=10.13))) __attribute__((availability(ios, introduced=2.0, deprecated=11.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=4.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=11.0)));
		[Unavailable (PlatformName.Swift)]
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -getObjects:andKeys:count: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "Use -getObjects:andKeys:count: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -getObjects:andKeys:count: instead")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "Use -getObjects:andKeys:count: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -getObjects:andKeys:count: instead")]
		[Deprecated (PlatformName.WatchOS, 4, 0, message: "Use -getObjects:andKeys:count: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -getObjects:andKeys:count: instead")]
		[Deprecated (PlatformName.TvOS, 11, 0, message: "Use -getObjects:andKeys:count: instead")]
		[Export ("getObjects:andKeys:")]
		void GetObjects ([NullAllowed] NSObject[] objects, [NullAllowed] NSObject[] keys);

		// +(NSDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Static]
		[Export ("dictionaryWithContentsOfFile:")]
		[return: NullAllowed]
		NSDictionary<NSObject, NSObject> DictionaryWithContentsOfFile (string path);

		// +(NSDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Static]
		[Export ("dictionaryWithContentsOfURL:")]
		[return: NullAllowed]
		NSDictionary<NSObject, NSObject> DictionaryWithContentsOfURL (NSURL url);

		// -(NSDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("initWithContentsOfFile:")]
		NativeHandle Constructor (string path);

		// -(NSDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("initWithContentsOfURL:")]
		NativeHandle Constructor (NSURL url);

		// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("writeToFile:atomically:")]
		bool WriteToFile (string path, bool useAuxiliaryFile);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("writeToURL:atomically:")]
		bool WriteToURL (NSURL url, bool atomically);
	}

	// @interface NSDictionaryCreation (NSDictionary)
	[Category]
	[BaseType (typeof(NSDictionary))]
	interface NSDictionary_NSDictionaryCreation
	{
		// +(instancetype _Nonnull)dictionary;
		[Static]
		[Export ("dictionary")]
		NSDictionary Dictionary ();

		// +(instancetype _Nonnull)dictionaryWithObject:(ObjectType _Nonnull)object forKey:(id<NSCopying> _Nonnull)key;
		[Static]
		[Export ("dictionaryWithObject:forKey:")]
		NSDictionary DictionaryWithObject (NSObject @object, NSCopying key);

		// +(instancetype _Nonnull)dictionaryWithObjects:(ObjectType  _Nonnull const * _Nullable)objects forKeys:(id<NSCopying>  _Nonnull const * _Nullable)keys count:(NSUInteger)cnt;
		[Static]
		[Export ("dictionaryWithObjects:forKeys:count:")]
		NSDictionary DictionaryWithObjects ([NullAllowed] NSObject[] objects, [NullAllowed] NSCopying[] keys, nuint cnt);

		// +(instancetype _Nonnull)dictionaryWithObjectsAndKeys:(id _Nonnull)firstObject, ... __attribute__((sentinel(0, 1))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Static, Internal]
		[Export ("dictionaryWithObjectsAndKeys:", IsVariadic = true)]
		NSDictionary DictionaryWithObjectsAndKeys (NSObject firstObject, IntPtr varArgs);

		// +(instancetype _Nonnull)dictionaryWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)dict;
		[Static]
		[Export ("dictionaryWithDictionary:")]
		NSDictionary DictionaryWithDictionary (NSDictionary<NSObject, NSObject> dict);

		// +(instancetype _Nonnull)dictionaryWithObjects:(NSArray<ObjectType> * _Nonnull)objects forKeys:(NSArray<id<NSCopying>> * _Nonnull)keys;
		[Static]
		[Export ("dictionaryWithObjects:forKeys:")]
		NSDictionary DictionaryWithObjects (NSObject[] objects, NSCopying[] keys);

		// -(instancetype _Nonnull)initWithObjectsAndKeys:(id _Nonnull)firstObject, ... __attribute__((sentinel(0, 1)));
		[Internal]
		[Export ("initWithObjectsAndKeys:", IsVariadic = true)]
		NativeHandle Constructor (NSObject firstObject, IntPtr varArgs);

		// -(instancetype _Nonnull)initWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
		[Export ("initWithDictionary:")]
		NativeHandle Constructor (NSDictionary<NSObject, NSObject> otherDictionary);

		// -(instancetype _Nonnull)initWithDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary copyItems:(BOOL)flag;
		[Export ("initWithDictionary:copyItems:")]
		NativeHandle Constructor (NSDictionary<NSObject, NSObject> otherDictionary, bool flag);

		// -(instancetype _Nonnull)initWithObjects:(NSArray<ObjectType> * _Nonnull)objects forKeys:(NSArray<id<NSCopying>> * _Nonnull)keys;
		[Export ("initWithObjects:forKeys:")]
		NativeHandle Constructor (NSObject[] objects, NSCopying[] keys);

		// -(NSDictionary<NSString *,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("initWithContentsOfURL:error:")]
		NativeHandle Constructor (NSURL url, [NullAllowed] out NSError error);

		// +(NSDictionary<NSString *,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Static]
		[Export ("dictionaryWithContentsOfURL:error:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> DictionaryWithContentsOfURL (NSURL url, [NullAllowed] out NSError error);
	}

	// audit-objc-generics: @interface NSMutableDictionary<KeyType, ObjectType> : NSDictionary
	[BaseType (typeof(NSDictionary))]
	interface NSMutableDictionary
	{
		// -(void)removeObjectForKey:(KeyType _Nonnull)aKey;
		[Export ("removeObjectForKey:")]
		void RemoveObjectForKey (NSObject aKey);

		// -(void)setObject:(ObjectType _Nonnull)anObject forKey:(id<NSCopying> _Nonnull)aKey;
		[Export ("setObject:forKey:")]
		void SetObject (NSObject anObject, NSCopying aKey);

		// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
		[Export ("initWithCapacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nuint numItems);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSExtendedMutableDictionary (NSMutableDictionary)
	[Category]
	[BaseType (typeof(NSMutableDictionary))]
	interface NSMutableDictionary_NSExtendedMutableDictionary
	{
		// -(void)addEntriesFromDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
		[Export ("addEntriesFromDictionary:")]
		void AddEntriesFromDictionary (NSDictionary<NSObject, NSObject> otherDictionary);

		// -(void)removeAllObjects;
		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		// -(void)removeObjectsForKeys:(NSArray<KeyType> * _Nonnull)keyArray;
		[Export ("removeObjectsForKeys:")]
		void RemoveObjectsForKeys (NSObject[] keyArray);

		// -(void)setDictionary:(NSDictionary<KeyType,ObjectType> * _Nonnull)otherDictionary;
		[Export ("setDictionary:")]
		void SetDictionary (NSDictionary<NSObject, NSObject> otherDictionary);

		// -(void)setObject:(ObjectType _Nullable)obj forKeyedSubscript:(id<NSCopying> _Nonnull)key __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("setObject:forKeyedSubscript:")]
		void SetObject ([NullAllowed] NSObject obj, NSCopying key);
	}

	// @interface NSMutableDictionaryCreation (NSMutableDictionary)
	[Category]
	[BaseType (typeof(NSMutableDictionary))]
	interface NSMutableDictionary_NSMutableDictionaryCreation
	{
		// +(instancetype _Nonnull)dictionaryWithCapacity:(NSUInteger)numItems;
		[Static]
		[Export ("dictionaryWithCapacity:")]
		NSMutableDictionary DictionaryWithCapacity (nuint numItems);

		// +(NSMutableDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfFile:(NSString * _Nonnull)path;
		[Static]
		[Export ("dictionaryWithContentsOfFile:")]
		[return: NullAllowed]
		NSMutableDictionary<NSObject, NSObject> DictionaryWithContentsOfFile (string path);

		// +(NSMutableDictionary<KeyType,ObjectType> * _Nullable)dictionaryWithContentsOfURL:(NSURL * _Nonnull)url;
		[Static]
		[Export ("dictionaryWithContentsOfURL:")]
		[return: NullAllowed]
		NSMutableDictionary<NSObject, NSObject> DictionaryWithContentsOfURL (NSURL url);

		// -(NSMutableDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
		[Export ("initWithContentsOfFile:")]
		NativeHandle Constructor (string path);

		// -(NSMutableDictionary<KeyType,ObjectType> * _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
		[Export ("initWithContentsOfURL:")]
		NativeHandle Constructor (NSURL url);
	}

	// @interface NSSharedKeySetDictionary (NSDictionary)
	[Category]
	[BaseType (typeof(NSDictionary))]
	interface NSDictionary_NSSharedKeySetDictionary
	{
		// +(id _Nonnull)sharedKeySetForKeys:(NSArray<id<NSCopying>> * _Nonnull)keys __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Static]
		[Export ("sharedKeySetForKeys:")]
		NSObject SharedKeySetForKeys (NSCopying[] keys);
	}

	// @interface NSSharedKeySetDictionary (NSMutableDictionary)
	[Category]
	[BaseType (typeof(NSMutableDictionary))]
	interface NSMutableDictionary_NSSharedKeySetDictionary
	{
		// +(NSMutableDictionary<KeyType,ObjectType> * _Nonnull)dictionaryWithSharedKeySet:(id _Nonnull)keyset __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Static]
		[Export ("dictionaryWithSharedKeySet:")]
		NSMutableDictionary<NSObject, NSObject> DictionaryWithSharedKeySet (NSObject keyset);
	}

	// @interface NSGenericFastEnumeration (NSDictionary) <NSFastEnumeration>
	[Category]
	[BaseType (typeof(NSDictionary))]
	interface NSDictionary_NSGenericFastEnumeration : INSFastEnumeration
	{
		// -(NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState * _Nonnull)state objects:(K  _Nullable * _Nonnull)buffer count:(NSUInteger)len;
		[Export ("countByEnumeratingWithState:objects:count:")]
		unsafe nuint CountByEnumeratingWithState (NSFastEnumerationState* state, NSObject[] buffer, nuint len);
	}

	// audit-objc-generics: @interface NSSet<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
	[BaseType (typeof(NSObject))]
	interface NSSet : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
	{
		// @property (readonly) NSUInteger count;
		[Export ("count")]
		nuint Count { get; }

		// -(ObjectType _Nullable)member:(ObjectType _Nonnull)object;
		[Export ("member:")]
		[return: NullAllowed]
		NSObject Member (NSObject @object);

		// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
		[Export ("objectEnumerator")]
		NSEnumerator<NSObject> ObjectEnumerator { get; }

		// -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
		[Export ("initWithObjects:count:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] NSObject[] objects, nuint cnt);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSExtendedSet (NSSet)
	[Category]
	[BaseType (typeof(NSSet))]
	interface NSSet_NSExtendedSet
	{
		// @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
		[Export ("allObjects", ArgumentSemantic.Copy)]
		NSObject[] AllObjects { get; }

		// -(ObjectType _Nullable)anyObject;
		[NullAllowed, Export ("anyObject")]
		NSObject AnyObject { get; }

		// -(BOOL)containsObject:(ObjectType _Nonnull)anObject;
		[Export ("containsObject:")]
		bool ContainsObject (NSObject anObject);

		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
		[Export ("descriptionWithLocale:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale);

		// -(BOOL)intersectsSet:(NSSet<ObjectType> * _Nonnull)otherSet;
		[Export ("intersectsSet:")]
		bool IntersectsSet (NSSet<NSObject> otherSet);

		// -(BOOL)isEqualToSet:(NSSet<ObjectType> * _Nonnull)otherSet;
		[Export ("isEqualToSet:")]
		bool IsEqualToSet (NSSet<NSObject> otherSet);

		// -(BOOL)isSubsetOfSet:(NSSet<ObjectType> * _Nonnull)otherSet;
		[Export ("isSubsetOfSet:")]
		bool IsSubsetOfSet (NSSet<NSObject> otherSet);

		// -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("makeObjectsPerformSelector:")]
		void MakeObjectsPerformSelector (Selector aSelector);

		// -(void)makeObjectsPerformSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)argument __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("makeObjectsPerformSelector:withObject:")]
		void MakeObjectsPerformSelector (Selector aSelector, [NullAllowed] NSObject argument);

		// -(NSSet<ObjectType> * _Nonnull)setByAddingObject:(ObjectType _Nonnull)anObject __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("setByAddingObject:")]
		NSSet<NSObject> SetByAddingObject (NSObject anObject);

		// -(NSSet<ObjectType> * _Nonnull)setByAddingObjectsFromSet:(NSSet<ObjectType> * _Nonnull)other __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("setByAddingObjectsFromSet:")]
		NSSet<NSObject> SetByAddingObjectsFromSet (NSSet<NSObject> other);

		// -(NSSet<ObjectType> * _Nonnull)setByAddingObjectsFromArray:(NSArray<ObjectType> * _Nonnull)other __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("setByAddingObjectsFromArray:")]
		NSSet<NSObject> SetByAddingObjectsFromArray (NSObject[] other);

		// -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateObjectsUsingBlock:")]
		unsafe void EnumerateObjectsUsingBlock (Action<NSObject, bool*> block);

		// -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateObjectsWithOptions:usingBlock:")]
		unsafe void EnumerateObjectsWithOptions (NSEnumerationOptions opts, Action<NSObject, bool*> block);

		// -(NSSet<ObjectType> * _Nonnull)objectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("objectsPassingTest:")]
		unsafe NSSet<NSObject> ObjectsPassingTest (Func<NSObject, bool*, bool> predicate);

		// -(NSSet<ObjectType> * _Nonnull)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, BOOL * _Nonnull))predicate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("objectsWithOptions:passingTest:")]
		unsafe NSSet<NSObject> ObjectsWithOptions (NSEnumerationOptions opts, Func<NSObject, bool*, bool> predicate);
	}

	// @interface NSSetCreation (NSSet)
	[Category]
	[BaseType (typeof(NSSet))]
	interface NSSet_NSSetCreation
	{
		// +(instancetype _Nonnull)set;
		[Static]
		[Export ("set")]
		NSSet Set ();

		// +(instancetype _Nonnull)setWithObject:(ObjectType _Nonnull)object;
		[Static]
		[Export ("setWithObject:")]
		NSSet SetWithObject (NSObject @object);

		// +(instancetype _Nonnull)setWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
		[Static]
		[Export ("setWithObjects:count:")]
		NSSet SetWithObjects (NSObject[] objects, nuint cnt);

		// +(instancetype _Nonnull)setWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
		[Static, Internal]
		[Export ("setWithObjects:", IsVariadic = true)]
		NSSet SetWithObjects (NSObject firstObj, IntPtr varArgs);

		// +(instancetype _Nonnull)setWithSet:(NSSet<ObjectType> * _Nonnull)set;
		[Static]
		[Export ("setWithSet:")]
		NSSet SetWithSet (NSSet<NSObject> set);

		// +(instancetype _Nonnull)setWithArray:(NSArray<ObjectType> * _Nonnull)array;
		[Static]
		[Export ("setWithArray:")]
		NSSet SetWithArray (NSObject[] array);

		// -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
		[Internal]
		[Export ("initWithObjects:", IsVariadic = true)]
		NativeHandle Constructor (NSObject firstObj, IntPtr varArgs);

		// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
		[Export ("initWithSet:")]
		NativeHandle Constructor (NSSet<NSObject> set);

		// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
		[Export ("initWithSet:copyItems:")]
		NativeHandle Constructor (NSSet<NSObject> set, bool flag);

		// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
		[Export ("initWithArray:")]
		NativeHandle Constructor (NSObject[] array);
	}

	// audit-objc-generics: @interface NSMutableSet<ObjectType> : NSSet
	[BaseType (typeof(NSSet))]
	interface NSMutableSet
	{
		// -(void)addObject:(ObjectType _Nonnull)object;
		[Export ("addObject:")]
		void AddObject (NSObject @object);

		// -(void)removeObject:(ObjectType _Nonnull)object;
		[Export ("removeObject:")]
		void RemoveObject (NSObject @object);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
		[Export ("initWithCapacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nuint numItems);
	}

	// @interface NSExtendedMutableSet (NSMutableSet)
	[Category]
	[BaseType (typeof(NSMutableSet))]
	interface NSMutableSet_NSExtendedMutableSet
	{
		// -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)array;
		[Export ("addObjectsFromArray:")]
		void AddObjectsFromArray (NSObject[] array);

		// -(void)intersectSet:(NSSet<ObjectType> * _Nonnull)otherSet;
		[Export ("intersectSet:")]
		void IntersectSet (NSSet<NSObject> otherSet);

		// -(void)minusSet:(NSSet<ObjectType> * _Nonnull)otherSet;
		[Export ("minusSet:")]
		void MinusSet (NSSet<NSObject> otherSet);

		// -(void)removeAllObjects;
		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		// -(void)unionSet:(NSSet<ObjectType> * _Nonnull)otherSet;
		[Export ("unionSet:")]
		void UnionSet (NSSet<NSObject> otherSet);

		// -(void)setSet:(NSSet<ObjectType> * _Nonnull)otherSet;
		[Export ("setSet:")]
		void SetSet (NSSet<NSObject> otherSet);
	}

	// @interface NSMutableSetCreation (NSMutableSet)
	[Category]
	[BaseType (typeof(NSMutableSet))]
	interface NSMutableSet_NSMutableSetCreation
	{
		// +(instancetype _Nonnull)setWithCapacity:(NSUInteger)numItems;
		[Static]
		[Export ("setWithCapacity:")]
		NSMutableSet SetWithCapacity (nuint numItems);
	}

	// audit-objc-generics: @interface NSCountedSet<ObjectType> : NSMutableSet
	[BaseType (typeof(NSMutableSet))]
	interface NSCountedSet
	{
		// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
		[Export ("initWithCapacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nuint numItems);

		// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
		[Export ("initWithArray:")]
		NativeHandle Constructor (NSObject[] array);

		// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
		[Export ("initWithSet:")]
		NativeHandle Constructor (NSSet<NSObject> set);

		// -(NSUInteger)countForObject:(ObjectType _Nonnull)object;
		[Export ("countForObject:")]
		nuint CountForObject (NSObject @object);

		// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
		[Export ("objectEnumerator")]
		NSEnumerator<NSObject> ObjectEnumerator { get; }

		// -(void)addObject:(ObjectType _Nonnull)object;
		[Export ("addObject:")]
		void AddObject (NSObject @object);

		// -(void)removeObject:(ObjectType _Nonnull)object;
		[Export ("removeObject:")]
		void RemoveObject (NSObject @object);
	}

	// @interface NSProgress : NSObject
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[BaseType (typeof(NSObject))]
	interface NSProgress
	{
		// +(NSProgress * _Nullable)currentProgress __attribute__((swift_attr("@_unavailableFromAsync(message: "Progress for the current thread cannot be used in async contexts.")")));
		[Static]
		[NullAllowed, Export ("currentProgress")]
		NSProgress CurrentProgress { get; }

		// +(NSProgress * _Nonnull)progressWithTotalUnitCount:(int64_t)unitCount;
		[Static]
		[Export ("progressWithTotalUnitCount:")]
		NSProgress ProgressWithTotalUnitCount (long unitCount);

		// +(NSProgress * _Nonnull)discreteProgressWithTotalUnitCount:(int64_t)unitCount __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("discreteProgressWithTotalUnitCount:")]
		NSProgress DiscreteProgressWithTotalUnitCount (long unitCount);

		// +(NSProgress * _Nonnull)progressWithTotalUnitCount:(int64_t)unitCount parent:(NSProgress * _Nonnull)parent pendingUnitCount:(int64_t)portionOfParentTotalUnitCount __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("progressWithTotalUnitCount:parent:pendingUnitCount:")]
		NSProgress ProgressWithTotalUnitCount (long unitCount, NSProgress parent, long portionOfParentTotalUnitCount);

		// -(instancetype _Nonnull)initWithParent:(NSProgress * _Nullable)parentProgressOrNil userInfo:(NSDictionary<NSProgressUserInfoKey,id> * _Nullable)userInfoOrNil __attribute__((objc_designated_initializer));
		[Export ("initWithParent:userInfo:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] NSProgress parentProgressOrNil, [NullAllowed] NSDictionary<NSString, NSObject> userInfoOrNil);

		// -(void)becomeCurrentWithPendingUnitCount:(int64_t)unitCount __attribute__((swift_attr("@_unavailableFromAsync(message: "Progress for the current thread cannot be used in async contexts.")")));
		[Export ("becomeCurrentWithPendingUnitCount:")]
		void BecomeCurrentWithPendingUnitCount (long unitCount);

		// -(void)performAsCurrentWithPendingUnitCount:(int64_t)unitCount usingBlock:(void (^ _Nonnull)(void))work __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((swift_private));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("performAsCurrentWithPendingUnitCount:usingBlock:")]
		void PerformAsCurrentWithPendingUnitCount (long unitCount, Action work);

		// -(void)resignCurrent __attribute__((swift_attr("@_unavailableFromAsync(message: "Progress for the current thread cannot be used in async contexts.")")));
		[Export ("resignCurrent")]
		void ResignCurrent ();

		// -(void)addChild:(NSProgress * _Nonnull)child withPendingUnitCount:(int64_t)inUnitCount __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("addChild:withPendingUnitCount:")]
		void AddChild (NSProgress child, long inUnitCount);

		// @property int64_t totalUnitCount;
		[Export ("totalUnitCount")]
		long TotalUnitCount { get; set; }

		// @property int64_t completedUnitCount;
		[Export ("completedUnitCount")]
		long CompletedUnitCount { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified localizedDescription;
		[NullAllowed, Export ("localizedDescription")]
		string LocalizedDescription { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified localizedAdditionalDescription;
		[NullAllowed, Export ("localizedAdditionalDescription")]
		string LocalizedAdditionalDescription { get; set; }

		// @property (getter = isCancellable) BOOL cancellable;
		[Export ("cancellable")]
		bool Cancellable { [Bind ("isCancellable")] get; set; }

		// @property (getter = isPausable) BOOL pausable;
		[Export ("pausable")]
		bool Pausable { [Bind ("isPausable")] get; set; }

		// @property (readonly, getter = isCancelled) BOOL cancelled;
		[Export ("cancelled")]
		bool Cancelled { [Bind ("isCancelled")] get; }

		// @property (readonly, getter = isPaused) BOOL paused;
		[Export ("paused")]
		bool Paused { [Bind ("isPaused")] get; }

		// @property (copy) void (^ _Nullable)(void) cancellationHandler;
		[NullAllowed, Export ("cancellationHandler", ArgumentSemantic.Copy)]
		Action CancellationHandler { get; set; }

		// @property (copy) void (^ _Nullable)(void) pausingHandler;
		[NullAllowed, Export ("pausingHandler", ArgumentSemantic.Copy)]
		Action PausingHandler { get; set; }

		// @property (copy) void (^ _Nullable)(void) resumingHandler __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[NullAllowed, Export ("resumingHandler", ArgumentSemantic.Copy)]
		Action ResumingHandler { get; set; }

		// -(void)setUserInfoObject:(id _Nullable)objectOrNil forKey:(NSProgressUserInfoKey _Nonnull)key;
		[Export ("setUserInfoObject:forKey:")]
		void SetUserInfoObject ([NullAllowed] NSObject objectOrNil, string key);

		// @property (readonly, getter = isIndeterminate) BOOL indeterminate;
		[Export ("indeterminate")]
		bool Indeterminate { [Bind ("isIndeterminate")] get; }

		// @property (readonly) double fractionCompleted;
		[Export ("fractionCompleted")]
		double FractionCompleted { get; }

		// @property (readonly, getter = isFinished) BOOL finished;
		[Export ("finished")]
		bool Finished { [Bind ("isFinished")] get; }

		// -(void)cancel;
		[Export ("cancel")]
		void Cancel ();

		// -(void)pause;
		[Export ("pause")]
		void Pause ();

		// -(void)resume __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("resume")]
		void Resume ();

		// @property (readonly, copy) NSDictionary<NSProgressUserInfoKey,id> * _Nonnull userInfo;
		[Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> UserInfo { get; }

		// @property (copy) NSProgressKind _Nullable kind;
		[NullAllowed, Export ("kind")]
		string Kind { get; set; }

		// @property (copy) NS_REFINED_FOR_SWIFT NSNumber * estimatedTimeRemaining __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((swift_private));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Export ("estimatedTimeRemaining", ArgumentSemantic.Copy)]
		NSNumber EstimatedTimeRemaining { get; set; }

		// @property (copy) NS_REFINED_FOR_SWIFT NSNumber * throughput __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((swift_private));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Export ("throughput", ArgumentSemantic.Copy)]
		NSNumber Throughput { get; set; }

		// @property (copy) NSProgressFileOperationKind _Nullable fileOperationKind __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[NullAllowed, Export ("fileOperationKind")]
		string FileOperationKind { get; set; }

		// @property (copy) NSURL * _Nullable fileURL __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[NullAllowed, Export ("fileURL", ArgumentSemantic.Copy)]
		NSURL FileURL { get; set; }

		// @property (copy) NS_REFINED_FOR_SWIFT NSNumber * fileTotalCount __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((swift_private));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Export ("fileTotalCount", ArgumentSemantic.Copy)]
		NSNumber FileTotalCount { get; set; }

		// @property (copy) NS_REFINED_FOR_SWIFT NSNumber * fileCompletedCount __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((swift_private));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Export ("fileCompletedCount", ArgumentSemantic.Copy)]
		NSNumber FileCompletedCount { get; set; }

		// -(void)publish __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,9)]
		[Export ("publish")]
		void Publish ();

		// -(void)unpublish __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,9)]
		[Export ("unpublish")]
		void Unpublish ();

		// +(id _Nonnull)addSubscriberForFileURL:(NSURL * _Nonnull)url withPublishingHandler:(NSProgressPublishingHandler _Nonnull)publishingHandler __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,9)]
		[Static]
		[Export ("addSubscriberForFileURL:withPublishingHandler:")]
		NSObject AddSubscriberForFileURL (NSURL url, NSProgressPublishingHandler publishingHandler);

		// +(void)removeSubscriber:(id _Nonnull)subscriber __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,9)]
		[Static]
		[Export ("removeSubscriber:")]
		void RemoveSubscriber (NSObject subscriber);

		// @property (readonly, getter = isOld) BOOL old __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Export ("old")]
		bool Old { [Bind ("isOld")] get; }
	}

	// typedef void (^NSProgressUnpublishingHandler)();
	delegate void NSProgressUnpublishingHandler ();

	// typedef NSProgressUnpublishingHandler _Nullable (^NSProgressPublishingHandler)(NSProgress * _Nonnull);
	delegate NSProgressUnpublishingHandler NSProgressPublishingHandler (NSProgress arg0);

	// @protocol NSProgressReporting <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface NSProgressReporting
	{
		// @required @property (readonly) NSProgress * _Nonnull progress;
		[Abstract]
		[Export ("progress")]
		NSProgress Progress { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSProgressUserInfoKey _Nonnull NSProgressEstimatedTimeRemainingKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressEstimatedTimeRemainingKey", "__Internal")]
		NSString NSProgressEstimatedTimeRemainingKey { get; }

		// extern const NSProgressUserInfoKey _Nonnull NSProgressThroughputKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressThroughputKey", "__Internal")]
		NSString NSProgressThroughputKey { get; }

		// extern const NSProgressKind _Nonnull NSProgressKindFile __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressKindFile", "__Internal")]
		NSString NSProgressKindFile { get; }

		// extern const NSProgressUserInfoKey _Nonnull NSProgressFileOperationKindKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressFileOperationKindKey", "__Internal")]
		NSString NSProgressFileOperationKindKey { get; }

		// extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindDownloading __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressFileOperationKindDownloading", "__Internal")]
		NSString NSProgressFileOperationKindDownloading { get; }

		// extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindDecompressingAfterDownloading __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressFileOperationKindDecompressingAfterDownloading", "__Internal")]
		NSString NSProgressFileOperationKindDecompressingAfterDownloading { get; }

		// extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindReceiving __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressFileOperationKindReceiving", "__Internal")]
		NSString NSProgressFileOperationKindReceiving { get; }

		// extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindCopying __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressFileOperationKindCopying", "__Internal")]
		NSString NSProgressFileOperationKindCopying { get; }

		// extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindUploading __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSProgressFileOperationKindUploading", "__Internal")]
		NSString NSProgressFileOperationKindUploading { get; }

		// extern const NSProgressFileOperationKind _Nonnull NSProgressFileOperationKindDuplicating __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSProgressFileOperationKindDuplicating", "__Internal")]
		NSString NSProgressFileOperationKindDuplicating { get; }

		// extern const NSProgressUserInfoKey _Nonnull NSProgressFileURLKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressFileURLKey", "__Internal")]
		NSString NSProgressFileURLKey { get; }

		// extern const NSProgressUserInfoKey _Nonnull NSProgressFileTotalCountKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressFileTotalCountKey", "__Internal")]
		NSString NSProgressFileTotalCountKey { get; }

		// extern const NSProgressUserInfoKey _Nonnull NSProgressFileCompletedCountKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSProgressFileCompletedCountKey", "__Internal")]
		NSString NSProgressFileCompletedCountKey { get; }

		// extern API_AVAILABLE(macos(10.9)) const NSProgressUserInfoKey NSProgressFileAnimationImageKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSProgressFileAnimationImageKey", "__Internal")]
		NSString NSProgressFileAnimationImageKey { get; }

		// extern API_AVAILABLE(macos(10.9)) const NSProgressUserInfoKey NSProgressFileAnimationImageOriginalRectKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSProgressFileAnimationImageOriginalRectKey", "__Internal")]
		NSString NSProgressFileAnimationImageOriginalRectKey { get; }

		// extern API_AVAILABLE(macos(10.9)) const NSProgressUserInfoKey NSProgressFileIconKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSProgressFileIconKey", "__Internal")]
		NSString NSProgressFileIconKey { get; }
	}

	// @interface NSNotification : NSObject <NSCopying, NSCoding>
	[BaseType (typeof(NSObject))]
	interface NSNotification : INSCopying, INSCoding
	{
		// @property (readonly, copy) NSNotificationName _Nonnull name;
		[Export ("name")]
		string Name { get; }

		// @property (readonly, retain) id _Nullable object;
		[NullAllowed, Export ("object", ArgumentSemantic.Retain)]
		NSObject Object { get; }

		// @property (readonly, copy) NSDictionary * _Nullable userInfo;
		[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary UserInfo { get; }

		// -(instancetype _Nonnull)initWithName:(NSNotificationName _Nonnull)name object:(id _Nullable)object userInfo:(NSDictionary * _Nullable)userInfo __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initWithName:object:userInfo:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string name, [NullAllowed] NSObject @object, [NullAllowed] NSDictionary userInfo);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSNotificationCreation (NSNotification)
	[Category]
	[BaseType (typeof(NSNotification))]
	interface NSNotification_NSNotificationCreation
	{
		// +(instancetype _Nonnull)notificationWithName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject;
		[Static]
		[Export ("notificationWithName:object:")]
		NSNotification NotificationWithName (string aName, [NullAllowed] NSObject anObject);

		// +(instancetype _Nonnull)notificationWithName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject userInfo:(NSDictionary * _Nullable)aUserInfo;
		[Static]
		[Export ("notificationWithName:object:userInfo:")]
		NSNotification NotificationWithName (string aName, [NullAllowed] NSObject anObject, [NullAllowed] NSDictionary aUserInfo);
	}

	// @interface NSNotificationCenter : NSObject
	[BaseType (typeof(NSObject))]
	interface NSNotificationCenter
	{
		// @property (readonly, strong, class) NSNotificationCenter * _Nonnull defaultCenter;
		[Static]
		[Export ("defaultCenter", ArgumentSemantic.Strong)]
		NSNotificationCenter DefaultCenter { get; }

		// -(void)addObserver:(id _Nonnull)observer selector:(SEL _Nonnull)aSelector name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
		[Export ("addObserver:selector:name:object:")]
		void AddObserver (NSObject observer, Selector aSelector, [NullAllowed] string aName, [NullAllowed] NSObject anObject);

		// -(void)postNotification:(NSNotification * _Nonnull)notification;
		[Export ("postNotification:")]
		void PostNotification (NSNotification notification);

		// -(void)postNotificationName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject;
		[Export ("postNotificationName:object:")]
		void PostNotificationName (string aName, [NullAllowed] NSObject anObject);

		// -(void)postNotificationName:(NSNotificationName _Nonnull)aName object:(id _Nullable)anObject userInfo:(NSDictionary * _Nullable)aUserInfo;
		[Export ("postNotificationName:object:userInfo:")]
		void PostNotificationName (string aName, [NullAllowed] NSObject anObject, [NullAllowed] NSDictionary aUserInfo);

		// -(void)removeObserver:(id _Nonnull)observer;
		[Export ("removeObserver:")]
		void RemoveObserver (NSObject observer);

		// -(void)removeObserver:(id _Nonnull)observer name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
		[Export ("removeObserver:name:object:")]
		void RemoveObserver (NSObject observer, [NullAllowed] string aName, [NullAllowed] NSObject anObject);

		// -(id<NSObject> _Nonnull)addObserverForName:(NSNotificationName _Nullable)name object:(id _Nullable)obj queue:(NSOperationQueue * _Nullable)queue usingBlock:(void (^ _Nonnull)(NSNotification * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("addObserverForName:object:queue:usingBlock:")]
		NSObject AddObserverForName ([NullAllowed] string name, [NullAllowed] NSObject obj, [NullAllowed] NSOperationQueue queue, Action<NSNotification> block);
	}

	// @interface NSBundle : NSObject
	[BaseType (typeof(NSObject))]
	interface NSBundle
	{
		// @property (readonly, strong, class) NSBundle * _Nonnull mainBundle;
		[Static]
		[Export ("mainBundle", ArgumentSemantic.Strong)]
		NSBundle MainBundle { get; }

		// +(instancetype _Nullable)bundleWithPath:(NSString * _Nonnull)path;
		[Static]
		[Export ("bundleWithPath:")]
		[return: NullAllowed]
		NSBundle BundleWithPath (string path);

		// -(instancetype _Nullable)initWithPath:(NSString * _Nonnull)path __attribute__((objc_designated_initializer));
		[Export ("initWithPath:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string path);

		// +(instancetype _Nullable)bundleWithURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("bundleWithURL:")]
		[return: NullAllowed]
		NSBundle BundleWithURL (NSURL url);

		// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initWithURL:")]
		NativeHandle Constructor (NSURL url);

		// +(NSBundle * _Nonnull)bundleForClass:(Class _Nonnull)aClass;
		[Static]
		[Export ("bundleForClass:")]
		NSBundle BundleForClass (Class aClass);

		// +(NSBundle * _Nullable)bundleWithIdentifier:(NSString * _Nonnull)identifier;
		[Static]
		[Export ("bundleWithIdentifier:")]
		[return: NullAllowed]
		NSBundle BundleWithIdentifier (string identifier);

		// @property (readonly, copy, class) NSArray<NSBundle *> * _Nonnull allBundles;
		[Static]
		[Export ("allBundles", ArgumentSemantic.Copy)]
		NSBundle[] AllBundles { get; }

		// @property (readonly, copy, class) NSArray<NSBundle *> * _Nonnull allFrameworks;
		[Static]
		[Export ("allFrameworks", ArgumentSemantic.Copy)]
		NSBundle[] AllFrameworks { get; }

		// -(BOOL)load;
		[Export ("load")]
		bool Load { get; }

		// @property (readonly, getter = isLoaded) BOOL loaded;
		[Export ("loaded")]
		bool Loaded { [Bind ("isLoaded")] get; }

		// -(BOOL)unload;
		[Export ("unload")]
		bool Unload { get; }

		// -(BOOL)preflightAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("preflightAndReturnError:")]
		bool PreflightAndReturnError ([NullAllowed] out NSError error);

		// -(BOOL)loadAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("loadAndReturnError:")]
		bool LoadAndReturnError ([NullAllowed] out NSError error);

		// @property (readonly, copy) NSURL * _Nonnull bundleURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("bundleURL", ArgumentSemantic.Copy)]
		NSURL BundleURL { get; }

		// @property (readonly, copy) NSURL * _Nullable resourceURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("resourceURL", ArgumentSemantic.Copy)]
		NSURL ResourceURL { get; }

		// @property (readonly, copy) NSURL * _Nullable executableURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("executableURL", ArgumentSemantic.Copy)]
		NSURL ExecutableURL { get; }

		// -(NSURL * _Nullable)URLForAuxiliaryExecutable:(NSString * _Nonnull)executableName __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLForAuxiliaryExecutable:")]
		[return: NullAllowed]
		NSURL URLForAuxiliaryExecutable (string executableName);

		// @property (readonly, copy) NSURL * _Nullable privateFrameworksURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("privateFrameworksURL", ArgumentSemantic.Copy)]
		NSURL PrivateFrameworksURL { get; }

		// @property (readonly, copy) NSURL * _Nullable sharedFrameworksURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("sharedFrameworksURL", ArgumentSemantic.Copy)]
		NSURL SharedFrameworksURL { get; }

		// @property (readonly, copy) NSURL * _Nullable sharedSupportURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("sharedSupportURL", ArgumentSemantic.Copy)]
		NSURL SharedSupportURL { get; }

		// @property (readonly, copy) NSURL * _Nullable builtInPlugInsURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("builtInPlugInsURL", ArgumentSemantic.Copy)]
		NSURL BuiltInPlugInsURL { get; }

		// @property (readonly, copy) NSURL * _Nullable appStoreReceiptURL __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (7, 0)]
		[NullAllowed, Export ("appStoreReceiptURL", ArgumentSemantic.Copy)]
		NSURL AppStoreReceiptURL { get; }

		// @property (readonly, copy) NSString * _Nonnull bundlePath;
		[Export ("bundlePath")]
		string BundlePath { get; }

		// @property (readonly, copy) NSString * _Nullable resourcePath;
		[NullAllowed, Export ("resourcePath")]
		string ResourcePath { get; }

		// @property (readonly, copy) NSString * _Nullable executablePath;
		[NullAllowed, Export ("executablePath")]
		string ExecutablePath { get; }

		// -(NSString * _Nullable)pathForAuxiliaryExecutable:(NSString * _Nonnull)executableName;
		[Export ("pathForAuxiliaryExecutable:")]
		[return: NullAllowed]
		string PathForAuxiliaryExecutable (string executableName);

		// @property (readonly, copy) NSString * _Nullable privateFrameworksPath;
		[NullAllowed, Export ("privateFrameworksPath")]
		string PrivateFrameworksPath { get; }

		// @property (readonly, copy) NSString * _Nullable sharedFrameworksPath;
		[NullAllowed, Export ("sharedFrameworksPath")]
		string SharedFrameworksPath { get; }

		// @property (readonly, copy) NSString * _Nullable sharedSupportPath;
		[NullAllowed, Export ("sharedSupportPath")]
		string SharedSupportPath { get; }

		// @property (readonly, copy) NSString * _Nullable builtInPlugInsPath;
		[NullAllowed, Export ("builtInPlugInsPath")]
		string BuiltInPlugInsPath { get; }

		// +(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath inBundleWithURL:(NSURL * _Nonnull)bundleURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("URLForResource:withExtension:subdirectory:inBundleWithURL:")]
		[return: NullAllowed]
		NSURL URLForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, NSURL bundleURL);

		// +(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath inBundleWithURL:(NSURL * _Nonnull)bundleURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:")]
		[return: NullAllowed]
		NSURL[] URLsForResourcesWithExtension ([NullAllowed] string ext, [NullAllowed] string subpath, NSURL bundleURL);

		// -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLForResource:withExtension:")]
		[return: NullAllowed]
		NSURL URLForResource ([NullAllowed] string name, [NullAllowed] string ext);

		// -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLForResource:withExtension:subdirectory:")]
		[return: NullAllowed]
		NSURL URLForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath);

		// -(NSURL * _Nullable)URLForResource:(NSString * _Nullable)name withExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath localization:(NSString * _Nullable)localizationName __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLForResource:withExtension:subdirectory:localization:")]
		[return: NullAllowed]
		NSURL URLForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

		// -(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLsForResourcesWithExtension:subdirectory:")]
		[return: NullAllowed]
		NSURL[] URLsForResourcesWithExtension ([NullAllowed] string ext, [NullAllowed] string subpath);

		// -(NSArray<NSURL *> * _Nullable)URLsForResourcesWithExtension:(NSString * _Nullable)ext subdirectory:(NSString * _Nullable)subpath localization:(NSString * _Nullable)localizationName __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLsForResourcesWithExtension:subdirectory:localization:")]
		[return: NullAllowed]
		NSURL[] URLsForResourcesWithExtension ([NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

		// +(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nonnull)bundlePath;
		[Static]
		[Export ("pathForResource:ofType:inDirectory:")]
		[return: NullAllowed]
		string PathForResource ([NullAllowed] string name, [NullAllowed] string ext, string bundlePath);

		// +(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nonnull)bundlePath;
		[Static]
		[Export ("pathsForResourcesOfType:inDirectory:")]
		string[] PathsForResourcesOfType ([NullAllowed] string ext, string bundlePath);

		// -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext;
		[Export ("pathForResource:ofType:")]
		[return: NullAllowed]
		string PathForResource ([NullAllowed] string name, [NullAllowed] string ext);

		// -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath;
		[Export ("pathForResource:ofType:inDirectory:")]
		[return: NullAllowed]
		string PathForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath);

		// -(NSString * _Nullable)pathForResource:(NSString * _Nullable)name ofType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath forLocalization:(NSString * _Nullable)localizationName;
		[Export ("pathForResource:ofType:inDirectory:forLocalization:")]
		[return: NullAllowed]
		string PathForResource ([NullAllowed] string name, [NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

		// -(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath;
		[Export ("pathsForResourcesOfType:inDirectory:")]
		string[] PathsForResourcesOfType ([NullAllowed] string ext, [NullAllowed] string subpath);

		// -(NSArray<NSString *> * _Nonnull)pathsForResourcesOfType:(NSString * _Nullable)ext inDirectory:(NSString * _Nullable)subpath forLocalization:(NSString * _Nullable)localizationName;
		[Export ("pathsForResourcesOfType:inDirectory:forLocalization:")]
		string[] PathsForResourcesOfType ([NullAllowed] string ext, [NullAllowed] string subpath, [NullAllowed] string localizationName);

		// -(NSString * _Nonnull)localizedStringForKey:(NSString * _Nonnull)key value:(NSString * _Nullable)value table:(NSString * _Nullable)tableName __attribute__((format_arg(1)));
		[Export ("localizedStringForKey:value:table:")]
		string LocalizedStringForKey (string key, [NullAllowed] string value, [NullAllowed] string tableName);

		// -(NSAttributedString * _Nonnull)localizedAttributedStringForKey:(NSString * _Nonnull)key value:(NSString * _Nullable)value table:(NSString * _Nullable)tableName __attribute__((format_arg(1))) __attribute__((swift_private)) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Export ("localizedAttributedStringForKey:value:table:")]
		NSAttributedString LocalizedAttributedStringForKey (string key, [NullAllowed] string value, [NullAllowed] string tableName);

		// @property (readonly, copy) NSString * _Nullable bundleIdentifier;
		[NullAllowed, Export ("bundleIdentifier")]
		string BundleIdentifier { get; }

		// @property (readonly, copy) NSDictionary<NSString *,id> * _Nullable infoDictionary;
		[NullAllowed, Export ("infoDictionary", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> InfoDictionary { get; }

		// @property (readonly, copy) NSDictionary<NSString *,id> * _Nullable localizedInfoDictionary;
		[NullAllowed, Export ("localizedInfoDictionary", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> LocalizedInfoDictionary { get; }

		// -(id _Nullable)objectForInfoDictionaryKey:(NSString * _Nonnull)key;
		[Export ("objectForInfoDictionaryKey:")]
		[return: NullAllowed]
		NSObject ObjectForInfoDictionaryKey (string key);

		// -(Class _Nullable)classNamed:(NSString * _Nonnull)className;
		[Export ("classNamed:")]
		[return: NullAllowed]
		Class ClassNamed (string className);

		// @property (readonly) Class _Nullable principalClass;
		[NullAllowed, Export ("principalClass")]
		Class PrincipalClass { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull preferredLocalizations;
		[Export ("preferredLocalizations", ArgumentSemantic.Copy)]
		string[] PreferredLocalizations { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull localizations;
		[Export ("localizations", ArgumentSemantic.Copy)]
		string[] Localizations { get; }

		// @property (readonly, copy) NSString * _Nullable developmentLocalization;
		[NullAllowed, Export ("developmentLocalization")]
		string DevelopmentLocalization { get; }

		// +(NSArray<NSString *> * _Nonnull)preferredLocalizationsFromArray:(NSArray<NSString *> * _Nonnull)localizationsArray;
		[Static]
		[Export ("preferredLocalizationsFromArray:")]
		string[] PreferredLocalizationsFromArray (string[] localizationsArray);

		// +(NSArray<NSString *> * _Nonnull)preferredLocalizationsFromArray:(NSArray<NSString *> * _Nonnull)localizationsArray forPreferences:(NSArray<NSString *> * _Nullable)preferencesArray;
		[Static]
		[Export ("preferredLocalizationsFromArray:forPreferences:")]
		string[] PreferredLocalizationsFromArray (string[] localizationsArray, [NullAllowed] string[] preferencesArray);

		// @property (readonly, copy) NSArray<NSNumber *> * _Nullable executableArchitectures __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("executableArchitectures", ArgumentSemantic.Copy)]
		NSNumber[] ExecutableArchitectures { get; }
	}

	// @interface NSBundleExtensionMethods (NSString)
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSBundleExtensionMethods
	{
		// -(NSString * _Nonnull)variantFittingPresentationWidth:(NSInteger)width __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("variantFittingPresentationWidth:")]
		string VariantFittingPresentationWidth (nint width);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSBundleDidLoadNotification;
		[Field ("NSBundleDidLoadNotification", "__Internal")]
		NSString NSBundleDidLoadNotification { get; }

		// extern NSString *const _Nonnull NSLoadedClasses;
		[Field ("NSLoadedClasses", "__Internal")]
		NSString NSLoadedClasses { get; }
	}

	// @interface NSBundleResourceRequest : NSObject <NSProgressReporting>
	[Watch (2,0), TV (9,0), NoMac, iOS (9,0)]
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface NSBundleResourceRequest : INSProgressReporting
	{
		// -(instancetype _Nonnull)initWithTags:(NSSet<NSString *> * _Nonnull)tags;
		[Export ("initWithTags:")]
		NativeHandle Constructor (NSSet<NSString> tags);

		// -(instancetype _Nonnull)initWithTags:(NSSet<NSString *> * _Nonnull)tags bundle:(NSBundle * _Nonnull)bundle __attribute__((objc_designated_initializer));
		[Export ("initWithTags:bundle:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSSet<NSString> tags, NSBundle bundle);

		// @property double loadingPriority;
		[Export ("loadingPriority")]
		double LoadingPriority { get; set; }

		// @property (readonly, copy) NSSet<NSString *> * _Nonnull tags;
		[Export ("tags", ArgumentSemantic.Copy)]
		NSSet<NSString> Tags { get; }

		// @property (readonly, strong) NSBundle * _Nonnull bundle;
		[Export ("bundle", ArgumentSemantic.Strong)]
		NSBundle Bundle { get; }

		// -(void)beginAccessingResourcesWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
		[Export ("beginAccessingResourcesWithCompletionHandler:")]
		void BeginAccessingResourcesWithCompletionHandler (Action<NSError> completionHandler);

		// -(void)conditionallyBeginAccessingResourcesWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
		[Export ("conditionallyBeginAccessingResourcesWithCompletionHandler:")]
		void ConditionallyBeginAccessingResourcesWithCompletionHandler (Action<bool> completionHandler);

		// -(void)endAccessingResources;
		[Export ("endAccessingResources")]
		void EndAccessingResources ();

		// @property (readonly, strong) NSProgress * _Nonnull progress;
		[Export ("progress", ArgumentSemantic.Strong)]
		NSProgress Progress { get; }
	}

	// @interface NSBundleResourceRequestAdditions (NSBundle)
	[Category]
	[BaseType (typeof(NSBundle))]
	interface NSBundle_NSBundleResourceRequestAdditions
	{
		// -(void)setPreservationPriority:(double)priority forTags:(NSSet<NSString *> * _Nonnull)tags __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2,0), TV (9,0), NoMac, iOS (9,0)]
		[Export ("setPreservationPriority:forTags:")]
		void SetPreservationPriority (double priority, NSSet<NSString> tags);

		// -(double)preservationPriorityForTag:(NSString * _Nonnull)tag __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2,0), TV (9,0), NoMac, iOS (9,0)]
		[Export ("preservationPriorityForTag:")]
		double PreservationPriorityForTag (string tag);
	}

	[Static]
	partial interface Constants
	{
		// extern API_UNAVAILABLE(macos) const NSNotificationName NSBundleResourceRequestLowDiskSpaceNotification __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
		[Field ("NSBundleResourceRequestLowDiskSpaceNotification", "__Internal")]
		NSString NSBundleResourceRequestLowDiskSpaceNotification { get; }

		// extern const double NSBundleResourceRequestLoadingPriorityUrgent __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 0)]
		[Field ("NSBundleResourceRequestLoadingPriorityUrgent", "__Internal")]
		double NSBundleResourceRequestLoadingPriorityUrgent { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSSystemClockDidChangeNotification __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSSystemClockDidChangeNotification", "__Internal")]
		NSString NSSystemClockDidChangeNotification { get; }
	}

	// @interface NSDate : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSDate : INSCopying, INSSecureCoding
	{
		// @property (readonly) NSTimeInterval timeIntervalSinceReferenceDate;
		[Export ("timeIntervalSinceReferenceDate")]
		double TimeIntervalSinceReferenceDate { get; }

		// -(instancetype _Nonnull)initWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti __attribute__((objc_designated_initializer));
		[Export ("initWithTimeIntervalSinceReferenceDate:")]
		[DesignatedInitializer]
		NativeHandle Constructor (double ti);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSExtendedDate (NSDate)
	[Category]
	[BaseType (typeof(NSDate))]
	interface NSDate_NSExtendedDate
	{
		// -(NSTimeInterval)timeIntervalSinceDate:(NSDate * _Nonnull)anotherDate;
		[Export ("timeIntervalSinceDate:")]
		double TimeIntervalSinceDate (NSDate anotherDate);

		// @property (readonly) NSTimeInterval timeIntervalSinceNow;
		[Export ("timeIntervalSinceNow")]
		double TimeIntervalSinceNow { get; }

		// @property (readonly) NSTimeInterval timeIntervalSince1970;
		[Export ("timeIntervalSince1970")]
		double TimeIntervalSince1970 { get; }

		// -(id _Nonnull)addTimeInterval:(NSTimeInterval)seconds __attribute__((availability(macos, introduced=10.0, deprecated=10.6))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use dateByAddingTimeInterval instead")]
		[Deprecated (PlatformName.MacOSX, 10, 6, message: "Use dateByAddingTimeInterval instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
		[Deprecated (PlatformName.iOS, 4, 0, message: "Use dateByAddingTimeInterval instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use dateByAddingTimeInterval instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use dateByAddingTimeInterval instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use dateByAddingTimeInterval instead")]
		[Export ("addTimeInterval:")]
		NSObject AddTimeInterval (double seconds);

		// -(instancetype _Nonnull)dateByAddingTimeInterval:(NSTimeInterval)ti __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (2,0)]
		[Export ("dateByAddingTimeInterval:")]
		NSDate DateByAddingTimeInterval (double ti);

		// -(NSDate * _Nonnull)earlierDate:(NSDate * _Nonnull)anotherDate;
		[Export ("earlierDate:")]
		NSDate EarlierDate (NSDate anotherDate);

		// -(NSDate * _Nonnull)laterDate:(NSDate * _Nonnull)anotherDate;
		[Export ("laterDate:")]
		NSDate LaterDate (NSDate anotherDate);

		// -(NSComparisonResult)compare:(NSDate * _Nonnull)other;
		[Export ("compare:")]
		NSComparisonResult Compare (NSDate other);

		// -(BOOL)isEqualToDate:(NSDate * _Nonnull)otherDate;
		[Export ("isEqualToDate:")]
		bool IsEqualToDate (NSDate otherDate);

		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
		[Export ("descriptionWithLocale:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale);

		// @property (readonly, class) NSTimeInterval timeIntervalSinceReferenceDate;
		[Static]
		[Export ("timeIntervalSinceReferenceDate")]
		double TimeIntervalSinceReferenceDate { get; }
	}

	// @interface NSDateCreation (NSDate)
	[Category]
	[BaseType (typeof(NSDate))]
	interface NSDate_NSDateCreation
	{
		// +(instancetype _Nonnull)date;
		[Static]
		[Export ("date")]
		NSDate Date ();

		// +(instancetype _Nonnull)dateWithTimeIntervalSinceNow:(NSTimeInterval)secs;
		[Static]
		[Export ("dateWithTimeIntervalSinceNow:")]
		NSDate DateWithTimeIntervalSinceNow (double secs);

		// +(instancetype _Nonnull)dateWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti;
		[Static]
		[Export ("dateWithTimeIntervalSinceReferenceDate:")]
		NSDate DateWithTimeIntervalSinceReferenceDate (double ti);

		// +(instancetype _Nonnull)dateWithTimeIntervalSince1970:(NSTimeInterval)secs;
		[Static]
		[Export ("dateWithTimeIntervalSince1970:")]
		NSDate DateWithTimeIntervalSince1970 (double secs);

		// +(instancetype _Nonnull)dateWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate * _Nonnull)date;
		[Static]
		[Export ("dateWithTimeInterval:sinceDate:")]
		NSDate DateWithTimeInterval (double secsToBeAdded, NSDate date);

		// @property (readonly, copy, class) NSDate * _Nonnull distantFuture;
		[Static]
		[Export ("distantFuture", ArgumentSemantic.Copy)]
		NSDate DistantFuture { get; }

		// @property (readonly, copy, class) NSDate * _Nonnull distantPast;
		[Static]
		[Export ("distantPast", ArgumentSemantic.Copy)]
		NSDate DistantPast { get; }

		// @property (readonly, copy, class) NSDate * _Nonnull now __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Static]
		[Export ("now", ArgumentSemantic.Copy)]
		NSDate Now { get; }

		// -(instancetype _Nonnull)initWithTimeIntervalSinceNow:(NSTimeInterval)secs;
		[Export ("initWithTimeIntervalSinceNow:")]
		NativeHandle Constructor (double secs);

		// -(instancetype _Nonnull)initWithTimeIntervalSince1970:(NSTimeInterval)secs;
		[Export ("initWithTimeIntervalSince1970:")]
		NativeHandle Constructor (double secs);

		// -(instancetype _Nonnull)initWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate * _Nonnull)date;
		[Export ("initWithTimeInterval:sinceDate:")]
		NativeHandle Constructor (double secsToBeAdded, NSDate date);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierGregorian __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierGregorian", "__Internal")]
		NSString NSCalendarIdentifierGregorian { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierBuddhist __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierBuddhist", "__Internal")]
		NSString NSCalendarIdentifierBuddhist { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierChinese __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierChinese", "__Internal")]
		NSString NSCalendarIdentifierChinese { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierCoptic __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierCoptic", "__Internal")]
		NSString NSCalendarIdentifierCoptic { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierEthiopicAmeteMihret __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierEthiopicAmeteMihret", "__Internal")]
		NSString NSCalendarIdentifierEthiopicAmeteMihret { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierEthiopicAmeteAlem __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierEthiopicAmeteAlem", "__Internal")]
		NSString NSCalendarIdentifierEthiopicAmeteAlem { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierHebrew __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierHebrew", "__Internal")]
		NSString NSCalendarIdentifierHebrew { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierISO8601 __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierISO8601", "__Internal")]
		NSString NSCalendarIdentifierISO8601 { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIndian __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierIndian", "__Internal")]
		NSString NSCalendarIdentifierIndian { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIslamic __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierIslamic", "__Internal")]
		NSString NSCalendarIdentifierIslamic { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIslamicCivil __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierIslamicCivil", "__Internal")]
		NSString NSCalendarIdentifierIslamicCivil { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierJapanese __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierJapanese", "__Internal")]
		NSString NSCalendarIdentifierJapanese { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierPersian __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierPersian", "__Internal")]
		NSString NSCalendarIdentifierPersian { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierRepublicOfChina __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSCalendarIdentifierRepublicOfChina", "__Internal")]
		NSString NSCalendarIdentifierRepublicOfChina { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIslamicTabular __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSCalendarIdentifierIslamicTabular", "__Internal")]
		NSString NSCalendarIdentifierIslamicTabular { get; }

		// extern const NSCalendarIdentifier _Nonnull NSCalendarIdentifierIslamicUmmAlQura __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSCalendarIdentifierIslamicUmmAlQura", "__Internal")]
		NSString NSCalendarIdentifierIslamicUmmAlQura { get; }
	}

	// @interface NSCalendar : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface NSCalendar : INSCopying, INSSecureCoding
	{
		// @property (readonly, copy, class) NSCalendar * _Nonnull currentCalendar;
		[Static]
		[Export ("currentCalendar", ArgumentSemantic.Copy)]
		NSCalendar CurrentCalendar { get; }

		// @property (readonly, strong, class) NSCalendar * _Nonnull autoupdatingCurrentCalendar __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("autoupdatingCurrentCalendar", ArgumentSemantic.Strong)]
		NSCalendar AutoupdatingCurrentCalendar { get; }

		// +(NSCalendar * _Nullable)calendarWithIdentifier:(NSCalendarIdentifier _Nonnull)calendarIdentifierConstant __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Static]
		[Export ("calendarWithIdentifier:")]
		[return: NullAllowed]
		NSCalendar CalendarWithIdentifier (string calendarIdentifierConstant);

		// -(id _Nullable)initWithCalendarIdentifier:(NSCalendarIdentifier _Nonnull)ident __attribute__((objc_designated_initializer));
		[Export ("initWithCalendarIdentifier:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string ident);

		// @property (readonly, copy) NSCalendarIdentifier _Nonnull calendarIdentifier;
		[Export ("calendarIdentifier")]
		string CalendarIdentifier { get; }

		// @property (copy) NSLocale * _Nullable locale;
		[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
		NSLocale Locale { get; set; }

		// @property (copy) NSTimeZone * _Nonnull timeZone;
		[Export ("timeZone", ArgumentSemantic.Copy)]
		NSTimeZone TimeZone { get; set; }

		// @property NSUInteger firstWeekday;
		[Export ("firstWeekday")]
		nuint FirstWeekday { get; set; }

		// @property NSUInteger minimumDaysInFirstWeek;
		[Export ("minimumDaysInFirstWeek")]
		nuint MinimumDaysInFirstWeek { get; set; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull eraSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("eraSymbols", ArgumentSemantic.Copy)]
		string[] EraSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull longEraSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("longEraSymbols", ArgumentSemantic.Copy)]
		string[] LongEraSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull monthSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("monthSymbols", ArgumentSemantic.Copy)]
		string[] MonthSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortMonthSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("shortMonthSymbols", ArgumentSemantic.Copy)]
		string[] ShortMonthSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortMonthSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("veryShortMonthSymbols", ArgumentSemantic.Copy)]
		string[] VeryShortMonthSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneMonthSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("standaloneMonthSymbols", ArgumentSemantic.Copy)]
		string[] StandaloneMonthSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneMonthSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("shortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
		string[] ShortStandaloneMonthSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortStandaloneMonthSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("veryShortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
		string[] VeryShortStandaloneMonthSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull weekdaySymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("weekdaySymbols", ArgumentSemantic.Copy)]
		string[] WeekdaySymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortWeekdaySymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("shortWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] ShortWeekdaySymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortWeekdaySymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("veryShortWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] VeryShortWeekdaySymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("standaloneWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] StandaloneWeekdaySymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("shortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] ShortStandaloneWeekdaySymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull veryShortStandaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("veryShortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] VeryShortStandaloneWeekdaySymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull quarterSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("quarterSymbols", ArgumentSemantic.Copy)]
		string[] QuarterSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortQuarterSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("shortQuarterSymbols", ArgumentSemantic.Copy)]
		string[] ShortQuarterSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull standaloneQuarterSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("standaloneQuarterSymbols", ArgumentSemantic.Copy)]
		string[] StandaloneQuarterSymbols { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull shortStandaloneQuarterSymbols __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("shortStandaloneQuarterSymbols", ArgumentSemantic.Copy)]
		string[] ShortStandaloneQuarterSymbols { get; }

		// @property (readonly, copy) NSString * _Nonnull AMSymbol __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("AMSymbol")]
		string AMSymbol { get; }

		// @property (readonly, copy) NSString * _Nonnull PMSymbol __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("PMSymbol")]
		string PMSymbol { get; }

		// -(NSRange)minimumRangeOfUnit:(NSCalendarUnit)unit;
		[Export ("minimumRangeOfUnit:")]
		NSRange MinimumRangeOfUnit (NSCalendarUnit unit);

		// -(NSRange)maximumRangeOfUnit:(NSCalendarUnit)unit;
		[Export ("maximumRangeOfUnit:")]
		NSRange MaximumRangeOfUnit (NSCalendarUnit unit);

		// -(NSRange)rangeOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate * _Nonnull)date;
		[Export ("rangeOfUnit:inUnit:forDate:")]
		NSRange RangeOfUnit (NSCalendarUnit smaller, NSCalendarUnit larger, NSDate date);

		// -(NSUInteger)ordinalityOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate * _Nonnull)date;
		[Export ("ordinalityOfUnit:inUnit:forDate:")]
		nuint OrdinalityOfUnit (NSCalendarUnit smaller, NSCalendarUnit larger, NSDate date);

		// -(BOOL)rangeOfUnit:(NSCalendarUnit)unit startDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip forDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("rangeOfUnit:startDate:interval:forDate:")]
		unsafe bool RangeOfUnit (NSCalendarUnit unit, [NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSDate date);

		// -(NSDate * _Nullable)dateFromComponents:(NSDateComponents * _Nonnull)comps;
		[Export ("dateFromComponents:")]
		[return: NullAllowed]
		NSDate DateFromComponents (NSDateComponents comps);

		// -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDate:(NSDate * _Nonnull)date;
		[Export ("components:fromDate:")]
		NSDateComponents Components (NSCalendarUnit unitFlags, NSDate date);

		// -(NSDate * _Nullable)dateByAddingComponents:(NSDateComponents * _Nonnull)comps toDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts;
		[Export ("dateByAddingComponents:toDate:options:")]
		[return: NullAllowed]
		NSDate DateByAddingComponents (NSDateComponents comps, NSDate date, NSCalendarOptions opts);

		// -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDate:(NSDate * _Nonnull)startingDate toDate:(NSDate * _Nonnull)resultDate options:(NSCalendarOptions)opts;
		[Export ("components:fromDate:toDate:options:")]
		NSDateComponents Components (NSCalendarUnit unitFlags, NSDate startingDate, NSDate resultDate, NSCalendarOptions opts);

		// -(void)getEra:(NSInteger * _Nullable)eraValuePointer year:(NSInteger * _Nullable)yearValuePointer month:(NSInteger * _Nullable)monthValuePointer day:(NSInteger * _Nullable)dayValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("getEra:year:month:day:fromDate:")]
		unsafe void GetEra ([NullAllowed] nint* eraValuePointer, [NullAllowed] nint* yearValuePointer, [NullAllowed] nint* monthValuePointer, [NullAllowed] nint* dayValuePointer, NSDate date);

		// -(void)getEra:(NSInteger * _Nullable)eraValuePointer yearForWeekOfYear:(NSInteger * _Nullable)yearValuePointer weekOfYear:(NSInteger * _Nullable)weekValuePointer weekday:(NSInteger * _Nullable)weekdayValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:")]
		unsafe void GetEra ([NullAllowed] nint* eraValuePointer, [NullAllowed] nint* yearValuePointer, [NullAllowed] nint* weekValuePointer, [NullAllowed] nint* weekdayValuePointer, NSDate date);

		// -(void)getHour:(NSInteger * _Nullable)hourValuePointer minute:(NSInteger * _Nullable)minuteValuePointer second:(NSInteger * _Nullable)secondValuePointer nanosecond:(NSInteger * _Nullable)nanosecondValuePointer fromDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("getHour:minute:second:nanosecond:fromDate:")]
		unsafe void GetHour ([NullAllowed] nint* hourValuePointer, [NullAllowed] nint* minuteValuePointer, [NullAllowed] nint* secondValuePointer, [NullAllowed] nint* nanosecondValuePointer, NSDate date);

		// -(NSInteger)component:(NSCalendarUnit)unit fromDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("component:fromDate:")]
		nint Component (NSCalendarUnit unit, NSDate date);

		// -(NSDate * _Nullable)dateWithEra:(NSInteger)eraValue year:(NSInteger)yearValue month:(NSInteger)monthValue day:(NSInteger)dayValue hour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue nanosecond:(NSInteger)nanosecondValue __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("dateWithEra:year:month:day:hour:minute:second:nanosecond:")]
		[return: NullAllowed]
		NSDate DateWithEra (nint eraValue, nint yearValue, nint monthValue, nint dayValue, nint hourValue, nint minuteValue, nint secondValue, nint nanosecondValue);

		// -(NSDate * _Nullable)dateWithEra:(NSInteger)eraValue yearForWeekOfYear:(NSInteger)yearValue weekOfYear:(NSInteger)weekValue weekday:(NSInteger)weekdayValue hour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue nanosecond:(NSInteger)nanosecondValue __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:")]
		[return: NullAllowed]
		NSDate DateWithEra (nint eraValue, nint yearValue, nint weekValue, nint weekdayValue, nint hourValue, nint minuteValue, nint secondValue, nint nanosecondValue);

		// -(NSDate * _Nonnull)startOfDayForDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("startOfDayForDate:")]
		NSDate StartOfDayForDate (NSDate date);

		// -(NSDateComponents * _Nonnull)componentsInTimeZone:(NSTimeZone * _Nonnull)timezone fromDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("componentsInTimeZone:fromDate:")]
		NSDateComponents ComponentsInTimeZone (NSTimeZone timezone, NSDate date);

		// -(NSComparisonResult)compareDate:(NSDate * _Nonnull)date1 toDate:(NSDate * _Nonnull)date2 toUnitGranularity:(NSCalendarUnit)unit __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("compareDate:toDate:toUnitGranularity:")]
		NSComparisonResult CompareDate (NSDate date1, NSDate date2, NSCalendarUnit unit);

		// -(BOOL)isDate:(NSDate * _Nonnull)date1 equalToDate:(NSDate * _Nonnull)date2 toUnitGranularity:(NSCalendarUnit)unit __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("isDate:equalToDate:toUnitGranularity:")]
		bool IsDate (NSDate date1, NSDate date2, NSCalendarUnit unit);

		// -(BOOL)isDate:(NSDate * _Nonnull)date1 inSameDayAsDate:(NSDate * _Nonnull)date2 __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("isDate:inSameDayAsDate:")]
		bool IsDate (NSDate date1, NSDate date2);

		// -(BOOL)isDateInToday:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("isDateInToday:")]
		bool IsDateInToday (NSDate date);

		// -(BOOL)isDateInYesterday:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("isDateInYesterday:")]
		bool IsDateInYesterday (NSDate date);

		// -(BOOL)isDateInTomorrow:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("isDateInTomorrow:")]
		bool IsDateInTomorrow (NSDate date);

		// -(BOOL)isDateInWeekend:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("isDateInWeekend:")]
		bool IsDateInWeekend (NSDate date);

		// -(BOOL)rangeOfWeekendStartDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip containingDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("rangeOfWeekendStartDate:interval:containingDate:")]
		unsafe bool RangeOfWeekendStartDate ([NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSDate date);

		// -(BOOL)nextWeekendStartDate:(NSDate * _Nullable * _Nullable)datep interval:(NSTimeInterval * _Nullable)tip options:(NSCalendarOptions)options afterDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("nextWeekendStartDate:interval:options:afterDate:")]
		unsafe bool NextWeekendStartDate ([NullAllowed] out NSDate datep, [NullAllowed] double* tip, NSCalendarOptions options, NSDate date);

		// -(NSDateComponents * _Nonnull)components:(NSCalendarUnit)unitFlags fromDateComponents:(NSDateComponents * _Nonnull)startingDateComp toDateComponents:(NSDateComponents * _Nonnull)resultDateComp options:(NSCalendarOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("components:fromDateComponents:toDateComponents:options:")]
		NSDateComponents Components (NSCalendarUnit unitFlags, NSDateComponents startingDateComp, NSDateComponents resultDateComp, NSCalendarOptions options);

		// -(NSDate * _Nullable)dateByAddingUnit:(NSCalendarUnit)unit value:(NSInteger)value toDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("dateByAddingUnit:value:toDate:options:")]
		[return: NullAllowed]
		NSDate DateByAddingUnit (NSCalendarUnit unit, nint value, NSDate date, NSCalendarOptions options);

		// -(void)enumerateDatesStartingAfterDate:(NSDate * _Nonnull)start matchingComponents:(NSDateComponents * _Nonnull)comps options:(NSCalendarOptions)opts usingBlock:(void (^ _Nonnull)(NSDate * _Nullable, BOOL, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:")]
		unsafe void EnumerateDatesStartingAfterDate (NSDate start, NSDateComponents comps, NSCalendarOptions opts, Action<NSDate, bool, bool*> block);

		// -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingComponents:(NSDateComponents * _Nonnull)comps options:(NSCalendarOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("nextDateAfterDate:matchingComponents:options:")]
		[return: NullAllowed]
		NSDate NextDateAfterDate (NSDate date, NSDateComponents comps, NSCalendarOptions options);

		// -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingUnit:(NSCalendarUnit)unit value:(NSInteger)value options:(NSCalendarOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("nextDateAfterDate:matchingUnit:value:options:")]
		[return: NullAllowed]
		NSDate NextDateAfterDate (NSDate date, NSCalendarUnit unit, nint value, NSCalendarOptions options);

		// -(NSDate * _Nullable)nextDateAfterDate:(NSDate * _Nonnull)date matchingHour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue options:(NSCalendarOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("nextDateAfterDate:matchingHour:minute:second:options:")]
		[return: NullAllowed]
		NSDate NextDateAfterDate (NSDate date, nint hourValue, nint minuteValue, nint secondValue, NSCalendarOptions options);

		// -(NSDate * _Nullable)dateBySettingUnit:(NSCalendarUnit)unit value:(NSInteger)v ofDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("dateBySettingUnit:value:ofDate:options:")]
		[return: NullAllowed]
		NSDate DateBySettingUnit (NSCalendarUnit unit, nint v, NSDate date, NSCalendarOptions opts);

		// -(NSDate * _Nullable)dateBySettingHour:(NSInteger)h minute:(NSInteger)m second:(NSInteger)s ofDate:(NSDate * _Nonnull)date options:(NSCalendarOptions)opts __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("dateBySettingHour:minute:second:ofDate:options:")]
		[return: NullAllowed]
		NSDate DateBySettingHour (nint h, nint m, nint s, NSDate date, NSCalendarOptions opts);

		// -(BOOL)date:(NSDate * _Nonnull)date matchesComponents:(NSDateComponents * _Nonnull)components __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("date:matchesComponents:")]
		bool Date (NSDate date, NSDateComponents components);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSCalendarDayChangedNotification __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[Field ("NSCalendarDayChangedNotification", "__Internal")]
		NSString NSCalendarDayChangedNotification { get; }
	}

	// @interface NSDateComponents : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSDateComponents : INSCopying, INSSecureCoding
	{
		// @property (copy) NSCalendar * _Nullable calendar __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[NullAllowed, Export ("calendar", ArgumentSemantic.Copy)]
		NSCalendar Calendar { get; set; }

		// @property (copy) NSTimeZone * _Nullable timeZone __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
		NSTimeZone TimeZone { get; set; }

		// @property NSInteger era;
		[Export ("era")]
		nint Era { get; set; }

		// @property NSInteger year;
		[Export ("year")]
		nint Year { get; set; }

		// @property NSInteger month;
		[Export ("month")]
		nint Month { get; set; }

		// @property NSInteger day;
		[Export ("day")]
		nint Day { get; set; }

		// @property NSInteger hour;
		[Export ("hour")]
		nint Hour { get; set; }

		// @property NSInteger minute;
		[Export ("minute")]
		nint Minute { get; set; }

		// @property NSInteger second;
		[Export ("second")]
		nint Second { get; set; }

		// @property NSInteger nanosecond __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("nanosecond")]
		nint Nanosecond { get; set; }

		// @property NSInteger weekday;
		[Export ("weekday")]
		nint Weekday { get; set; }

		// @property NSInteger weekdayOrdinal;
		[Export ("weekdayOrdinal")]
		nint WeekdayOrdinal { get; set; }

		// @property NSInteger quarter __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("quarter")]
		nint Quarter { get; set; }

		// @property NSInteger weekOfMonth __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("weekOfMonth")]
		nint WeekOfMonth { get; set; }

		// @property NSInteger weekOfYear __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("weekOfYear")]
		nint WeekOfYear { get; set; }

		// @property NSInteger yearForWeekOfYear __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("yearForWeekOfYear")]
		nint YearForWeekOfYear { get; set; }

		// @property (getter = isLeapMonth) BOOL leapMonth __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Export ("leapMonth")]
		bool LeapMonth { [Bind ("isLeapMonth")] get; set; }

		// @property (readonly, copy) NSDate * _Nullable date __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[NullAllowed, Export ("date", ArgumentSemantic.Copy)]
		NSDate Date { get; }

		// -(NSInteger)week __attribute__((availability(macos, introduced=10.4, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		// -(void)setWeek:(NSInteger)v __attribute__((availability(macos, introduced=10.4, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -weekOfMonth or -weekOfYear, depending on which you mean")]
		[Export ("week")]
		nint Week { get; set; }

		// -(void)setValue:(NSInteger)value forComponent:(NSCalendarUnit)unit __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("setValue:forComponent:")]
		void SetValue (nint value, NSCalendarUnit unit);

		// -(NSInteger)valueForComponent:(NSCalendarUnit)unit __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("valueForComponent:")]
		nint ValueForComponent (NSCalendarUnit unit);

		// @property (readonly, getter = isValidDate) BOOL validDate __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[Export ("validDate")]
		bool ValidDate { [Bind ("isValidDate")] get; }

		// -(BOOL)isValidDateInCalendar:(NSCalendar * _Nonnull)calendar __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (8,0)]
		[Export ("isValidDateInCalendar:")]
		bool IsValidDateInCalendar (NSCalendar calendar);
	}

	// @interface NSCharacterSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSCharacterSet : INSCopying, INSMutableCopying, INSSecureCoding
	{
		// @property (readonly, copy, class) NSCharacterSet * _Nonnull controlCharacterSet;
		[Static]
		[Export ("controlCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet ControlCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull whitespaceCharacterSet;
		[Static]
		[Export ("whitespaceCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet WhitespaceCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull whitespaceAndNewlineCharacterSet;
		[Static]
		[Export ("whitespaceAndNewlineCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet WhitespaceAndNewlineCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull decimalDigitCharacterSet;
		[Static]
		[Export ("decimalDigitCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet DecimalDigitCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull letterCharacterSet;
		[Static]
		[Export ("letterCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet LetterCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull lowercaseLetterCharacterSet;
		[Static]
		[Export ("lowercaseLetterCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet LowercaseLetterCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull uppercaseLetterCharacterSet;
		[Static]
		[Export ("uppercaseLetterCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet UppercaseLetterCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull nonBaseCharacterSet;
		[Static]
		[Export ("nonBaseCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet NonBaseCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull alphanumericCharacterSet;
		[Static]
		[Export ("alphanumericCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet AlphanumericCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull decomposableCharacterSet;
		[Static]
		[Export ("decomposableCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet DecomposableCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull illegalCharacterSet;
		[Static]
		[Export ("illegalCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet IllegalCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull punctuationCharacterSet;
		[Static]
		[Export ("punctuationCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet PunctuationCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull capitalizedLetterCharacterSet;
		[Static]
		[Export ("capitalizedLetterCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet CapitalizedLetterCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull symbolCharacterSet;
		[Static]
		[Export ("symbolCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet SymbolCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull newlineCharacterSet __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("newlineCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet NewlineCharacterSet { get; }

		// +(NSCharacterSet * _Nonnull)characterSetWithRange:(NSRange)aRange;
		[Static]
		[Export ("characterSetWithRange:")]
		NSCharacterSet CharacterSetWithRange (NSRange aRange);

		// +(NSCharacterSet * _Nonnull)characterSetWithCharactersInString:(NSString * _Nonnull)aString;
		[Static]
		[Export ("characterSetWithCharactersInString:")]
		NSCharacterSet CharacterSetWithCharactersInString (string aString);

		// +(NSCharacterSet * _Nonnull)characterSetWithBitmapRepresentation:(NSData * _Nonnull)data;
		[Static]
		[Export ("characterSetWithBitmapRepresentation:")]
		NSCharacterSet CharacterSetWithBitmapRepresentation (NSData data);

		// +(NSCharacterSet * _Nullable)characterSetWithContentsOfFile:(NSString * _Nonnull)fName;
		[Static]
		[Export ("characterSetWithContentsOfFile:")]
		[return: NullAllowed]
		NSCharacterSet CharacterSetWithContentsOfFile (string fName);

		// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// -(BOOL)characterIsMember:(unichar)aCharacter;
		[Export ("characterIsMember:")]
		bool CharacterIsMember (ushort aCharacter);

		// @property (readonly, copy) NSData * _Nonnull bitmapRepresentation;
		[Export ("bitmapRepresentation", ArgumentSemantic.Copy)]
		NSData BitmapRepresentation { get; }

		// @property (readonly, copy) NSCharacterSet * _Nonnull invertedSet;
		[Export ("invertedSet", ArgumentSemantic.Copy)]
		NSCharacterSet InvertedSet { get; }

		// -(BOOL)longCharacterIsMember:(UTF32Char)theLongChar;
		[Export ("longCharacterIsMember:")]
		bool LongCharacterIsMember (uint theLongChar);

		// -(BOOL)isSupersetOfSet:(NSCharacterSet * _Nonnull)theOtherSet;
		[Export ("isSupersetOfSet:")]
		bool IsSupersetOfSet (NSCharacterSet theOtherSet);

		// -(BOOL)hasMemberInPlane:(uint8_t)thePlane;
		[Export ("hasMemberInPlane:")]
		bool HasMemberInPlane (byte thePlane);
	}

	// @interface NSMutableCharacterSet : NSCharacterSet <NSCopying, NSMutableCopying, NSSecureCoding>
	[BaseType (typeof(NSCharacterSet))]
	interface NSMutableCharacterSet : INSCopying, INSMutableCopying, INSSecureCoding
	{
		// -(void)addCharactersInRange:(NSRange)aRange;
		[Export ("addCharactersInRange:")]
		void AddCharactersInRange (NSRange aRange);

		// -(void)removeCharactersInRange:(NSRange)aRange;
		[Export ("removeCharactersInRange:")]
		void RemoveCharactersInRange (NSRange aRange);

		// -(void)addCharactersInString:(NSString * _Nonnull)aString;
		[Export ("addCharactersInString:")]
		void AddCharactersInString (string aString);

		// -(void)removeCharactersInString:(NSString * _Nonnull)aString;
		[Export ("removeCharactersInString:")]
		void RemoveCharactersInString (string aString);

		// -(void)formUnionWithCharacterSet:(NSCharacterSet * _Nonnull)otherSet;
		[Export ("formUnionWithCharacterSet:")]
		void FormUnionWithCharacterSet (NSCharacterSet otherSet);

		// -(void)formIntersectionWithCharacterSet:(NSCharacterSet * _Nonnull)otherSet;
		[Export ("formIntersectionWithCharacterSet:")]
		void FormIntersectionWithCharacterSet (NSCharacterSet otherSet);

		// -(void)invert;
		[Export ("invert")]
		void Invert ();

		// +(NSMutableCharacterSet * _Nonnull)controlCharacterSet;
		[Static]
		[Export ("controlCharacterSet")]
		NSMutableCharacterSet ControlCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)whitespaceCharacterSet;
		[Static]
		[Export ("whitespaceCharacterSet")]
		NSMutableCharacterSet WhitespaceCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)whitespaceAndNewlineCharacterSet;
		[Static]
		[Export ("whitespaceAndNewlineCharacterSet")]
		NSMutableCharacterSet WhitespaceAndNewlineCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)decimalDigitCharacterSet;
		[Static]
		[Export ("decimalDigitCharacterSet")]
		NSMutableCharacterSet DecimalDigitCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)letterCharacterSet;
		[Static]
		[Export ("letterCharacterSet")]
		NSMutableCharacterSet LetterCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)lowercaseLetterCharacterSet;
		[Static]
		[Export ("lowercaseLetterCharacterSet")]
		NSMutableCharacterSet LowercaseLetterCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)uppercaseLetterCharacterSet;
		[Static]
		[Export ("uppercaseLetterCharacterSet")]
		NSMutableCharacterSet UppercaseLetterCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)nonBaseCharacterSet;
		[Static]
		[Export ("nonBaseCharacterSet")]
		NSMutableCharacterSet NonBaseCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)alphanumericCharacterSet;
		[Static]
		[Export ("alphanumericCharacterSet")]
		NSMutableCharacterSet AlphanumericCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)decomposableCharacterSet;
		[Static]
		[Export ("decomposableCharacterSet")]
		NSMutableCharacterSet DecomposableCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)illegalCharacterSet;
		[Static]
		[Export ("illegalCharacterSet")]
		NSMutableCharacterSet IllegalCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)punctuationCharacterSet;
		[Static]
		[Export ("punctuationCharacterSet")]
		NSMutableCharacterSet PunctuationCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)capitalizedLetterCharacterSet;
		[Static]
		[Export ("capitalizedLetterCharacterSet")]
		NSMutableCharacterSet CapitalizedLetterCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)symbolCharacterSet;
		[Static]
		[Export ("symbolCharacterSet")]
		NSMutableCharacterSet SymbolCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)newlineCharacterSet __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("newlineCharacterSet")]
		NSMutableCharacterSet NewlineCharacterSet { get; }

		// +(NSMutableCharacterSet * _Nonnull)characterSetWithRange:(NSRange)aRange;
		[Static]
		[Export ("characterSetWithRange:")]
		NSMutableCharacterSet CharacterSetWithRange (NSRange aRange);

		// +(NSMutableCharacterSet * _Nonnull)characterSetWithCharactersInString:(NSString * _Nonnull)aString;
		[Static]
		[Export ("characterSetWithCharactersInString:")]
		NSMutableCharacterSet CharacterSetWithCharactersInString (string aString);

		// +(NSMutableCharacterSet * _Nonnull)characterSetWithBitmapRepresentation:(NSData * _Nonnull)data;
		[Static]
		[Export ("characterSetWithBitmapRepresentation:")]
		NSMutableCharacterSet CharacterSetWithBitmapRepresentation (NSData data);

		// +(NSMutableCharacterSet * _Nullable)characterSetWithContentsOfFile:(NSString * _Nonnull)fName;
		[Static]
		[Export ("characterSetWithContentsOfFile:")]
		[return: NullAllowed]
		NSMutableCharacterSet CharacterSetWithContentsOfFile (string fName);
	}

	// @interface NSCoder : NSObject
	[BaseType (typeof(NSObject))]
	interface NSCoder
	{
		// -(void)encodeValueOfObjCType:(const char * _Nonnull)type at:(const void * _Nonnull)addr;
		[Export ("encodeValueOfObjCType:at:")]
		unsafe void EncodeValueOfObjCType (sbyte* type, void* addr);

		// -(void)encodeDataObject:(NSData * _Nonnull)data;
		[Export ("encodeDataObject:")]
		void EncodeDataObject (NSData data);

		// -(NSData * _Nullable)decodeDataObject;
		[NullAllowed, Export ("decodeDataObject")]
		NSData DecodeDataObject { get; }

		// -(void)decodeValueOfObjCType:(const char * _Nonnull)type at:(void * _Nonnull)data size:(NSUInteger)size __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("decodeValueOfObjCType:at:size:")]
		unsafe void DecodeValueOfObjCType (sbyte* type, void* data, nuint size);

		// -(NSInteger)versionForClassName:(NSString * _Nonnull)className;
		[Export ("versionForClassName:")]
		nint VersionForClassName (string className);
	}

	// @interface NSExtendedCoder (NSCoder)
	[Category]
	[BaseType (typeof(NSCoder))]
	interface NSCoder_NSExtendedCoder
	{
		// -(void)encodeObject:(id _Nullable)object;
		[Export ("encodeObject:")]
		void EncodeObject ([NullAllowed] NSObject @object);

		// -(void)encodeRootObject:(id _Nonnull)rootObject;
		[Export ("encodeRootObject:")]
		void EncodeRootObject (NSObject rootObject);

		// -(void)encodeBycopyObject:(id _Nullable)anObject;
		[Export ("encodeBycopyObject:")]
		void EncodeBycopyObject ([NullAllowed] NSObject anObject);

		// -(void)encodeByrefObject:(id _Nullable)anObject;
		[Export ("encodeByrefObject:")]
		void EncodeByrefObject ([NullAllowed] NSObject anObject);

		// -(void)encodeConditionalObject:(id _Nullable)object;
		[Export ("encodeConditionalObject:")]
		void EncodeConditionalObject ([NullAllowed] NSObject @object);

		// -(void)encodeValuesOfObjCTypes:(const char * _Nonnull)types, ...;
		[Internal]
		[Export ("encodeValuesOfObjCTypes:", IsVariadic = true)]
		unsafe void EncodeValuesOfObjCTypes (sbyte* types, IntPtr varArgs);

		// -(void)encodeArrayOfObjCType:(const char * _Nonnull)type count:(NSUInteger)count at:(const void * _Nonnull)array;
		[Export ("encodeArrayOfObjCType:count:at:")]
		unsafe void EncodeArrayOfObjCType (sbyte* type, nuint count, void* array);

		// -(void)encodeBytes:(const void * _Nullable)byteaddr length:(NSUInteger)length;
		[Export ("encodeBytes:length:")]
		unsafe void EncodeBytes ([NullAllowed] void* byteaddr, nuint length);

		// -(id _Nullable)decodeObject;
		[NullAllowed, Export ("decodeObject")]
		NSObject DecodeObject { get; }

		// -(id _Nullable)decodeTopLevelObjectAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("decodeTopLevelObjectAndReturnError:")]
		[return: NullAllowed]
		NSObject DecodeTopLevelObjectAndReturnError ([NullAllowed] out NSError error);

		// -(void)decodeValuesOfObjCTypes:(const char * _Nonnull)types, ...;
		[Internal]
		[Export ("decodeValuesOfObjCTypes:", IsVariadic = true)]
		unsafe void DecodeValuesOfObjCTypes (sbyte* types, IntPtr varArgs);

		// -(void)decodeArrayOfObjCType:(const char * _Nonnull)itemType count:(NSUInteger)count at:(void * _Nonnull)array;
		[Export ("decodeArrayOfObjCType:count:at:")]
		unsafe void DecodeArrayOfObjCType (sbyte* itemType, nuint count, void* array);

		// -(void * _Nullable)decodeBytesWithReturnedLength:(NSUInteger * _Nonnull)lengthp __attribute__((objc_returns_inner_pointer));
		[Export ("decodeBytesWithReturnedLength:")]
		[return: NullAllowed]
		unsafe void* DecodeBytesWithReturnedLength (nuint* lengthp);

		// -(NSZone * _Nullable)objectZone;
		// -(void)setObjectZone:(NSZone * _Nullable)zone;
		[NullAllowed, Export ("objectZone")]
		unsafe NSZone* ObjectZone { get; set; }

		// @property (readonly) unsigned int systemVersion;
		[Export ("systemVersion")]
		uint SystemVersion { get; }

		// @property (readonly) BOOL allowsKeyedCoding;
		[Export ("allowsKeyedCoding")]
		bool AllowsKeyedCoding { get; }

		// -(void)encodeObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
		[Export ("encodeObject:forKey:")]
		void EncodeObject ([NullAllowed] NSObject @object, string key);

		// -(void)encodeConditionalObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
		[Export ("encodeConditionalObject:forKey:")]
		void EncodeConditionalObject ([NullAllowed] NSObject @object, string key);

		// -(void)encodeBool:(BOOL)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeBool:forKey:")]
		void EncodeBool (bool value, string key);

		// -(void)encodeInt:(int)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeInt:forKey:")]
		void EncodeInt (int value, string key);

		// -(void)encodeInt32:(int32_t)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeInt32:forKey:")]
		void EncodeInt32 (int value, string key);

		// -(void)encodeInt64:(int64_t)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeInt64:forKey:")]
		void EncodeInt64 (long value, string key);

		// -(void)encodeFloat:(float)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeFloat:forKey:")]
		void EncodeFloat (float value, string key);

		// -(void)encodeDouble:(double)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeDouble:forKey:")]
		void EncodeDouble (double value, string key);

		// -(void)encodeBytes:(const uint8_t * _Nullable)bytes length:(NSUInteger)length forKey:(NSString * _Nonnull)key;
		[Export ("encodeBytes:length:forKey:")]
		unsafe void EncodeBytes ([NullAllowed] byte* bytes, nuint length, string key);

		// -(BOOL)containsValueForKey:(NSString * _Nonnull)key;
		[Export ("containsValueForKey:")]
		bool ContainsValueForKey (string key);

		// -(id _Nullable)decodeObjectForKey:(NSString * _Nonnull)key;
		[Export ("decodeObjectForKey:")]
		[return: NullAllowed]
		NSObject DecodeObjectForKey (string key);

		// -(id _Nullable)decodeTopLevelObjectForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("decodeTopLevelObjectForKey:error:")]
		[return: NullAllowed]
		NSObject DecodeTopLevelObjectForKey (string key, [NullAllowed] out NSError error);

		// -(BOOL)decodeBoolForKey:(NSString * _Nonnull)key;
		[Export ("decodeBoolForKey:")]
		bool DecodeBoolForKey (string key);

		// -(int)decodeIntForKey:(NSString * _Nonnull)key;
		[Export ("decodeIntForKey:")]
		int DecodeIntForKey (string key);

		// -(int32_t)decodeInt32ForKey:(NSString * _Nonnull)key;
		[Export ("decodeInt32ForKey:")]
		int DecodeInt32ForKey (string key);

		// -(int64_t)decodeInt64ForKey:(NSString * _Nonnull)key;
		[Export ("decodeInt64ForKey:")]
		long DecodeInt64ForKey (string key);

		// -(float)decodeFloatForKey:(NSString * _Nonnull)key;
		[Export ("decodeFloatForKey:")]
		float DecodeFloatForKey (string key);

		// -(double)decodeDoubleForKey:(NSString * _Nonnull)key;
		[Export ("decodeDoubleForKey:")]
		double DecodeDoubleForKey (string key);

		// -(const uint8_t * _Nullable)decodeBytesForKey:(NSString * _Nonnull)key returnedLength:(NSUInteger * _Nullable)lengthp __attribute__((objc_returns_inner_pointer));
		[Export ("decodeBytesForKey:returnedLength:")]
		[return: NullAllowed]
		unsafe byte* DecodeBytesForKey (string key, [NullAllowed] nuint* lengthp);

		// -(void)encodeInteger:(NSInteger)value forKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("encodeInteger:forKey:")]
		void EncodeInteger (nint value, string key);

		// -(NSInteger)decodeIntegerForKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("decodeIntegerForKey:")]
		nint DecodeIntegerForKey (string key);

		// @property (readonly) BOOL requiresSecureCoding __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Export ("requiresSecureCoding")]
		bool RequiresSecureCoding { get; }

		// -(id _Nullable)decodeObjectOfClass:(Class _Nonnull)aClass forKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("decodeObjectOfClass:forKey:")]
		[return: NullAllowed]
		NSObject DecodeObjectOfClass (Class aClass, string key);

		// -(id _Nullable)decodeTopLevelObjectOfClass:(Class _Nonnull)aClass forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("decodeTopLevelObjectOfClass:forKey:error:")]
		[return: NullAllowed]
		NSObject DecodeTopLevelObjectOfClass (Class aClass, string key, [NullAllowed] out NSError error);

		// -(NSArray * _Nullable)decodeArrayOfObjectsOfClass:(Class _Nonnull)cls forKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0))) __attribute__((swift_private));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Export ("decodeArrayOfObjectsOfClass:forKey:")]
		[return: NullAllowed]
		NSObject[] DecodeArrayOfObjectsOfClass (Class cls, string key);

		// -(NSDictionary * _Nullable)decodeDictionaryWithKeysOfClass:(Class _Nonnull)keyCls objectsOfClass:(Class _Nonnull)objectCls forKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0))) __attribute__((swift_private));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Export ("decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:")]
		[return: NullAllowed]
		NSDictionary DecodeDictionaryWithKeysOfClass (Class keyCls, Class objectCls, string key);

		// -(id _Nullable)decodeObjectOfClasses:(NSSet<Class> * _Nullable)classes forKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_private));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("decodeObjectOfClasses:forKey:")]
		[return: NullAllowed]
		NSObject DecodeObjectOfClasses ([NullAllowed] NSSet<Class> classes, string key);

		// -(id _Nullable)decodeTopLevelObjectOfClasses:(NSSet<Class> * _Nullable)classes forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("decodeTopLevelObjectOfClasses:forKey:error:")]
		[return: NullAllowed]
		NSObject DecodeTopLevelObjectOfClasses ([NullAllowed] NSSet<Class> classes, string key, [NullAllowed] out NSError error);

		// -(NSArray * _Nullable)decodeArrayOfObjectsOfClasses:(NSSet<Class> * _Nonnull)classes forKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0))) __attribute__((swift_private));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Export ("decodeArrayOfObjectsOfClasses:forKey:")]
		[return: NullAllowed]
		NSObject[] DecodeArrayOfObjectsOfClasses (NSSet<Class> classes, string key);

		// -(NSDictionary * _Nullable)decodeDictionaryWithKeysOfClasses:(NSSet<Class> * _Nonnull)keyClasses objectsOfClasses:(NSSet<Class> * _Nonnull)objectClasses forKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0))) __attribute__((swift_private));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Export ("decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:")]
		[return: NullAllowed]
		NSDictionary DecodeDictionaryWithKeysOfClasses (NSSet<Class> keyClasses, NSSet<Class> objectClasses, string key);

		// -(id _Nullable)decodePropertyListForKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("decodePropertyListForKey:")]
		[return: NullAllowed]
		NSObject DecodePropertyListForKey (string key);

		// @property (readonly, copy) NSSet<Class> * _Nullable allowedClasses __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[NullAllowed, Export ("allowedClasses", ArgumentSemantic.Copy)]
		NSSet<Class> AllowedClasses { get; }

		// -(void)failWithError:(NSError * _Nonnull)error __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("failWithError:")]
		void FailWithError (NSError error);

		// @property (readonly) NSDecodingFailurePolicy decodingFailurePolicy __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("decodingFailurePolicy")]
		NSDecodingFailurePolicy DecodingFailurePolicy { get; }

		// @property (readonly, copy) NSError * _Nullable error __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[NullAllowed, Export ("error", ArgumentSemantic.Copy)]
		NSError Error { get; }
	}

	// @interface NSDeprecated (NSCoder)
	[Category]
	[BaseType (typeof(NSCoder))]
	interface NSCoder_NSDeprecated
	{
		// -(void)decodeValueOfObjCType:(const char * _Nonnull)type at:(void * _Nonnull)data __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("decodeValueOfObjCType:at:")]
		unsafe void DecodeValueOfObjCType (sbyte* type, void* data);
	}

	// @interface NSData : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSData : INSCopying, INSMutableCopying, INSSecureCoding
	{
		// @property (readonly) NSUInteger length;
		[Export ("length")]
		nuint Length { get; }

		// @property (readonly) NS_RETURNS_INNER_POINTER const void * bytes __attribute__((objc_returns_inner_pointer));
		[Export ("bytes")]
		unsafe void* Bytes { get; }
	}

	// @interface NSExtendedData (NSData)
	[Category]
	[BaseType (typeof(NSData))]
	interface NSData_NSExtendedData
	{
		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// -(void)getBytes:(void * _Nonnull)buffer length:(NSUInteger)length;
		[Export ("getBytes:length:")]
		unsafe void GetBytes (void* buffer, nuint length);

		// -(void)getBytes:(void * _Nonnull)buffer range:(NSRange)range;
		[Export ("getBytes:range:")]
		unsafe void GetBytes (void* buffer, NSRange range);

		// -(BOOL)isEqualToData:(NSData * _Nonnull)other;
		[Export ("isEqualToData:")]
		bool IsEqualToData (NSData other);

		// -(NSData * _Nonnull)subdataWithRange:(NSRange)range;
		[Export ("subdataWithRange:")]
		NSData SubdataWithRange (NSRange range);

		// -(BOOL)writeToFile:(NSString * _Nonnull)path atomically:(BOOL)useAuxiliaryFile;
		[Export ("writeToFile:atomically:")]
		bool WriteToFile (string path, bool useAuxiliaryFile);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url atomically:(BOOL)atomically;
		[Export ("writeToURL:atomically:")]
		bool WriteToURL (NSURL url, bool atomically);

		// -(BOOL)writeToFile:(NSString * _Nonnull)path options:(NSDataWritingOptions)writeOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
		[Export ("writeToFile:options:error:")]
		bool WriteToFile (string path, NSDataWritingOptions writeOptionsMask, [NullAllowed] out NSError errorPtr);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url options:(NSDataWritingOptions)writeOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
		[Export ("writeToURL:options:error:")]
		bool WriteToURL (NSURL url, NSDataWritingOptions writeOptionsMask, [NullAllowed] out NSError errorPtr);

		// -(NSRange)rangeOfData:(NSData * _Nonnull)dataToFind options:(NSDataSearchOptions)mask range:(NSRange)searchRange __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("rangeOfData:options:range:")]
		NSRange RangeOfData (NSData dataToFind, NSDataSearchOptions mask, NSRange searchRange);

		// -(void)enumerateByteRangesUsingBlock:(void (^ _Nonnull)(const void * _Nonnull, NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("enumerateByteRangesUsingBlock:")]
		unsafe void EnumerateByteRangesUsingBlock (Action<void*, NSRange, bool*> block);
	}

	// @interface NSDataCreation (NSData)
	[Category]
	[BaseType (typeof(NSData))]
	interface NSData_NSDataCreation
	{
		// +(instancetype _Nonnull)data;
		[Static]
		[Export ("data")]
		NSData Data ();

		// +(instancetype _Nonnull)dataWithBytes:(const void * _Nullable)bytes length:(NSUInteger)length;
		[Static]
		[Export ("dataWithBytes:length:")]
		unsafe NSData DataWithBytes ([NullAllowed] void* bytes, nuint length);

		// +(instancetype _Nonnull)dataWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length;
		[Static]
		[Export ("dataWithBytesNoCopy:length:")]
		unsafe NSData DataWithBytesNoCopy (void* bytes, nuint length);

		// +(instancetype _Nonnull)dataWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b;
		[Static]
		[Export ("dataWithBytesNoCopy:length:freeWhenDone:")]
		unsafe NSData DataWithBytesNoCopy (void* bytes, nuint length, bool b);

		// +(instancetype _Nullable)dataWithContentsOfFile:(NSString * _Nonnull)path options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
		[Static]
		[Export ("dataWithContentsOfFile:options:error:")]
		[return: NullAllowed]
		NSData DataWithContentsOfFile (string path, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

		// +(instancetype _Nullable)dataWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
		[Static]
		[Export ("dataWithContentsOfURL:options:error:")]
		[return: NullAllowed]
		NSData DataWithContentsOfURL (NSURL url, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

		// +(instancetype _Nullable)dataWithContentsOfFile:(NSString * _Nonnull)path;
		[Static]
		[Export ("dataWithContentsOfFile:")]
		[return: NullAllowed]
		NSData DataWithContentsOfFile (string path);

		// +(instancetype _Nullable)dataWithContentsOfURL:(NSURL * _Nonnull)url;
		[Static]
		[Export ("dataWithContentsOfURL:")]
		[return: NullAllowed]
		NSData DataWithContentsOfURL (NSURL url);

		// -(instancetype _Nonnull)initWithBytes:(const void * _Nullable)bytes length:(NSUInteger)length;
		[Export ("initWithBytes:length:")]
		unsafe NativeHandle Constructor ([NullAllowed] void* bytes, nuint length);

		// -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length;
		[Export ("initWithBytesNoCopy:length:")]
		unsafe NativeHandle Constructor (void* bytes, nuint length);

		// -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b;
		[Export ("initWithBytesNoCopy:length:freeWhenDone:")]
		unsafe NativeHandle Constructor (void* bytes, nuint length, bool b);

		// -(instancetype _Nonnull)initWithBytesNoCopy:(void * _Nonnull)bytes length:(NSUInteger)length deallocator:(void (^ _Nullable)(void * _Nonnull, NSUInteger))deallocator __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("initWithBytesNoCopy:length:deallocator:")]
		unsafe NativeHandle Constructor (void* bytes, nuint length, [NullAllowed] Action<void*, nuint> deallocator);

		// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
		[Export ("initWithContentsOfFile:options:error:")]
		NativeHandle Constructor (string path, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

		// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url options:(NSDataReadingOptions)readOptionsMask error:(NSError * _Nullable * _Nullable)errorPtr;
		[Export ("initWithContentsOfURL:options:error:")]
		NativeHandle Constructor (NSURL url, NSDataReadingOptions readOptionsMask, [NullAllowed] out NSError errorPtr);

		// -(instancetype _Nullable)initWithContentsOfFile:(NSString * _Nonnull)path;
		[Export ("initWithContentsOfFile:")]
		NativeHandle Constructor (string path);

		// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
		[Export ("initWithContentsOfURL:")]
		NativeHandle Constructor (NSURL url);

		// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data;
		[Export ("initWithData:")]
		NativeHandle Constructor (NSData data);

		// +(instancetype _Nonnull)dataWithData:(NSData * _Nonnull)data;
		[Static]
		[Export ("dataWithData:")]
		NSData DataWithData (NSData data);
	}

	// @interface NSDataBase64Encoding (NSData)
	[Category]
	[BaseType (typeof(NSData))]
	interface NSData_NSDataBase64Encoding
	{
		// -(instancetype _Nullable)initWithBase64EncodedString:(NSString * _Nonnull)base64String options:(NSDataBase64DecodingOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("initWithBase64EncodedString:options:")]
		NativeHandle Constructor (string base64String, NSDataBase64DecodingOptions options);

		// -(NSString * _Nonnull)base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("base64EncodedStringWithOptions:")]
		string Base64EncodedStringWithOptions (NSDataBase64EncodingOptions options);

		// -(instancetype _Nullable)initWithBase64EncodedData:(NSData * _Nonnull)base64Data options:(NSDataBase64DecodingOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("initWithBase64EncodedData:options:")]
		NativeHandle Constructor (NSData base64Data, NSDataBase64DecodingOptions options);

		// -(NSData * _Nonnull)base64EncodedDataWithOptions:(NSDataBase64EncodingOptions)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("base64EncodedDataWithOptions:")]
		NSData Base64EncodedDataWithOptions (NSDataBase64EncodingOptions options);
	}

	// @interface NSDataCompression (NSData)
	[Category]
	[BaseType (typeof(NSData))]
	interface NSData_NSDataCompression
	{
		// -(instancetype _Nullable)decompressedDataUsingAlgorithm:(NSDataCompressionAlgorithm)algorithm error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("decompressedDataUsingAlgorithm:error:")]
		[return: NullAllowed]
		NSData DecompressedDataUsingAlgorithm (NSDataCompressionAlgorithm algorithm, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)compressedDataUsingAlgorithm:(NSDataCompressionAlgorithm)algorithm error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("compressedDataUsingAlgorithm:error:")]
		[return: NullAllowed]
		NSData CompressedDataUsingAlgorithm (NSDataCompressionAlgorithm algorithm, [NullAllowed] out NSError error);
	}

	// @interface NSDeprecated (NSData)
	[Category]
	[BaseType (typeof(NSData))]
	interface NSData_NSDeprecated
	{
		// -(void)getBytes:(void * _Nonnull)buffer __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.")]
		[Export ("getBytes:")]
		unsafe void GetBytes (void* buffer);

		// +(id _Nullable)dataWithContentsOfMappedFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Static]
		[Export ("dataWithContentsOfMappedFile:")]
		[return: NullAllowed]
		NSObject DataWithContentsOfMappedFile (string path);

		// -(id _Nullable)initWithContentsOfMappedFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.")]
		[Export ("initWithContentsOfMappedFile:")]
		NativeHandle Constructor (string path);

		// -(id _Nullable)initWithBase64Encoding:(NSString * _Nonnull)base64String __attribute__((availability(macos, introduced=10.6, deprecated=10.9))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use initWithBase64EncodedString:options: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use initWithBase64EncodedString:options: instead")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use initWithBase64EncodedString:options: instead")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use initWithBase64EncodedString:options: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use initWithBase64EncodedString:options: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use initWithBase64EncodedString:options: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use initWithBase64EncodedString:options: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use initWithBase64EncodedString:options: instead")]
		[Export ("initWithBase64Encoding:")]
		NativeHandle Constructor (string base64String);

		// -(NSString * _Nonnull)base64Encoding __attribute__((availability(macos, introduced=10.6, deprecated=10.9))) __attribute__((availability(ios, introduced=4.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use base64EncodedStringWithOptions: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use base64EncodedStringWithOptions: instead")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use base64EncodedStringWithOptions: instead")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use base64EncodedStringWithOptions: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use base64EncodedStringWithOptions: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use base64EncodedStringWithOptions: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use base64EncodedStringWithOptions: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use base64EncodedStringWithOptions: instead")]
		[Export ("base64Encoding")]
		string Base64Encoding { get; }
	}

	// @interface NSMutableData : NSData
	[BaseType (typeof(NSData))]
	interface NSMutableData
	{
		// @property (readonly) NS_RETURNS_INNER_POINTER void * mutableBytes __attribute__((objc_returns_inner_pointer));
		[Export ("mutableBytes")]
		unsafe void* MutableBytes { get; }

		// @property NSUInteger length;
		[Export ("length")]
		nuint Length { get; set; }
	}

	// @interface NSExtendedMutableData (NSMutableData)
	[Category]
	[BaseType (typeof(NSMutableData))]
	interface NSMutableData_NSExtendedMutableData
	{
		// -(void)appendBytes:(const void * _Nonnull)bytes length:(NSUInteger)length;
		[Export ("appendBytes:length:")]
		unsafe void AppendBytes (void* bytes, nuint length);

		// -(void)appendData:(NSData * _Nonnull)other;
		[Export ("appendData:")]
		void AppendData (NSData other);

		// -(void)increaseLengthBy:(NSUInteger)extraLength;
		[Export ("increaseLengthBy:")]
		void IncreaseLengthBy (nuint extraLength);

		// -(void)replaceBytesInRange:(NSRange)range withBytes:(const void * _Nonnull)bytes;
		[Export ("replaceBytesInRange:withBytes:")]
		unsafe void ReplaceBytesInRange (NSRange range, void* bytes);

		// -(void)resetBytesInRange:(NSRange)range;
		[Export ("resetBytesInRange:")]
		void ResetBytesInRange (NSRange range);

		// -(void)setData:(NSData * _Nonnull)data;
		[Export ("setData:")]
		void SetData (NSData data);

		// -(void)replaceBytesInRange:(NSRange)range withBytes:(const void * _Nullable)replacementBytes length:(NSUInteger)replacementLength;
		[Export ("replaceBytesInRange:withBytes:length:")]
		unsafe void ReplaceBytesInRange (NSRange range, [NullAllowed] void* replacementBytes, nuint replacementLength);
	}

	// @interface NSMutableDataCreation (NSMutableData)
	[Category]
	[BaseType (typeof(NSMutableData))]
	interface NSMutableData_NSMutableDataCreation
	{
		// +(instancetype _Nullable)dataWithCapacity:(NSUInteger)aNumItems;
		[Static]
		[Export ("dataWithCapacity:")]
		[return: NullAllowed]
		NSMutableData DataWithCapacity (nuint aNumItems);

		// +(instancetype _Nullable)dataWithLength:(NSUInteger)length;
		[Static]
		[Export ("dataWithLength:")]
		[return: NullAllowed]
		NSMutableData DataWithLength (nuint length);

		// -(instancetype _Nullable)initWithCapacity:(NSUInteger)capacity;
		[Export ("initWithCapacity:")]
		NativeHandle Constructor (nuint capacity);

		// -(instancetype _Nullable)initWithLength:(NSUInteger)length;
		[Export ("initWithLength:")]
		NativeHandle Constructor (nuint length);
	}

	// @interface NSMutableDataCompression (NSMutableData)
	[Category]
	[BaseType (typeof(NSMutableData))]
	interface NSMutableData_NSMutableDataCompression
	{
		// -(BOOL)decompressUsingAlgorithm:(NSDataCompressionAlgorithm)algorithm error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("decompressUsingAlgorithm:error:")]
		bool DecompressUsingAlgorithm (NSDataCompressionAlgorithm algorithm, [NullAllowed] out NSError error);

		// -(BOOL)compressUsingAlgorithm:(NSDataCompressionAlgorithm)algorithm error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("compressUsingAlgorithm:error:")]
		bool CompressUsingAlgorithm (NSDataCompressionAlgorithm algorithm, [NullAllowed] out NSError error);
	}

	// @interface NSPurgeableData : NSMutableData <NSDiscardableContent>
	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	[BaseType (typeof(NSMutableData))]
	interface NSPurgeableData : INSDiscardableContent
	{
	}

	// @interface NSDateInterval : NSObject <NSCopying, NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSObject))]
	interface NSDateInterval : INSCopying, INSSecureCoding
	{
		// @property (readonly, copy) NSDate * _Nonnull startDate;
		[Export ("startDate", ArgumentSemantic.Copy)]
		NSDate StartDate { get; }

		// @property (readonly, copy) NSDate * _Nonnull endDate;
		[Export ("endDate", ArgumentSemantic.Copy)]
		NSDate EndDate { get; }

		// @property (readonly) NSTimeInterval duration;
		[Export ("duration")]
		double Duration { get; }

		// -(instancetype _Nonnull)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// -(instancetype _Nonnull)initWithStartDate:(NSDate * _Nonnull)startDate duration:(NSTimeInterval)duration __attribute__((objc_designated_initializer));
		[Export ("initWithStartDate:duration:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSDate startDate, double duration);

		// -(instancetype _Nonnull)initWithStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate;
		[Export ("initWithStartDate:endDate:")]
		NativeHandle Constructor (NSDate startDate, NSDate endDate);

		// -(NSComparisonResult)compare:(NSDateInterval * _Nonnull)dateInterval;
		[Export ("compare:")]
		NSComparisonResult Compare (NSDateInterval dateInterval);

		// -(BOOL)isEqualToDateInterval:(NSDateInterval * _Nonnull)dateInterval;
		[Export ("isEqualToDateInterval:")]
		bool IsEqualToDateInterval (NSDateInterval dateInterval);

		// -(BOOL)intersectsDateInterval:(NSDateInterval * _Nonnull)dateInterval;
		[Export ("intersectsDateInterval:")]
		bool IntersectsDateInterval (NSDateInterval dateInterval);

		// -(NSDateInterval * _Nullable)intersectionWithDateInterval:(NSDateInterval * _Nonnull)dateInterval;
		[Export ("intersectionWithDateInterval:")]
		[return: NullAllowed]
		NSDateInterval IntersectionWithDateInterval (NSDateInterval dateInterval);

		// -(BOOL)containsDate:(NSDate * _Nonnull)date;
		[Export ("containsDate:")]
		bool ContainsDate (NSDate date);
	}

	// @interface NSAttributedString : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,0), iOS (3,2)]
	[BaseType (typeof(NSObject))]
	interface NSAttributedString : INSCopying, INSMutableCopying, INSSecureCoding
	{
		// @property (readonly, copy) NSString * _Nonnull string;
		[Export ("string")]
		string String { get; }

		// -(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range;
		[Export ("attributesAtIndex:effectiveRange:")]
		unsafe NSDictionary<NSString, NSObject> AttributesAtIndex (nuint location, [NullAllowed] NSRangePointer* range);
	}

	// @interface NSExtendedAttributedString (NSAttributedString)
	[Category]
	[BaseType (typeof(NSAttributedString))]
	interface NSAttributedString_NSExtendedAttributedString
	{
		// @property (readonly) NSUInteger length;
		[Export ("length")]
		nuint Length { get; }

		// -(id _Nullable)attribute:(NSAttributedStringKey _Nonnull)attrName atIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range;
		[Export ("attribute:atIndex:effectiveRange:")]
		[return: NullAllowed]
		unsafe NSObject Attribute (string attrName, nuint location, [NullAllowed] NSRangePointer* range);

		// -(NSAttributedString * _Nonnull)attributedSubstringFromRange:(NSRange)range;
		[Export ("attributedSubstringFromRange:")]
		NSAttributedString AttributedSubstringFromRange (NSRange range);

		// -(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attributesAtIndex:(NSUInteger)location longestEffectiveRange:(NSRangePointer _Nullable)range inRange:(NSRange)rangeLimit;
		[Export ("attributesAtIndex:longestEffectiveRange:inRange:")]
		unsafe NSDictionary<NSString, NSObject> AttributesAtIndex (nuint location, [NullAllowed] NSRangePointer* range, NSRange rangeLimit);

		// -(id _Nullable)attribute:(NSAttributedStringKey _Nonnull)attrName atIndex:(NSUInteger)location longestEffectiveRange:(NSRangePointer _Nullable)range inRange:(NSRange)rangeLimit;
		[Export ("attribute:atIndex:longestEffectiveRange:inRange:")]
		[return: NullAllowed]
		unsafe NSObject Attribute (string attrName, nuint location, [NullAllowed] NSRangePointer* range, NSRange rangeLimit);

		// -(BOOL)isEqualToAttributedString:(NSAttributedString * _Nonnull)other;
		[Export ("isEqualToAttributedString:")]
		bool IsEqualToAttributedString (NSAttributedString other);

		// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)str;
		[Export ("initWithString:")]
		NativeHandle Constructor (string str);

		// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)str attributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs;
		[Export ("initWithString:attributes:")]
		NativeHandle Constructor (string str, [NullAllowed] NSDictionary<NSString, NSObject> attrs);

		// -(instancetype _Nonnull)initWithAttributedString:(NSAttributedString * _Nonnull)attrStr;
		[Export ("initWithAttributedString:")]
		NativeHandle Constructor (NSAttributedString attrStr);

		// -(void)enumerateAttributesInRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(NSDictionary<NSAttributedStringKey,id> * _Nonnull, NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateAttributesInRange:options:usingBlock:")]
		unsafe void EnumerateAttributesInRange (NSRange enumerationRange, NSAttributedStringEnumerationOptions opts, Action<NSDictionary<NSString, NSObject>, NSRange, bool*> block);

		// -(void)enumerateAttribute:(NSAttributedStringKey _Nonnull)attrName inRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(id _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumerateAttribute:inRange:options:usingBlock:")]
		unsafe void EnumerateAttribute (string attrName, NSRange enumerationRange, NSAttributedStringEnumerationOptions opts, Action<NSObject, NSRange, bool*> block);
	}

	// @interface NSMutableAttributedString : NSAttributedString
	[Watch (2,0), TV (9,0), Mac (10,0), iOS (3,2)]
	[BaseType (typeof(NSAttributedString))]
	interface NSMutableAttributedString
	{
		// -(void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)str;
		[Export ("replaceCharactersInRange:withString:")]
		void ReplaceCharactersInRange (NSRange range, string str);

		// -(void)setAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs range:(NSRange)range;
		[Export ("setAttributes:range:")]
		void SetAttributes ([NullAllowed] NSDictionary<NSString, NSObject> attrs, NSRange range);
	}

	// @interface NSExtendedMutableAttributedString (NSMutableAttributedString)
	[Category]
	[BaseType (typeof(NSMutableAttributedString))]
	interface NSMutableAttributedString_NSExtendedMutableAttributedString
	{
		// @property (readonly, retain) NSMutableString * _Nonnull mutableString;
		[Export ("mutableString", ArgumentSemantic.Retain)]
		NSMutableString MutableString { get; }

		// -(void)addAttribute:(NSAttributedStringKey _Nonnull)name value:(id _Nonnull)value range:(NSRange)range;
		[Export ("addAttribute:value:range:")]
		void AddAttribute (string name, NSObject value, NSRange range);

		// -(void)addAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nonnull)attrs range:(NSRange)range;
		[Export ("addAttributes:range:")]
		void AddAttributes (NSDictionary<NSString, NSObject> attrs, NSRange range);

		// -(void)removeAttribute:(NSAttributedStringKey _Nonnull)name range:(NSRange)range;
		[Export ("removeAttribute:range:")]
		void RemoveAttribute (string name, NSRange range);

		// -(void)replaceCharactersInRange:(NSRange)range withAttributedString:(NSAttributedString * _Nonnull)attrString;
		[Export ("replaceCharactersInRange:withAttributedString:")]
		void ReplaceCharactersInRange (NSRange range, NSAttributedString attrString);

		// -(void)insertAttributedString:(NSAttributedString * _Nonnull)attrString atIndex:(NSUInteger)loc;
		[Export ("insertAttributedString:atIndex:")]
		void InsertAttributedString (NSAttributedString attrString, nuint loc);

		// -(void)appendAttributedString:(NSAttributedString * _Nonnull)attrString;
		[Export ("appendAttributedString:")]
		void AppendAttributedString (NSAttributedString attrString);

		// -(void)deleteCharactersInRange:(NSRange)range;
		[Export ("deleteCharactersInRange:")]
		void DeleteCharactersInRange (NSRange range);

		// -(void)setAttributedString:(NSAttributedString * _Nonnull)attrString;
		[Export ("setAttributedString:")]
		void SetAttributedString (NSAttributedString attrString);

		// -(void)beginEditing;
		[Export ("beginEditing")]
		void BeginEditing ();

		// -(void)endEditing;
		[Export ("endEditing")]
		void EndEditing ();
	}

	[Static]
	partial interface Constants
	{
		// extern NS_SWIFT_NAME(inlinePresentationIntent) const NSAttributedStringKey NSInlinePresentationIntentAttributeName __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0))) __attribute__((swift_name("inlinePresentationIntent")));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSInlinePresentationIntentAttributeName", "__Internal")]
		NSString NSInlinePresentationIntentAttributeName { get; }

		// extern NS_SWIFT_NAME(alternateDescription) const NSAttributedStringKey NSAlternateDescriptionAttributeName __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0))) __attribute__((swift_name("alternateDescription")));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSAlternateDescriptionAttributeName", "__Internal")]
		NSString NSAlternateDescriptionAttributeName { get; }

		// extern NS_SWIFT_NAME(imageURL) const NSAttributedStringKey NSImageURLAttributeName __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0))) __attribute__((swift_name("imageURL")));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSImageURLAttributeName", "__Internal")]
		NSString NSImageURLAttributeName { get; }

		// extern NS_SWIFT_NAME(languageIdentifier) const NSAttributedStringKey NSLanguageIdentifierAttributeName __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0))) __attribute__((swift_name("languageIdentifier")));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSLanguageIdentifierAttributeName", "__Internal")]
		NSString NSLanguageIdentifierAttributeName { get; }

		// extern NS_SWIFT_NAME(markdownSourcePosition) const NSAttributedStringKey NSMarkdownSourcePositionAttributeName __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.0))) __attribute__((availability(watchos, introduced=9.0))) __attribute__((availability(tvos, introduced=16.0))) __attribute__((swift_name("markdownSourcePosition")));
		[Watch (9, 0), TV (16, 0), Mac (13, 0), iOS (16, 0)]
		[Field ("NSMarkdownSourcePositionAttributeName", "__Internal")]
		NSString NSMarkdownSourcePositionAttributeName { get; }
	}

	// @interface NSAttributedStringMarkdownSourcePosition : NSObject <NSCopying, NSSecureCoding>
	[Watch (9,0), TV (16,0), Mac (13,0), iOS (16,0)]
	[BaseType (typeof(NSObject))]
	interface NSAttributedStringMarkdownSourcePosition : INSCopying, INSSecureCoding
	{
		// @property (readonly) NSInteger startLine;
		[Export ("startLine")]
		nint StartLine { get; }

		// @property (readonly) NSInteger startColumn;
		[Export ("startColumn")]
		nint StartColumn { get; }

		// @property (readonly) NSInteger endLine;
		[Export ("endLine")]
		nint EndLine { get; }

		// @property (readonly) NSInteger endColumn;
		[Export ("endColumn")]
		nint EndColumn { get; }

		// -(instancetype _Nonnull)initWithStartLine:(NSInteger)startLine startColumn:(NSInteger)startColumn endLine:(NSInteger)endLine endColumn:(NSInteger)endColumn;
		[Export ("initWithStartLine:startColumn:endLine:endColumn:")]
		NativeHandle Constructor (nint startLine, nint startColumn, nint endLine, nint endColumn);

		// -(NSRange)rangeInString:(NSString * _Nonnull)string;
		[Export ("rangeInString:")]
		NSRange RangeInString (string @string);
	}

	// @interface NSAttributedStringMarkdownParsingOptions : NSObject <NSCopying>
	[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
	[BaseType (typeof(NSObject))]
	interface NSAttributedStringMarkdownParsingOptions : INSCopying
	{
		// @property BOOL allowsExtendedAttributes;
		[Export ("allowsExtendedAttributes")]
		bool AllowsExtendedAttributes { get; set; }

		// @property NSAttributedStringMarkdownInterpretedSyntax interpretedSyntax;
		[Export ("interpretedSyntax", ArgumentSemantic.Assign)]
		NSAttributedStringMarkdownInterpretedSyntax InterpretedSyntax { get; set; }

		// @property NSAttributedStringMarkdownParsingFailurePolicy failurePolicy;
		[Export ("failurePolicy", ArgumentSemantic.Assign)]
		NSAttributedStringMarkdownParsingFailurePolicy FailurePolicy { get; set; }

		// @property (copy) NSString * _Nullable languageCode;
		[NullAllowed, Export ("languageCode")]
		string LanguageCode { get; set; }

		// @property BOOL appliesSourcePositionAttributes __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.0))) __attribute__((availability(watchos, introduced=9.0))) __attribute__((availability(tvos, introduced=16.0)));
		[Watch (9, 0), TV (16, 0), Mac (13, 0), iOS (16, 0)]
		[Export ("appliesSourcePositionAttributes")]
		bool AppliesSourcePositionAttributes { get; set; }
	}

	// @interface NSAttributedStringCreateFromMarkdown (NSAttributedString)
	[Category]
	[BaseType (typeof(NSAttributedString))]
	interface NSAttributedString_NSAttributedStringCreateFromMarkdown
	{
		// -(instancetype _Nullable)initWithContentsOfMarkdownFileAtURL:(NSURL * _Nonnull)markdownFile options:(NSAttributedStringMarkdownParsingOptions * _Nullable)options baseURL:(NSURL * _Nullable)baseURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0))) __attribute__((swift_private));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Export ("initWithContentsOfMarkdownFileAtURL:options:baseURL:error:")]
		NativeHandle Constructor (NSURL markdownFile, [NullAllowed] NSAttributedStringMarkdownParsingOptions options, [NullAllowed] NSURL baseURL, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithMarkdown:(NSData * _Nonnull)markdown options:(NSAttributedStringMarkdownParsingOptions * _Nullable)options baseURL:(NSURL * _Nullable)baseURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0))) __attribute__((swift_private));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Export ("initWithMarkdown:options:baseURL:error:")]
		NativeHandle Constructor (NSData markdown, [NullAllowed] NSAttributedStringMarkdownParsingOptions options, [NullAllowed] NSURL baseURL, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithMarkdownString:(NSString * _Nonnull)markdownString options:(NSAttributedStringMarkdownParsingOptions * _Nullable)options baseURL:(NSURL * _Nullable)baseURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0))) __attribute__((swift_private));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Export ("initWithMarkdownString:options:baseURL:error:")]
		NativeHandle Constructor (string markdownString, [NullAllowed] NSAttributedStringMarkdownParsingOptions options, [NullAllowed] NSURL baseURL, [NullAllowed] out NSError error);
	}

	// @interface NSAttributedStringFormatting (NSAttributedString)
	[Category]
	[BaseType (typeof(NSAttributedString))]
	interface NSAttributedString_NSAttributedStringFormatting
	{
		// -(instancetype _Nonnull)initWithFormat:(NSAttributedString * _Nonnull)format options:(NSAttributedStringFormattingOptions)options locale:(NSLocale * _Nullable)locale, ... __attribute__((swift_private)) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Internal]
		[Export ("initWithFormat:options:locale:", IsVariadic = true)]
		NativeHandle Constructor (NSAttributedString format, NSAttributedStringFormattingOptions options, [NullAllowed] NSLocale locale, IntPtr varArgs);

		// -(instancetype _Nonnull)initWithFormat:(NSAttributedString * _Nonnull)format options:(NSAttributedStringFormattingOptions)options locale:(NSLocale * _Nullable)locale arguments:(va_list)arguments __attribute__((swift_private)) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Export ("initWithFormat:options:locale:arguments:")]
		unsafe NativeHandle Constructor (NSAttributedString format, NSAttributedStringFormattingOptions options, [NullAllowed] NSLocale locale, sbyte* arguments);

		// +(instancetype _Nonnull)localizedAttributedStringWithFormat:(NSAttributedString * _Nonnull)format, ... __attribute__((swift_private)) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Static, Internal]
		[Export ("localizedAttributedStringWithFormat:", IsVariadic = true)]
		NSAttributedString LocalizedAttributedStringWithFormat (NSAttributedString format, IntPtr varArgs);

		// +(instancetype _Nonnull)localizedAttributedStringWithFormat:(NSAttributedString * _Nonnull)format options:(NSAttributedStringFormattingOptions)options, ... __attribute__((swift_private)) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Static, Internal]
		[Export ("localizedAttributedStringWithFormat:options:", IsVariadic = true)]
		NSAttributedString LocalizedAttributedStringWithFormat (NSAttributedString format, NSAttributedStringFormattingOptions options, IntPtr varArgs);
	}

	// @interface NSMutableAttributedStringFormatting (NSMutableAttributedString)
	[Category]
	[BaseType (typeof(NSMutableAttributedString))]
	interface NSMutableAttributedString_NSMutableAttributedStringFormatting
	{
		// -(void)appendLocalizedFormat:(NSAttributedString * _Nonnull)format, ... __attribute__((swift_private)) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Internal]
		[Export ("appendLocalizedFormat:", IsVariadic = true)]
		void AppendLocalizedFormat (NSAttributedString format, IntPtr varArgs);
	}

	[Static]
	partial interface Constants
	{
		// extern NS_SWIFT_NAME(replacementIndex) const NSAttributedStringKey NSReplacementIndexAttributeName __attribute__((swift_name("replacementIndex"))) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSReplacementIndexAttributeName", "__Internal")]
		NSString NSReplacementIndexAttributeName { get; }
	}

	// @interface NSMorphology (NSAttributedString)
	[Category]
	[BaseType (typeof(NSAttributedString))]
	interface NSAttributedString_NSMorphology
	{
		// -(NSAttributedString * _Nonnull)attributedStringByInflectingString __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Export ("attributedStringByInflectingString")]
		NSAttributedString AttributedStringByInflectingString { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern NS_SWIFT_NAME(morphology) const NSAttributedStringKey NSMorphologyAttributeName __attribute__((swift_name("morphology"))) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSMorphologyAttributeName", "__Internal")]
		NSString NSMorphologyAttributeName { get; }

		// extern NS_SWIFT_NAME(inflectionRule) const NSAttributedStringKey NSInflectionRuleAttributeName __attribute__((swift_name("inflectionRule"))) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSInflectionRuleAttributeName", "__Internal")]
		NSString NSInflectionRuleAttributeName { get; }

		// extern NS_SWIFT_NAME(inflectionAlternative) const NSAttributedStringKey NSInflectionAlternativeAttributeName __attribute__((swift_name("inflectionAlternative"))) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSInflectionAlternativeAttributeName", "__Internal")]
		NSString NSInflectionAlternativeAttributeName { get; }

		// extern const NSAttributedStringKey _Nonnull NSPresentationIntentAttributeName __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Field ("NSPresentationIntentAttributeName", "__Internal")]
		NSString NSPresentationIntentAttributeName { get; }
	}

	// @interface NSPresentationIntent : NSObject <NSCopying, NSSecureCoding>
	[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface NSPresentationIntent : INSCopying, INSSecureCoding
	{
		// @property (readonly) NSPresentationIntentKind intentKind;
		[Export ("intentKind")]
		NSPresentationIntentKind IntentKind { get; }

		// @property (readonly, strong) NSPresentationIntent * _Nullable parentIntent;
		[NullAllowed, Export ("parentIntent", ArgumentSemantic.Strong)]
		NSPresentationIntent ParentIntent { get; }

		// +(NSPresentationIntent * _Nonnull)paragraphIntentWithIdentity:(NSInteger)identity nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("paragraphIntentWithIdentity:nestedInsideIntent:")]
		NSPresentationIntent ParagraphIntentWithIdentity (nint identity, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)headerIntentWithIdentity:(NSInteger)identity level:(NSInteger)level nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("headerIntentWithIdentity:level:nestedInsideIntent:")]
		NSPresentationIntent HeaderIntentWithIdentity (nint identity, nint level, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)codeBlockIntentWithIdentity:(NSInteger)identity languageHint:(NSString * _Nullable)languageHint nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:")]
		NSPresentationIntent CodeBlockIntentWithIdentity (nint identity, [NullAllowed] string languageHint, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)thematicBreakIntentWithIdentity:(NSInteger)identity nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("thematicBreakIntentWithIdentity:nestedInsideIntent:")]
		NSPresentationIntent ThematicBreakIntentWithIdentity (nint identity, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)orderedListIntentWithIdentity:(NSInteger)identity nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("orderedListIntentWithIdentity:nestedInsideIntent:")]
		NSPresentationIntent OrderedListIntentWithIdentity (nint identity, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)unorderedListIntentWithIdentity:(NSInteger)identity nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("unorderedListIntentWithIdentity:nestedInsideIntent:")]
		NSPresentationIntent UnorderedListIntentWithIdentity (nint identity, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)listItemIntentWithIdentity:(NSInteger)identity ordinal:(NSInteger)ordinal nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("listItemIntentWithIdentity:ordinal:nestedInsideIntent:")]
		NSPresentationIntent ListItemIntentWithIdentity (nint identity, nint ordinal, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)blockQuoteIntentWithIdentity:(NSInteger)identity nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("blockQuoteIntentWithIdentity:nestedInsideIntent:")]
		NSPresentationIntent BlockQuoteIntentWithIdentity (nint identity, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)tableIntentWithIdentity:(NSInteger)identity columnCount:(NSInteger)columnCount alignments:(NSArray<NSNumber *> * _Nonnull)alignments nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:")]
		NSPresentationIntent TableIntentWithIdentity (nint identity, nint columnCount, NSNumber[] alignments, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)tableHeaderRowIntentWithIdentity:(NSInteger)identity nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("tableHeaderRowIntentWithIdentity:nestedInsideIntent:")]
		NSPresentationIntent TableHeaderRowIntentWithIdentity (nint identity, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)tableRowIntentWithIdentity:(NSInteger)identity row:(NSInteger)row nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("tableRowIntentWithIdentity:row:nestedInsideIntent:")]
		NSPresentationIntent TableRowIntentWithIdentity (nint identity, nint row, [NullAllowed] NSPresentationIntent parent);

		// +(NSPresentationIntent * _Nonnull)tableCellIntentWithIdentity:(NSInteger)identity column:(NSInteger)column nestedInsideIntent:(NSPresentationIntent * _Nullable)parent;
		[Static]
		[Export ("tableCellIntentWithIdentity:column:nestedInsideIntent:")]
		NSPresentationIntent TableCellIntentWithIdentity (nint identity, nint column, [NullAllowed] NSPresentationIntent parent);

		// @property (readonly) NSInteger identity;
		[Export ("identity")]
		nint Identity { get; }

		// @property (readonly) NSInteger ordinal;
		[Export ("ordinal")]
		nint Ordinal { get; }

		// @property (readonly) NSArray<NSNumber *> * _Nullable columnAlignments;
		[NullAllowed, Export ("columnAlignments")]
		NSNumber[] ColumnAlignments { get; }

		// @property (readonly) NSInteger columnCount;
		[Export ("columnCount")]
		nint ColumnCount { get; }

		// @property (readonly) NSInteger headerLevel;
		[Export ("headerLevel")]
		nint HeaderLevel { get; }

		// @property (readonly, copy) NSString * _Nullable languageHint;
		[NullAllowed, Export ("languageHint")]
		string LanguageHint { get; }

		// @property (readonly) NSInteger column;
		[Export ("column")]
		nint Column { get; }

		// @property (readonly) NSInteger row;
		[Export ("row")]
		nint Row { get; }

		// @property (readonly) NSInteger indentationLevel;
		[Export ("indentationLevel")]
		nint IndentationLevel { get; }

		// -(BOOL)isEquivalentToPresentationIntent:(NSPresentationIntent * _Nonnull)other;
		[Export ("isEquivalentToPresentationIntent:")]
		bool IsEquivalentToPresentationIntent (NSPresentationIntent other);
	}

	// @interface NSFormatter : NSObject <NSCopying, NSCoding>
	[BaseType (typeof(NSObject))]
	interface NSFormatter : INSCopying, INSCoding
	{
		// -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
		[Export ("stringForObjectValue:")]
		[return: NullAllowed]
		string StringForObjectValue ([NullAllowed] NSObject obj);

		// -(NSAttributedString * _Nullable)attributedStringForObjectValue:(id _Nonnull)obj withDefaultAttributes:(NSDictionary<NSAttributedStringKey,id> * _Nullable)attrs;
		[Export ("attributedStringForObjectValue:withDefaultAttributes:")]
		[return: NullAllowed]
		NSAttributedString AttributedStringForObjectValue (NSObject obj, [NullAllowed] NSDictionary<NSString, NSObject> attrs);

		// -(NSString * _Nullable)editingStringForObjectValue:(id _Nonnull)obj;
		[Export ("editingStringForObjectValue:")]
		[return: NullAllowed]
		string EditingStringForObjectValue (NSObject obj);

		// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
		[Export ("getObjectValue:forString:errorDescription:")]
		bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);

		// -(BOOL)isPartialStringValid:(NSString * _Nonnull)partialString newEditingString:(NSString * _Nullable * _Nullable)newString errorDescription:(NSString * _Nullable * _Nullable)error;
		[Export ("isPartialStringValid:newEditingString:errorDescription:")]
		bool IsPartialStringValid (string partialString, [NullAllowed] out string newString, [NullAllowed] out string error);

		// -(BOOL)isPartialStringValid:(NSString * _Nonnull * _Nonnull)partialStringPtr proposedSelectedRange:(NSRangePointer _Nullable)proposedSelRangePtr originalString:(NSString * _Nonnull)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString * _Nullable * _Nullable)error;
		[Export ("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:")]
		unsafe bool IsPartialStringValid (out string partialStringPtr, [NullAllowed] NSRangePointer* proposedSelRangePtr, string origString, NSRange origSelRange, [NullAllowed] out string error);
	}

	// @interface NSDateFormatter : NSFormatter
	[BaseType (typeof(NSFormatter))]
	interface NSDateFormatter
	{
		// @property NSFormattingContext formattingContext __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("formattingContext", ArgumentSemantic.Assign)]
		NSFormattingContext FormattingContext { get; set; }

		// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string range:(NSRange * _Nullable)rangep error:(NSError * _Nullable * _Nullable)error;
		[Export ("getObjectValue:forString:range:error:")]
		unsafe bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] NSRange* rangep, [NullAllowed] out NSError error);

		// -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date;
		[Export ("stringFromDate:")]
		string StringFromDate (NSDate date);

		// -(NSDate * _Nullable)dateFromString:(NSString * _Nonnull)string;
		[Export ("dateFromString:")]
		[return: NullAllowed]
		NSDate DateFromString (string @string);

		// +(NSString * _Nonnull)localizedStringFromDate:(NSDate * _Nonnull)date dateStyle:(NSDateFormatterStyle)dstyle timeStyle:(NSDateFormatterStyle)tstyle __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("localizedStringFromDate:dateStyle:timeStyle:")]
		string LocalizedStringFromDate (NSDate date, NSDateFormatterStyle dstyle, NSDateFormatterStyle tstyle);

		// +(NSString * _Nullable)dateFormatFromTemplate:(NSString * _Nonnull)tmplate options:(NSUInteger)opts locale:(NSLocale * _Nullable)locale __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("dateFormatFromTemplate:options:locale:")]
		[return: NullAllowed]
		string DateFormatFromTemplate (string tmplate, nuint opts, [NullAllowed] NSLocale locale);

		// @property (class) NSDateFormatterBehavior defaultFormatterBehavior;
		[Static]
		[Export ("defaultFormatterBehavior", ArgumentSemantic.Assign)]
		NSDateFormatterBehavior DefaultFormatterBehavior { get; set; }

		// -(void)setLocalizedDateFormatFromTemplate:(NSString * _Nonnull)dateFormatTemplate __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("setLocalizedDateFormatFromTemplate:")]
		void SetLocalizedDateFormatFromTemplate (string dateFormatTemplate);

		// @property (copy, null_resettable) NSString * _Null_unspecified dateFormat;
		[NullAllowed, Export ("dateFormat")]
		string DateFormat { get; set; }

		// @property NSDateFormatterStyle dateStyle;
		[Export ("dateStyle", ArgumentSemantic.Assign)]
		NSDateFormatterStyle DateStyle { get; set; }

		// @property NSDateFormatterStyle timeStyle;
		[Export ("timeStyle", ArgumentSemantic.Assign)]
		NSDateFormatterStyle TimeStyle { get; set; }

		// @property (copy, null_resettable) NSLocale * _Null_unspecified locale;
		[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
		NSLocale Locale { get; set; }

		// @property BOOL generatesCalendarDates;
		[Export ("generatesCalendarDates")]
		bool GeneratesCalendarDates { get; set; }

		// @property NSDateFormatterBehavior formatterBehavior;
		[Export ("formatterBehavior", ArgumentSemantic.Assign)]
		NSDateFormatterBehavior FormatterBehavior { get; set; }

		// @property (copy, null_resettable) NSTimeZone * _Null_unspecified timeZone;
		[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
		NSTimeZone TimeZone { get; set; }

		// @property (copy, null_resettable) NSCalendar * _Null_unspecified calendar;
		[NullAllowed, Export ("calendar", ArgumentSemantic.Copy)]
		NSCalendar Calendar { get; set; }

		// @property (getter = isLenient) BOOL lenient;
		[Export ("lenient")]
		bool Lenient { [Bind ("isLenient")] get; set; }

		// @property (copy) NSDate * _Nullable twoDigitStartDate;
		[NullAllowed, Export ("twoDigitStartDate", ArgumentSemantic.Copy)]
		NSDate TwoDigitStartDate { get; set; }

		// @property (copy) NSDate * _Nullable defaultDate;
		[NullAllowed, Export ("defaultDate", ArgumentSemantic.Copy)]
		NSDate DefaultDate { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified eraSymbols;
		[NullAllowed, Export ("eraSymbols", ArgumentSemantic.Copy)]
		string[] EraSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified monthSymbols;
		[NullAllowed, Export ("monthSymbols", ArgumentSemantic.Copy)]
		string[] MonthSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified shortMonthSymbols;
		[NullAllowed, Export ("shortMonthSymbols", ArgumentSemantic.Copy)]
		string[] ShortMonthSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified weekdaySymbols;
		[NullAllowed, Export ("weekdaySymbols", ArgumentSemantic.Copy)]
		string[] WeekdaySymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified shortWeekdaySymbols;
		[NullAllowed, Export ("shortWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] ShortWeekdaySymbols { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified AMSymbol;
		[NullAllowed, Export ("AMSymbol")]
		string AMSymbol { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified PMSymbol;
		[NullAllowed, Export ("PMSymbol")]
		string PMSymbol { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified longEraSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("longEraSymbols", ArgumentSemantic.Copy)]
		string[] LongEraSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified veryShortMonthSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("veryShortMonthSymbols", ArgumentSemantic.Copy)]
		string[] VeryShortMonthSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified standaloneMonthSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("standaloneMonthSymbols", ArgumentSemantic.Copy)]
		string[] StandaloneMonthSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified shortStandaloneMonthSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("shortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
		string[] ShortStandaloneMonthSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified veryShortStandaloneMonthSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("veryShortStandaloneMonthSymbols", ArgumentSemantic.Copy)]
		string[] VeryShortStandaloneMonthSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified veryShortWeekdaySymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("veryShortWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] VeryShortWeekdaySymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified standaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("standaloneWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] StandaloneWeekdaySymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified shortStandaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("shortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] ShortStandaloneWeekdaySymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified veryShortStandaloneWeekdaySymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("veryShortStandaloneWeekdaySymbols", ArgumentSemantic.Copy)]
		string[] VeryShortStandaloneWeekdaySymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified quarterSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("quarterSymbols", ArgumentSemantic.Copy)]
		string[] QuarterSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified shortQuarterSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("shortQuarterSymbols", ArgumentSemantic.Copy)]
		string[] ShortQuarterSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified standaloneQuarterSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("standaloneQuarterSymbols", ArgumentSemantic.Copy)]
		string[] StandaloneQuarterSymbols { get; set; }

		// @property (copy, null_resettable) NSArray<NSString *> * _Null_unspecified shortStandaloneQuarterSymbols __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("shortStandaloneQuarterSymbols", ArgumentSemantic.Copy)]
		string[] ShortStandaloneQuarterSymbols { get; set; }

		// @property (copy) NSDate * _Nullable gregorianStartDate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("gregorianStartDate", ArgumentSemantic.Copy)]
		NSDate GregorianStartDate { get; set; }

		// @property BOOL doesRelativeDateFormatting __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("doesRelativeDateFormatting")]
		bool DoesRelativeDateFormatting { get; set; }
	}

	// @interface NSDateIntervalFormatter : NSFormatter
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSDateIntervalFormatter
	{
		// @property (copy, null_resettable) NSLocale * _Null_unspecified locale;
		[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
		NSLocale Locale { get; set; }

		// @property (copy, null_resettable) NSCalendar * _Null_unspecified calendar;
		[NullAllowed, Export ("calendar", ArgumentSemantic.Copy)]
		NSCalendar Calendar { get; set; }

		// @property (copy, null_resettable) NSTimeZone * _Null_unspecified timeZone;
		[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
		NSTimeZone TimeZone { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified dateTemplate;
		[NullAllowed, Export ("dateTemplate")]
		string DateTemplate { get; set; }

		// @property NSDateIntervalFormatterStyle dateStyle;
		[Export ("dateStyle", ArgumentSemantic.Assign)]
		NSDateIntervalFormatterStyle DateStyle { get; set; }

		// @property NSDateIntervalFormatterStyle timeStyle;
		[Export ("timeStyle", ArgumentSemantic.Assign)]
		NSDateIntervalFormatterStyle TimeStyle { get; set; }

		// -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)fromDate toDate:(NSDate * _Nonnull)toDate;
		[Export ("stringFromDate:toDate:")]
		string StringFromDate (NSDate fromDate, NSDate toDate);

		// -(NSString * _Nullable)stringFromDateInterval:(NSDateInterval * _Nonnull)dateInterval __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("stringFromDateInterval:")]
		[return: NullAllowed]
		string StringFromDateInterval (NSDateInterval dateInterval);
	}

	// @interface NSISO8601DateFormatter : NSFormatter <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSISO8601DateFormatter : INSSecureCoding
	{
		// @property (copy, null_resettable) NSTimeZone * _Null_unspecified timeZone;
		[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
		NSTimeZone TimeZone { get; set; }

		// @property NSISO8601DateFormatOptions formatOptions;
		[Export ("formatOptions", ArgumentSemantic.Assign)]
		NSISO8601DateFormatOptions FormatOptions { get; set; }

		// -(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date;
		[Export ("stringFromDate:")]
		string StringFromDate (NSDate date);

		// -(NSDate * _Nullable)dateFromString:(NSString * _Nonnull)string;
		[Export ("dateFromString:")]
		[return: NullAllowed]
		NSDate DateFromString (string @string);

		// +(NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date timeZone:(NSTimeZone * _Nonnull)timeZone formatOptions:(NSISO8601DateFormatOptions)formatOptions;
		[Static]
		[Export ("stringFromDate:timeZone:formatOptions:")]
		string StringFromDate (NSDate date, NSTimeZone timeZone, NSISO8601DateFormatOptions formatOptions);
	}

	// @interface NSMassFormatter : NSFormatter
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSMassFormatter
	{
		// @property (copy, null_resettable) NSNumberFormatter * _Null_unspecified numberFormatter;
		[NullAllowed, Export ("numberFormatter", ArgumentSemantic.Copy)]
		NSNumberFormatter NumberFormatter { get; set; }

		// @property NSFormattingUnitStyle unitStyle;
		[Export ("unitStyle", ArgumentSemantic.Assign)]
		NSFormattingUnitStyle UnitStyle { get; set; }

		// @property (getter = isForPersonMassUse) BOOL forPersonMassUse;
		[Export ("forPersonMassUse")]
		bool ForPersonMassUse { [Bind ("isForPersonMassUse")] get; set; }

		// -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSMassFormatterUnit)unit;
		[Export ("stringFromValue:unit:")]
		string StringFromValue (double value, NSMassFormatterUnit unit);

		// -(NSString * _Nonnull)stringFromKilograms:(double)numberInKilograms;
		[Export ("stringFromKilograms:")]
		string StringFromKilograms (double numberInKilograms);

		// -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSMassFormatterUnit)unit;
		[Export ("unitStringFromValue:unit:")]
		string UnitStringFromValue (double value, NSMassFormatterUnit unit);

		// -(NSString * _Nonnull)unitStringFromKilograms:(double)numberInKilograms usedUnit:(NSMassFormatterUnit * _Nullable)unitp;
		[Export ("unitStringFromKilograms:usedUnit:")]
		unsafe string UnitStringFromKilograms (double numberInKilograms, [NullAllowed] NSMassFormatterUnit* unitp);

		// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
		[Export ("getObjectValue:forString:errorDescription:")]
		bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	}

	// @interface NSLengthFormatter : NSFormatter
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSLengthFormatter
	{
		// @property (copy, null_resettable) NSNumberFormatter * _Null_unspecified numberFormatter;
		[NullAllowed, Export ("numberFormatter", ArgumentSemantic.Copy)]
		NSNumberFormatter NumberFormatter { get; set; }

		// @property NSFormattingUnitStyle unitStyle;
		[Export ("unitStyle", ArgumentSemantic.Assign)]
		NSFormattingUnitStyle UnitStyle { get; set; }

		// @property (getter = isForPersonHeightUse) BOOL forPersonHeightUse;
		[Export ("forPersonHeightUse")]
		bool ForPersonHeightUse { [Bind ("isForPersonHeightUse")] get; set; }

		// -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSLengthFormatterUnit)unit;
		[Export ("stringFromValue:unit:")]
		string StringFromValue (double value, NSLengthFormatterUnit unit);

		// -(NSString * _Nonnull)stringFromMeters:(double)numberInMeters;
		[Export ("stringFromMeters:")]
		string StringFromMeters (double numberInMeters);

		// -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSLengthFormatterUnit)unit;
		[Export ("unitStringFromValue:unit:")]
		string UnitStringFromValue (double value, NSLengthFormatterUnit unit);

		// -(NSString * _Nonnull)unitStringFromMeters:(double)numberInMeters usedUnit:(NSLengthFormatterUnit * _Nullable)unitp;
		[Export ("unitStringFromMeters:usedUnit:")]
		unsafe string UnitStringFromMeters (double numberInMeters, [NullAllowed] NSLengthFormatterUnit* unitp);

		// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
		[Export ("getObjectValue:forString:errorDescription:")]
		bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	}

	// @interface NSEnergyFormatter : NSFormatter
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSEnergyFormatter
	{
		// @property (copy, null_resettable) NSNumberFormatter * _Null_unspecified numberFormatter;
		[NullAllowed, Export ("numberFormatter", ArgumentSemantic.Copy)]
		NSNumberFormatter NumberFormatter { get; set; }

		// @property NSFormattingUnitStyle unitStyle;
		[Export ("unitStyle", ArgumentSemantic.Assign)]
		NSFormattingUnitStyle UnitStyle { get; set; }

		// @property (getter = isForFoodEnergyUse) BOOL forFoodEnergyUse;
		[Export ("forFoodEnergyUse")]
		bool ForFoodEnergyUse { [Bind ("isForFoodEnergyUse")] get; set; }

		// -(NSString * _Nonnull)stringFromValue:(double)value unit:(NSEnergyFormatterUnit)unit;
		[Export ("stringFromValue:unit:")]
		string StringFromValue (double value, NSEnergyFormatterUnit unit);

		// -(NSString * _Nonnull)stringFromJoules:(double)numberInJoules;
		[Export ("stringFromJoules:")]
		string StringFromJoules (double numberInJoules);

		// -(NSString * _Nonnull)unitStringFromValue:(double)value unit:(NSEnergyFormatterUnit)unit;
		[Export ("unitStringFromValue:unit:")]
		string UnitStringFromValue (double value, NSEnergyFormatterUnit unit);

		// -(NSString * _Nonnull)unitStringFromJoules:(double)numberInJoules usedUnit:(NSEnergyFormatterUnit * _Nullable)unitp;
		[Export ("unitStringFromJoules:usedUnit:")]
		unsafe string UnitStringFromJoules (double numberInJoules, [NullAllowed] NSEnergyFormatterUnit* unitp);

		// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
		[Export ("getObjectValue:forString:errorDescription:")]
		bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	}

	// @interface NSUnitConverter : NSObject
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSObject))]
	interface NSUnitConverter
	{
		// -(double)baseUnitValueFromValue:(double)value;
		[Export ("baseUnitValueFromValue:")]
		double BaseUnitValueFromValue (double value);

		// -(double)valueFromBaseUnitValue:(double)baseUnitValue;
		[Export ("valueFromBaseUnitValue:")]
		double ValueFromBaseUnitValue (double baseUnitValue);
	}

	// @interface NSUnitConverterLinear : NSUnitConverter <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSUnitConverter))]
	interface NSUnitConverterLinear : INSSecureCoding
	{
		// @property (readonly) double coefficient;
		[Export ("coefficient")]
		double Coefficient { get; }

		// @property (readonly) double constant;
		[Export ("constant")]
		double Constant { get; }

		// -(instancetype _Nonnull)initWithCoefficient:(double)coefficient;
		[Export ("initWithCoefficient:")]
		NativeHandle Constructor (double coefficient);

		// -(instancetype _Nonnull)initWithCoefficient:(double)coefficient constant:(double)constant __attribute__((objc_designated_initializer));
		[Export ("initWithCoefficient:constant:")]
		[DesignatedInitializer]
		NativeHandle Constructor (double coefficient, double constant);
	}

	// @interface NSUnit : NSObject <NSCopying, NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface NSUnit : INSCopying, INSSecureCoding
	{
		// @property (readonly, copy) NSString * _Nonnull symbol;
		[Export ("symbol")]
		string Symbol { get; }

		// +(instancetype _Nonnull)new __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoMac, NoiOS]
		[Static]
		[Export ("new")]
		NSUnit New ();

		// -(instancetype _Nonnull)initWithSymbol:(NSString * _Nonnull)symbol __attribute__((objc_designated_initializer));
		[Export ("initWithSymbol:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string symbol);
	}

	// @interface NSDimension : NSUnit <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSUnit))]
	interface NSDimension : INSSecureCoding
	{
		// @property (readonly, copy) NSUnitConverter * _Nonnull converter;
		[Export ("converter", ArgumentSemantic.Copy)]
		NSUnitConverter Converter { get; }

		// -(instancetype _Nonnull)initWithSymbol:(NSString * _Nonnull)symbol converter:(NSUnitConverter * _Nonnull)converter __attribute__((objc_designated_initializer));
		[Export ("initWithSymbol:converter:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string symbol, NSUnitConverter converter);

		// +(instancetype _Nonnull)baseUnit;
		[Static]
		[Export ("baseUnit")]
		NSDimension BaseUnit ();
	}

	// @interface NSUnitAcceleration : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitAcceleration : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitAcceleration * _Nonnull metersPerSecondSquared;
		[Static]
		[Export ("metersPerSecondSquared", ArgumentSemantic.Copy)]
		NSUnitAcceleration MetersPerSecondSquared { get; }

		// @property (readonly, copy, class) NSUnitAcceleration * _Nonnull gravity;
		[Static]
		[Export ("gravity", ArgumentSemantic.Copy)]
		NSUnitAcceleration Gravity { get; }
	}

	// @interface NSUnitAngle : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitAngle : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitAngle * _Nonnull degrees;
		[Static]
		[Export ("degrees", ArgumentSemantic.Copy)]
		NSUnitAngle Degrees { get; }

		// @property (readonly, copy, class) NSUnitAngle * _Nonnull arcMinutes;
		[Static]
		[Export ("arcMinutes", ArgumentSemantic.Copy)]
		NSUnitAngle ArcMinutes { get; }

		// @property (readonly, copy, class) NSUnitAngle * _Nonnull arcSeconds;
		[Static]
		[Export ("arcSeconds", ArgumentSemantic.Copy)]
		NSUnitAngle ArcSeconds { get; }

		// @property (readonly, copy, class) NSUnitAngle * _Nonnull radians;
		[Static]
		[Export ("radians", ArgumentSemantic.Copy)]
		NSUnitAngle Radians { get; }

		// @property (readonly, copy, class) NSUnitAngle * _Nonnull gradians;
		[Static]
		[Export ("gradians", ArgumentSemantic.Copy)]
		NSUnitAngle Gradians { get; }

		// @property (readonly, copy, class) NSUnitAngle * _Nonnull revolutions;
		[Static]
		[Export ("revolutions", ArgumentSemantic.Copy)]
		NSUnitAngle Revolutions { get; }
	}

	// @interface NSUnitArea : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitArea : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMegameters;
		[Static]
		[Export ("squareMegameters", ArgumentSemantic.Copy)]
		NSUnitArea SquareMegameters { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareKilometers;
		[Static]
		[Export ("squareKilometers", ArgumentSemantic.Copy)]
		NSUnitArea SquareKilometers { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMeters;
		[Static]
		[Export ("squareMeters", ArgumentSemantic.Copy)]
		NSUnitArea SquareMeters { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareCentimeters;
		[Static]
		[Export ("squareCentimeters", ArgumentSemantic.Copy)]
		NSUnitArea SquareCentimeters { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMillimeters;
		[Static]
		[Export ("squareMillimeters", ArgumentSemantic.Copy)]
		NSUnitArea SquareMillimeters { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMicrometers;
		[Static]
		[Export ("squareMicrometers", ArgumentSemantic.Copy)]
		NSUnitArea SquareMicrometers { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareNanometers;
		[Static]
		[Export ("squareNanometers", ArgumentSemantic.Copy)]
		NSUnitArea SquareNanometers { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareInches;
		[Static]
		[Export ("squareInches", ArgumentSemantic.Copy)]
		NSUnitArea SquareInches { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareFeet;
		[Static]
		[Export ("squareFeet", ArgumentSemantic.Copy)]
		NSUnitArea SquareFeet { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareYards;
		[Static]
		[Export ("squareYards", ArgumentSemantic.Copy)]
		NSUnitArea SquareYards { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull squareMiles;
		[Static]
		[Export ("squareMiles", ArgumentSemantic.Copy)]
		NSUnitArea SquareMiles { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull acres;
		[Static]
		[Export ("acres", ArgumentSemantic.Copy)]
		NSUnitArea Acres { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull ares;
		[Static]
		[Export ("ares", ArgumentSemantic.Copy)]
		NSUnitArea Ares { get; }

		// @property (readonly, copy, class) NSUnitArea * _Nonnull hectares;
		[Static]
		[Export ("hectares", ArgumentSemantic.Copy)]
		NSUnitArea Hectares { get; }
	}

	// @interface NSUnitConcentrationMass : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitConcentrationMass : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitConcentrationMass * _Nonnull gramsPerLiter;
		[Static]
		[Export ("gramsPerLiter", ArgumentSemantic.Copy)]
		NSUnitConcentrationMass GramsPerLiter { get; }

		// @property (readonly, copy, class) NSUnitConcentrationMass * _Nonnull milligramsPerDeciliter;
		[Static]
		[Export ("milligramsPerDeciliter", ArgumentSemantic.Copy)]
		NSUnitConcentrationMass MilligramsPerDeciliter { get; }

		// +(NSUnitConcentrationMass * _Nonnull)millimolesPerLiterWithGramsPerMole:(double)gramsPerMole;
		[Static]
		[Export ("millimolesPerLiterWithGramsPerMole:")]
		NSUnitConcentrationMass MillimolesPerLiterWithGramsPerMole (double gramsPerMole);
	}

	// @interface NSUnitDispersion : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitDispersion : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitDispersion * _Nonnull partsPerMillion;
		[Static]
		[Export ("partsPerMillion", ArgumentSemantic.Copy)]
		NSUnitDispersion PartsPerMillion { get; }
	}

	// @interface NSUnitDuration : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitDuration : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitDuration * _Nonnull hours;
		[Static]
		[Export ("hours", ArgumentSemantic.Copy)]
		NSUnitDuration Hours { get; }

		// @property (readonly, copy, class) NSUnitDuration * _Nonnull minutes;
		[Static]
		[Export ("minutes", ArgumentSemantic.Copy)]
		NSUnitDuration Minutes { get; }

		// @property (readonly, copy, class) NSUnitDuration * _Nonnull seconds;
		[Static]
		[Export ("seconds", ArgumentSemantic.Copy)]
		NSUnitDuration Seconds { get; }

		// @property (readonly, copy, class) NSUnitDuration * _Nonnull milliseconds __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Static]
		[Export ("milliseconds", ArgumentSemantic.Copy)]
		NSUnitDuration Milliseconds { get; }

		// @property (readonly, copy, class) NSUnitDuration * _Nonnull microseconds __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Static]
		[Export ("microseconds", ArgumentSemantic.Copy)]
		NSUnitDuration Microseconds { get; }

		// @property (readonly, copy, class) NSUnitDuration * _Nonnull nanoseconds __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Static]
		[Export ("nanoseconds", ArgumentSemantic.Copy)]
		NSUnitDuration Nanoseconds { get; }

		// @property (readonly, copy, class) NSUnitDuration * _Nonnull picoseconds __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Static]
		[Export ("picoseconds", ArgumentSemantic.Copy)]
		NSUnitDuration Picoseconds { get; }
	}

	// @interface NSUnitElectricCharge : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitElectricCharge : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull coulombs;
		[Static]
		[Export ("coulombs", ArgumentSemantic.Copy)]
		NSUnitElectricCharge Coulombs { get; }

		// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull megaampereHours;
		[Static]
		[Export ("megaampereHours", ArgumentSemantic.Copy)]
		NSUnitElectricCharge MegaampereHours { get; }

		// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull kiloampereHours;
		[Static]
		[Export ("kiloampereHours", ArgumentSemantic.Copy)]
		NSUnitElectricCharge KiloampereHours { get; }

		// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull ampereHours;
		[Static]
		[Export ("ampereHours", ArgumentSemantic.Copy)]
		NSUnitElectricCharge AmpereHours { get; }

		// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull milliampereHours;
		[Static]
		[Export ("milliampereHours", ArgumentSemantic.Copy)]
		NSUnitElectricCharge MilliampereHours { get; }

		// @property (readonly, copy, class) NSUnitElectricCharge * _Nonnull microampereHours;
		[Static]
		[Export ("microampereHours", ArgumentSemantic.Copy)]
		NSUnitElectricCharge MicroampereHours { get; }
	}

	// @interface NSUnitElectricCurrent : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitElectricCurrent : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull megaamperes;
		[Static]
		[Export ("megaamperes", ArgumentSemantic.Copy)]
		NSUnitElectricCurrent Megaamperes { get; }

		// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull kiloamperes;
		[Static]
		[Export ("kiloamperes", ArgumentSemantic.Copy)]
		NSUnitElectricCurrent Kiloamperes { get; }

		// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull amperes;
		[Static]
		[Export ("amperes", ArgumentSemantic.Copy)]
		NSUnitElectricCurrent Amperes { get; }

		// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull milliamperes;
		[Static]
		[Export ("milliamperes", ArgumentSemantic.Copy)]
		NSUnitElectricCurrent Milliamperes { get; }

		// @property (readonly, copy, class) NSUnitElectricCurrent * _Nonnull microamperes;
		[Static]
		[Export ("microamperes", ArgumentSemantic.Copy)]
		NSUnitElectricCurrent Microamperes { get; }
	}

	// @interface NSUnitElectricPotentialDifference : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitElectricPotentialDifference : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull megavolts;
		[Static]
		[Export ("megavolts", ArgumentSemantic.Copy)]
		NSUnitElectricPotentialDifference Megavolts { get; }

		// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull kilovolts;
		[Static]
		[Export ("kilovolts", ArgumentSemantic.Copy)]
		NSUnitElectricPotentialDifference Kilovolts { get; }

		// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull volts;
		[Static]
		[Export ("volts", ArgumentSemantic.Copy)]
		NSUnitElectricPotentialDifference Volts { get; }

		// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull millivolts;
		[Static]
		[Export ("millivolts", ArgumentSemantic.Copy)]
		NSUnitElectricPotentialDifference Millivolts { get; }

		// @property (readonly, copy, class) NSUnitElectricPotentialDifference * _Nonnull microvolts;
		[Static]
		[Export ("microvolts", ArgumentSemantic.Copy)]
		NSUnitElectricPotentialDifference Microvolts { get; }
	}

	// @interface NSUnitElectricResistance : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitElectricResistance : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull megaohms;
		[Static]
		[Export ("megaohms", ArgumentSemantic.Copy)]
		NSUnitElectricResistance Megaohms { get; }

		// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull kiloohms;
		[Static]
		[Export ("kiloohms", ArgumentSemantic.Copy)]
		NSUnitElectricResistance Kiloohms { get; }

		// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull ohms;
		[Static]
		[Export ("ohms", ArgumentSemantic.Copy)]
		NSUnitElectricResistance Ohms { get; }

		// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull milliohms;
		[Static]
		[Export ("milliohms", ArgumentSemantic.Copy)]
		NSUnitElectricResistance Milliohms { get; }

		// @property (readonly, copy, class) NSUnitElectricResistance * _Nonnull microohms;
		[Static]
		[Export ("microohms", ArgumentSemantic.Copy)]
		NSUnitElectricResistance Microohms { get; }
	}

	// @interface NSUnitEnergy : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitEnergy : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilojoules;
		[Static]
		[Export ("kilojoules", ArgumentSemantic.Copy)]
		NSUnitEnergy Kilojoules { get; }

		// @property (readonly, copy, class) NSUnitEnergy * _Nonnull joules;
		[Static]
		[Export ("joules", ArgumentSemantic.Copy)]
		NSUnitEnergy Joules { get; }

		// @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilocalories;
		[Static]
		[Export ("kilocalories", ArgumentSemantic.Copy)]
		NSUnitEnergy Kilocalories { get; }

		// @property (readonly, copy, class) NSUnitEnergy * _Nonnull calories;
		[Static]
		[Export ("calories", ArgumentSemantic.Copy)]
		NSUnitEnergy Calories { get; }

		// @property (readonly, copy, class) NSUnitEnergy * _Nonnull kilowattHours;
		[Static]
		[Export ("kilowattHours", ArgumentSemantic.Copy)]
		NSUnitEnergy KilowattHours { get; }
	}

	// @interface NSUnitFrequency : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitFrequency : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull terahertz;
		[Static]
		[Export ("terahertz", ArgumentSemantic.Copy)]
		NSUnitFrequency Terahertz { get; }

		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull gigahertz;
		[Static]
		[Export ("gigahertz", ArgumentSemantic.Copy)]
		NSUnitFrequency Gigahertz { get; }

		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull megahertz;
		[Static]
		[Export ("megahertz", ArgumentSemantic.Copy)]
		NSUnitFrequency Megahertz { get; }

		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull kilohertz;
		[Static]
		[Export ("kilohertz", ArgumentSemantic.Copy)]
		NSUnitFrequency Kilohertz { get; }

		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull hertz;
		[Static]
		[Export ("hertz", ArgumentSemantic.Copy)]
		NSUnitFrequency Hertz { get; }

		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull millihertz;
		[Static]
		[Export ("millihertz", ArgumentSemantic.Copy)]
		NSUnitFrequency Millihertz { get; }

		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull microhertz;
		[Static]
		[Export ("microhertz", ArgumentSemantic.Copy)]
		NSUnitFrequency Microhertz { get; }

		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull nanohertz;
		[Static]
		[Export ("nanohertz", ArgumentSemantic.Copy)]
		NSUnitFrequency Nanohertz { get; }

		// @property (readonly, copy, class) NSUnitFrequency * _Nonnull framesPerSecond __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Static]
		[Export ("framesPerSecond", ArgumentSemantic.Copy)]
		NSUnitFrequency FramesPerSecond { get; }
	}

	// @interface NSUnitFuelEfficiency : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitFuelEfficiency : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull litersPer100Kilometers;
		[Static]
		[Export ("litersPer100Kilometers", ArgumentSemantic.Copy)]
		NSUnitFuelEfficiency LitersPer100Kilometers { get; }

		// @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull milesPerImperialGallon;
		[Static]
		[Export ("milesPerImperialGallon", ArgumentSemantic.Copy)]
		NSUnitFuelEfficiency MilesPerImperialGallon { get; }

		// @property (readonly, copy, class) NSUnitFuelEfficiency * _Nonnull milesPerGallon;
		[Static]
		[Export ("milesPerGallon", ArgumentSemantic.Copy)]
		NSUnitFuelEfficiency MilesPerGallon { get; }
	}

	// @interface NSUnitInformationStorage : NSDimension <NSSecureCoding>
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitInformationStorage : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull bytes;
		[Static]
		[Export ("bytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Bytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull bits;
		[Static]
		[Export ("bits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Bits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull nibbles;
		[Static]
		[Export ("nibbles", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Nibbles { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull yottabytes;
		[Static]
		[Export ("yottabytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Yottabytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull zettabytes;
		[Static]
		[Export ("zettabytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Zettabytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull exabytes;
		[Static]
		[Export ("exabytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Exabytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull petabytes;
		[Static]
		[Export ("petabytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Petabytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull terabytes;
		[Static]
		[Export ("terabytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Terabytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull gigabytes;
		[Static]
		[Export ("gigabytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Gigabytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull megabytes;
		[Static]
		[Export ("megabytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Megabytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull kilobytes;
		[Static]
		[Export ("kilobytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Kilobytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull yottabits;
		[Static]
		[Export ("yottabits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Yottabits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull zettabits;
		[Static]
		[Export ("zettabits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Zettabits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull exabits;
		[Static]
		[Export ("exabits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Exabits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull petabits;
		[Static]
		[Export ("petabits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Petabits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull terabits;
		[Static]
		[Export ("terabits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Terabits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull gigabits;
		[Static]
		[Export ("gigabits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Gigabits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull megabits;
		[Static]
		[Export ("megabits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Megabits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull kilobits;
		[Static]
		[Export ("kilobits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Kilobits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull yobibytes;
		[Static]
		[Export ("yobibytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Yobibytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull zebibytes;
		[Static]
		[Export ("zebibytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Zebibytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull exbibytes;
		[Static]
		[Export ("exbibytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Exbibytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull pebibytes;
		[Static]
		[Export ("pebibytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Pebibytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull tebibytes;
		[Static]
		[Export ("tebibytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Tebibytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull gibibytes;
		[Static]
		[Export ("gibibytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Gibibytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull mebibytes;
		[Static]
		[Export ("mebibytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Mebibytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull kibibytes;
		[Static]
		[Export ("kibibytes", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Kibibytes { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull yobibits;
		[Static]
		[Export ("yobibits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Yobibits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull zebibits;
		[Static]
		[Export ("zebibits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Zebibits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull exbibits;
		[Static]
		[Export ("exbibits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Exbibits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull pebibits;
		[Static]
		[Export ("pebibits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Pebibits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull tebibits;
		[Static]
		[Export ("tebibits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Tebibits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull gibibits;
		[Static]
		[Export ("gibibits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Gibibits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull mebibits;
		[Static]
		[Export ("mebibits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Mebibits { get; }

		// @property (readonly, copy, class) NSUnitInformationStorage * _Nonnull kibibits;
		[Static]
		[Export ("kibibits", ArgumentSemantic.Copy)]
		NSUnitInformationStorage Kibibits { get; }
	}

	// @interface NSUnitLength : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitLength : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitLength * _Nonnull megameters;
		[Static]
		[Export ("megameters", ArgumentSemantic.Copy)]
		NSUnitLength Megameters { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull kilometers;
		[Static]
		[Export ("kilometers", ArgumentSemantic.Copy)]
		NSUnitLength Kilometers { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull hectometers;
		[Static]
		[Export ("hectometers", ArgumentSemantic.Copy)]
		NSUnitLength Hectometers { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull decameters;
		[Static]
		[Export ("decameters", ArgumentSemantic.Copy)]
		NSUnitLength Decameters { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull meters;
		[Static]
		[Export ("meters", ArgumentSemantic.Copy)]
		NSUnitLength Meters { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull decimeters;
		[Static]
		[Export ("decimeters", ArgumentSemantic.Copy)]
		NSUnitLength Decimeters { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull centimeters;
		[Static]
		[Export ("centimeters", ArgumentSemantic.Copy)]
		NSUnitLength Centimeters { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull millimeters;
		[Static]
		[Export ("millimeters", ArgumentSemantic.Copy)]
		NSUnitLength Millimeters { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull micrometers;
		[Static]
		[Export ("micrometers", ArgumentSemantic.Copy)]
		NSUnitLength Micrometers { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull nanometers;
		[Static]
		[Export ("nanometers", ArgumentSemantic.Copy)]
		NSUnitLength Nanometers { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull picometers;
		[Static]
		[Export ("picometers", ArgumentSemantic.Copy)]
		NSUnitLength Picometers { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull inches;
		[Static]
		[Export ("inches", ArgumentSemantic.Copy)]
		NSUnitLength Inches { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull feet;
		[Static]
		[Export ("feet", ArgumentSemantic.Copy)]
		NSUnitLength Feet { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull yards;
		[Static]
		[Export ("yards", ArgumentSemantic.Copy)]
		NSUnitLength Yards { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull miles;
		[Static]
		[Export ("miles", ArgumentSemantic.Copy)]
		NSUnitLength Miles { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull scandinavianMiles;
		[Static]
		[Export ("scandinavianMiles", ArgumentSemantic.Copy)]
		NSUnitLength ScandinavianMiles { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull lightyears;
		[Static]
		[Export ("lightyears", ArgumentSemantic.Copy)]
		NSUnitLength Lightyears { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull nauticalMiles;
		[Static]
		[Export ("nauticalMiles", ArgumentSemantic.Copy)]
		NSUnitLength NauticalMiles { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull fathoms;
		[Static]
		[Export ("fathoms", ArgumentSemantic.Copy)]
		NSUnitLength Fathoms { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull furlongs;
		[Static]
		[Export ("furlongs", ArgumentSemantic.Copy)]
		NSUnitLength Furlongs { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull astronomicalUnits;
		[Static]
		[Export ("astronomicalUnits", ArgumentSemantic.Copy)]
		NSUnitLength AstronomicalUnits { get; }

		// @property (readonly, copy, class) NSUnitLength * _Nonnull parsecs;
		[Static]
		[Export ("parsecs", ArgumentSemantic.Copy)]
		NSUnitLength Parsecs { get; }
	}

	// @interface NSUnitIlluminance : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitIlluminance : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitIlluminance * _Nonnull lux;
		[Static]
		[Export ("lux", ArgumentSemantic.Copy)]
		NSUnitIlluminance Lux { get; }
	}

	// @interface NSUnitMass : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitMass : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitMass * _Nonnull kilograms;
		[Static]
		[Export ("kilograms", ArgumentSemantic.Copy)]
		NSUnitMass Kilograms { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull grams;
		[Static]
		[Export ("grams", ArgumentSemantic.Copy)]
		NSUnitMass Grams { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull decigrams;
		[Static]
		[Export ("decigrams", ArgumentSemantic.Copy)]
		NSUnitMass Decigrams { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull centigrams;
		[Static]
		[Export ("centigrams", ArgumentSemantic.Copy)]
		NSUnitMass Centigrams { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull milligrams;
		[Static]
		[Export ("milligrams", ArgumentSemantic.Copy)]
		NSUnitMass Milligrams { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull micrograms;
		[Static]
		[Export ("micrograms", ArgumentSemantic.Copy)]
		NSUnitMass Micrograms { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull nanograms;
		[Static]
		[Export ("nanograms", ArgumentSemantic.Copy)]
		NSUnitMass Nanograms { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull picograms;
		[Static]
		[Export ("picograms", ArgumentSemantic.Copy)]
		NSUnitMass Picograms { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull ounces;
		[Static]
		[Export ("ounces", ArgumentSemantic.Copy)]
		NSUnitMass Ounces { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull poundsMass;
		[Static]
		[Export ("poundsMass", ArgumentSemantic.Copy)]
		NSUnitMass PoundsMass { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull stones;
		[Static]
		[Export ("stones", ArgumentSemantic.Copy)]
		NSUnitMass Stones { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull metricTons;
		[Static]
		[Export ("metricTons", ArgumentSemantic.Copy)]
		NSUnitMass MetricTons { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull shortTons;
		[Static]
		[Export ("shortTons", ArgumentSemantic.Copy)]
		NSUnitMass ShortTons { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull carats;
		[Static]
		[Export ("carats", ArgumentSemantic.Copy)]
		NSUnitMass Carats { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull ouncesTroy;
		[Static]
		[Export ("ouncesTroy", ArgumentSemantic.Copy)]
		NSUnitMass OuncesTroy { get; }

		// @property (readonly, copy, class) NSUnitMass * _Nonnull slugs;
		[Static]
		[Export ("slugs", ArgumentSemantic.Copy)]
		NSUnitMass Slugs { get; }
	}

	// @interface NSUnitPower : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitPower : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitPower * _Nonnull terawatts;
		[Static]
		[Export ("terawatts", ArgumentSemantic.Copy)]
		NSUnitPower Terawatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull gigawatts;
		[Static]
		[Export ("gigawatts", ArgumentSemantic.Copy)]
		NSUnitPower Gigawatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull megawatts;
		[Static]
		[Export ("megawatts", ArgumentSemantic.Copy)]
		NSUnitPower Megawatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull kilowatts;
		[Static]
		[Export ("kilowatts", ArgumentSemantic.Copy)]
		NSUnitPower Kilowatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull watts;
		[Static]
		[Export ("watts", ArgumentSemantic.Copy)]
		NSUnitPower Watts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull milliwatts;
		[Static]
		[Export ("milliwatts", ArgumentSemantic.Copy)]
		NSUnitPower Milliwatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull microwatts;
		[Static]
		[Export ("microwatts", ArgumentSemantic.Copy)]
		NSUnitPower Microwatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull nanowatts;
		[Static]
		[Export ("nanowatts", ArgumentSemantic.Copy)]
		NSUnitPower Nanowatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull picowatts;
		[Static]
		[Export ("picowatts", ArgumentSemantic.Copy)]
		NSUnitPower Picowatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull femtowatts;
		[Static]
		[Export ("femtowatts", ArgumentSemantic.Copy)]
		NSUnitPower Femtowatts { get; }

		// @property (readonly, copy, class) NSUnitPower * _Nonnull horsepower;
		[Static]
		[Export ("horsepower", ArgumentSemantic.Copy)]
		NSUnitPower Horsepower { get; }
	}

	// @interface NSUnitPressure : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitPressure : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitPressure * _Nonnull newtonsPerMetersSquared;
		[Static]
		[Export ("newtonsPerMetersSquared", ArgumentSemantic.Copy)]
		NSUnitPressure NewtonsPerMetersSquared { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull gigapascals;
		[Static]
		[Export ("gigapascals", ArgumentSemantic.Copy)]
		NSUnitPressure Gigapascals { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull megapascals;
		[Static]
		[Export ("megapascals", ArgumentSemantic.Copy)]
		NSUnitPressure Megapascals { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull kilopascals;
		[Static]
		[Export ("kilopascals", ArgumentSemantic.Copy)]
		NSUnitPressure Kilopascals { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull hectopascals;
		[Static]
		[Export ("hectopascals", ArgumentSemantic.Copy)]
		NSUnitPressure Hectopascals { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull inchesOfMercury;
		[Static]
		[Export ("inchesOfMercury", ArgumentSemantic.Copy)]
		NSUnitPressure InchesOfMercury { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull bars;
		[Static]
		[Export ("bars", ArgumentSemantic.Copy)]
		NSUnitPressure Bars { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull millibars;
		[Static]
		[Export ("millibars", ArgumentSemantic.Copy)]
		NSUnitPressure Millibars { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull millimetersOfMercury;
		[Static]
		[Export ("millimetersOfMercury", ArgumentSemantic.Copy)]
		NSUnitPressure MillimetersOfMercury { get; }

		// @property (readonly, copy, class) NSUnitPressure * _Nonnull poundsForcePerSquareInch;
		[Static]
		[Export ("poundsForcePerSquareInch", ArgumentSemantic.Copy)]
		NSUnitPressure PoundsForcePerSquareInch { get; }
	}

	// @interface NSUnitSpeed : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitSpeed : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitSpeed * _Nonnull metersPerSecond;
		[Static]
		[Export ("metersPerSecond", ArgumentSemantic.Copy)]
		NSUnitSpeed MetersPerSecond { get; }

		// @property (readonly, copy, class) NSUnitSpeed * _Nonnull kilometersPerHour;
		[Static]
		[Export ("kilometersPerHour", ArgumentSemantic.Copy)]
		NSUnitSpeed KilometersPerHour { get; }

		// @property (readonly, copy, class) NSUnitSpeed * _Nonnull milesPerHour;
		[Static]
		[Export ("milesPerHour", ArgumentSemantic.Copy)]
		NSUnitSpeed MilesPerHour { get; }

		// @property (readonly, copy, class) NSUnitSpeed * _Nonnull knots;
		[Static]
		[Export ("knots", ArgumentSemantic.Copy)]
		NSUnitSpeed Knots { get; }
	}

	// @interface NSUnitTemperature : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitTemperature : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitTemperature * _Nonnull kelvin;
		[Static]
		[Export ("kelvin", ArgumentSemantic.Copy)]
		NSUnitTemperature Kelvin { get; }

		// @property (readonly, copy, class) NSUnitTemperature * _Nonnull celsius;
		[Static]
		[Export ("celsius", ArgumentSemantic.Copy)]
		NSUnitTemperature Celsius { get; }

		// @property (readonly, copy, class) NSUnitTemperature * _Nonnull fahrenheit;
		[Static]
		[Export ("fahrenheit", ArgumentSemantic.Copy)]
		NSUnitTemperature Fahrenheit { get; }
	}

	// @interface NSUnitVolume : NSDimension <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSDimension))]
	interface NSUnitVolume : INSSecureCoding
	{
		// @property (readonly, copy, class) NSUnitVolume * _Nonnull megaliters;
		[Static]
		[Export ("megaliters", ArgumentSemantic.Copy)]
		NSUnitVolume Megaliters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull kiloliters;
		[Static]
		[Export ("kiloliters", ArgumentSemantic.Copy)]
		NSUnitVolume Kiloliters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull liters;
		[Static]
		[Export ("liters", ArgumentSemantic.Copy)]
		NSUnitVolume Liters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull deciliters;
		[Static]
		[Export ("deciliters", ArgumentSemantic.Copy)]
		NSUnitVolume Deciliters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull centiliters;
		[Static]
		[Export ("centiliters", ArgumentSemantic.Copy)]
		NSUnitVolume Centiliters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull milliliters;
		[Static]
		[Export ("milliliters", ArgumentSemantic.Copy)]
		NSUnitVolume Milliliters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicKilometers;
		[Static]
		[Export ("cubicKilometers", ArgumentSemantic.Copy)]
		NSUnitVolume CubicKilometers { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMeters;
		[Static]
		[Export ("cubicMeters", ArgumentSemantic.Copy)]
		NSUnitVolume CubicMeters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicDecimeters;
		[Static]
		[Export ("cubicDecimeters", ArgumentSemantic.Copy)]
		NSUnitVolume CubicDecimeters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicCentimeters;
		[Static]
		[Export ("cubicCentimeters", ArgumentSemantic.Copy)]
		NSUnitVolume CubicCentimeters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMillimeters;
		[Static]
		[Export ("cubicMillimeters", ArgumentSemantic.Copy)]
		NSUnitVolume CubicMillimeters { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicInches;
		[Static]
		[Export ("cubicInches", ArgumentSemantic.Copy)]
		NSUnitVolume CubicInches { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicFeet;
		[Static]
		[Export ("cubicFeet", ArgumentSemantic.Copy)]
		NSUnitVolume CubicFeet { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicYards;
		[Static]
		[Export ("cubicYards", ArgumentSemantic.Copy)]
		NSUnitVolume CubicYards { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cubicMiles;
		[Static]
		[Export ("cubicMiles", ArgumentSemantic.Copy)]
		NSUnitVolume CubicMiles { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull acreFeet;
		[Static]
		[Export ("acreFeet", ArgumentSemantic.Copy)]
		NSUnitVolume AcreFeet { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull bushels;
		[Static]
		[Export ("bushels", ArgumentSemantic.Copy)]
		NSUnitVolume Bushels { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull teaspoons;
		[Static]
		[Export ("teaspoons", ArgumentSemantic.Copy)]
		NSUnitVolume Teaspoons { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull tablespoons;
		[Static]
		[Export ("tablespoons", ArgumentSemantic.Copy)]
		NSUnitVolume Tablespoons { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull fluidOunces;
		[Static]
		[Export ("fluidOunces", ArgumentSemantic.Copy)]
		NSUnitVolume FluidOunces { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull cups;
		[Static]
		[Export ("cups", ArgumentSemantic.Copy)]
		NSUnitVolume Cups { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull pints;
		[Static]
		[Export ("pints", ArgumentSemantic.Copy)]
		NSUnitVolume Pints { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull quarts;
		[Static]
		[Export ("quarts", ArgumentSemantic.Copy)]
		NSUnitVolume Quarts { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull gallons;
		[Static]
		[Export ("gallons", ArgumentSemantic.Copy)]
		NSUnitVolume Gallons { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialTeaspoons;
		[Static]
		[Export ("imperialTeaspoons", ArgumentSemantic.Copy)]
		NSUnitVolume ImperialTeaspoons { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialTablespoons;
		[Static]
		[Export ("imperialTablespoons", ArgumentSemantic.Copy)]
		NSUnitVolume ImperialTablespoons { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialFluidOunces;
		[Static]
		[Export ("imperialFluidOunces", ArgumentSemantic.Copy)]
		NSUnitVolume ImperialFluidOunces { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialPints;
		[Static]
		[Export ("imperialPints", ArgumentSemantic.Copy)]
		NSUnitVolume ImperialPints { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialQuarts;
		[Static]
		[Export ("imperialQuarts", ArgumentSemantic.Copy)]
		NSUnitVolume ImperialQuarts { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull imperialGallons;
		[Static]
		[Export ("imperialGallons", ArgumentSemantic.Copy)]
		NSUnitVolume ImperialGallons { get; }

		// @property (readonly, copy, class) NSUnitVolume * _Nonnull metricCups;
		[Static]
		[Export ("metricCups", ArgumentSemantic.Copy)]
		NSUnitVolume MetricCups { get; }
	}

	// audit-objc-generics: @interface NSMeasurement<UnitType : NSUnit *> : NSObject <NSCopying, NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface NSMeasurement : INSCopying, INSSecureCoding
	{
		// @property (readonly, copy) UnitType _Nonnull unit;
		[Export ("unit", ArgumentSemantic.Copy)]
		NSUnit Unit { get; }

		// @property (readonly) double doubleValue;
		[Export ("doubleValue")]
		double DoubleValue { get; }

		// -(instancetype _Nonnull)initWithDoubleValue:(double)doubleValue unit:(UnitType _Nonnull)unit __attribute__((objc_designated_initializer));
		[Export ("initWithDoubleValue:unit:")]
		[DesignatedInitializer]
		NativeHandle Constructor (double doubleValue, NSUnit unit);

		// -(BOOL)canBeConvertedToUnit:(NSUnit * _Nonnull)unit;
		[Export ("canBeConvertedToUnit:")]
		bool CanBeConvertedToUnit (NSUnit unit);

		// -(NSMeasurement * _Nonnull)measurementByConvertingToUnit:(NSUnit * _Nonnull)unit;
		[Export ("measurementByConvertingToUnit:")]
		NSMeasurement MeasurementByConvertingToUnit (NSUnit unit);

		// -(NSMeasurement<UnitType> * _Nonnull)measurementByAddingMeasurement:(NSMeasurement<UnitType> * _Nonnull)measurement;
		[Export ("measurementByAddingMeasurement:")]
		NSMeasurement<NSUnit> MeasurementByAddingMeasurement (NSMeasurement<NSUnit> measurement);

		// -(NSMeasurement<UnitType> * _Nonnull)measurementBySubtractingMeasurement:(NSMeasurement<UnitType> * _Nonnull)measurement;
		[Export ("measurementBySubtractingMeasurement:")]
		NSMeasurement<NSUnit> MeasurementBySubtractingMeasurement (NSMeasurement<NSUnit> measurement);
	}

	// @interface NSNumberFormatter : NSFormatter
	[BaseType (typeof(NSFormatter))]
	interface NSNumberFormatter
	{
		// @property NSFormattingContext formattingContext __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("formattingContext", ArgumentSemantic.Assign)]
		NSFormattingContext FormattingContext { get; set; }

		// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string range:(NSRange * _Nullable)rangep error:(NSError * _Nullable * _Nullable)error;
		[Export ("getObjectValue:forString:range:error:")]
		unsafe bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] NSRange* rangep, [NullAllowed] out NSError error);

		// -(NSString * _Nullable)stringFromNumber:(NSNumber * _Nonnull)number;
		[Export ("stringFromNumber:")]
		[return: NullAllowed]
		string StringFromNumber (NSNumber number);

		// -(NSNumber * _Nullable)numberFromString:(NSString * _Nonnull)string;
		[Export ("numberFromString:")]
		[return: NullAllowed]
		NSNumber NumberFromString (string @string);

		// +(NSString * _Nonnull)localizedStringFromNumber:(NSNumber * _Nonnull)num numberStyle:(NSNumberFormatterStyle)nstyle __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("localizedStringFromNumber:numberStyle:")]
		string LocalizedStringFromNumber (NSNumber num, NSNumberFormatterStyle nstyle);

		// +(NSNumberFormatterBehavior)defaultFormatterBehavior;
		// +(void)setDefaultFormatterBehavior:(NSNumberFormatterBehavior)behavior;
		[Static]
		[Export ("defaultFormatterBehavior")]
		NSNumberFormatterBehavior DefaultFormatterBehavior { get; set; }

		// @property NSNumberFormatterStyle numberStyle;
		[Export ("numberStyle", ArgumentSemantic.Assign)]
		NSNumberFormatterStyle NumberStyle { get; set; }

		// @property (copy, null_resettable) NSLocale * _Null_unspecified locale;
		[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
		NSLocale Locale { get; set; }

		// @property BOOL generatesDecimalNumbers;
		[Export ("generatesDecimalNumbers")]
		bool GeneratesDecimalNumbers { get; set; }

		// @property NSNumberFormatterBehavior formatterBehavior;
		[Export ("formatterBehavior", ArgumentSemantic.Assign)]
		NSNumberFormatterBehavior FormatterBehavior { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified negativeFormat;
		[NullAllowed, Export ("negativeFormat")]
		string NegativeFormat { get; set; }

		// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNegativeValues;
		[NullAllowed, Export ("textAttributesForNegativeValues", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TextAttributesForNegativeValues { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified positiveFormat;
		[NullAllowed, Export ("positiveFormat")]
		string PositiveFormat { get; set; }

		// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForPositiveValues;
		[NullAllowed, Export ("textAttributesForPositiveValues", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TextAttributesForPositiveValues { get; set; }

		// @property BOOL allowsFloats;
		[Export ("allowsFloats")]
		bool AllowsFloats { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified decimalSeparator;
		[NullAllowed, Export ("decimalSeparator")]
		string DecimalSeparator { get; set; }

		// @property BOOL alwaysShowsDecimalSeparator;
		[Export ("alwaysShowsDecimalSeparator")]
		bool AlwaysShowsDecimalSeparator { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified currencyDecimalSeparator;
		[NullAllowed, Export ("currencyDecimalSeparator")]
		string CurrencyDecimalSeparator { get; set; }

		// @property BOOL usesGroupingSeparator;
		[Export ("usesGroupingSeparator")]
		bool UsesGroupingSeparator { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified groupingSeparator;
		[NullAllowed, Export ("groupingSeparator")]
		string GroupingSeparator { get; set; }

		// @property (copy) NSString * _Nullable zeroSymbol;
		[NullAllowed, Export ("zeroSymbol")]
		string ZeroSymbol { get; set; }

		// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForZero;
		[NullAllowed, Export ("textAttributesForZero", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TextAttributesForZero { get; set; }

		// @property (copy) NSString * _Nonnull nilSymbol;
		[Export ("nilSymbol")]
		string NilSymbol { get; set; }

		// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNil;
		[NullAllowed, Export ("textAttributesForNil", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TextAttributesForNil { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified notANumberSymbol;
		[NullAllowed, Export ("notANumberSymbol")]
		string NotANumberSymbol { get; set; }

		// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNotANumber;
		[NullAllowed, Export ("textAttributesForNotANumber", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TextAttributesForNotANumber { get; set; }

		// @property (copy) NSString * _Nonnull positiveInfinitySymbol;
		[Export ("positiveInfinitySymbol")]
		string PositiveInfinitySymbol { get; set; }

		// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForPositiveInfinity;
		[NullAllowed, Export ("textAttributesForPositiveInfinity", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TextAttributesForPositiveInfinity { get; set; }

		// @property (copy) NSString * _Nonnull negativeInfinitySymbol;
		[Export ("negativeInfinitySymbol")]
		string NegativeInfinitySymbol { get; set; }

		// @property (copy) NSDictionary<NSString *,id> * _Nullable textAttributesForNegativeInfinity;
		[NullAllowed, Export ("textAttributesForNegativeInfinity", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TextAttributesForNegativeInfinity { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified positivePrefix;
		[NullAllowed, Export ("positivePrefix")]
		string PositivePrefix { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified positiveSuffix;
		[NullAllowed, Export ("positiveSuffix")]
		string PositiveSuffix { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified negativePrefix;
		[NullAllowed, Export ("negativePrefix")]
		string NegativePrefix { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified negativeSuffix;
		[NullAllowed, Export ("negativeSuffix")]
		string NegativeSuffix { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified currencyCode;
		[NullAllowed, Export ("currencyCode")]
		string CurrencyCode { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified currencySymbol;
		[NullAllowed, Export ("currencySymbol")]
		string CurrencySymbol { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified internationalCurrencySymbol;
		[NullAllowed, Export ("internationalCurrencySymbol")]
		string InternationalCurrencySymbol { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified percentSymbol;
		[NullAllowed, Export ("percentSymbol")]
		string PercentSymbol { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified perMillSymbol;
		[NullAllowed, Export ("perMillSymbol")]
		string PerMillSymbol { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified minusSign;
		[NullAllowed, Export ("minusSign")]
		string MinusSign { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified plusSign;
		[NullAllowed, Export ("plusSign")]
		string PlusSign { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified exponentSymbol;
		[NullAllowed, Export ("exponentSymbol")]
		string ExponentSymbol { get; set; }

		// @property NSUInteger groupingSize;
		[Export ("groupingSize")]
		nuint GroupingSize { get; set; }

		// @property NSUInteger secondaryGroupingSize;
		[Export ("secondaryGroupingSize")]
		nuint SecondaryGroupingSize { get; set; }

		// @property (copy) NSNumber * _Nullable multiplier;
		[NullAllowed, Export ("multiplier", ArgumentSemantic.Copy)]
		NSNumber Multiplier { get; set; }

		// @property NSUInteger formatWidth;
		[Export ("formatWidth")]
		nuint FormatWidth { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified paddingCharacter;
		[NullAllowed, Export ("paddingCharacter")]
		string PaddingCharacter { get; set; }

		// @property NSNumberFormatterPadPosition paddingPosition;
		[Export ("paddingPosition", ArgumentSemantic.Assign)]
		NSNumberFormatterPadPosition PaddingPosition { get; set; }

		// @property NSNumberFormatterRoundingMode roundingMode;
		[Export ("roundingMode", ArgumentSemantic.Assign)]
		NSNumberFormatterRoundingMode RoundingMode { get; set; }

		// @property (copy, null_resettable) NSNumber * _Null_unspecified roundingIncrement;
		[NullAllowed, Export ("roundingIncrement", ArgumentSemantic.Copy)]
		NSNumber RoundingIncrement { get; set; }

		// @property NSUInteger minimumIntegerDigits;
		[Export ("minimumIntegerDigits")]
		nuint MinimumIntegerDigits { get; set; }

		// @property NSUInteger maximumIntegerDigits;
		[Export ("maximumIntegerDigits")]
		nuint MaximumIntegerDigits { get; set; }

		// @property NSUInteger minimumFractionDigits;
		[Export ("minimumFractionDigits")]
		nuint MinimumFractionDigits { get; set; }

		// @property NSUInteger maximumFractionDigits;
		[Export ("maximumFractionDigits")]
		nuint MaximumFractionDigits { get; set; }

		// @property (copy) NSNumber * _Nullable minimum;
		[NullAllowed, Export ("minimum", ArgumentSemantic.Copy)]
		NSNumber Minimum { get; set; }

		// @property (copy) NSNumber * _Nullable maximum;
		[NullAllowed, Export ("maximum", ArgumentSemantic.Copy)]
		NSNumber Maximum { get; set; }

		// @property (copy, null_resettable) NSString * _Null_unspecified currencyGroupingSeparator __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("currencyGroupingSeparator")]
		string CurrencyGroupingSeparator { get; set; }

		// @property (getter = isLenient) BOOL lenient __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("lenient")]
		bool Lenient { [Bind ("isLenient")] get; set; }

		// @property BOOL usesSignificantDigits __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("usesSignificantDigits")]
		bool UsesSignificantDigits { get; set; }

		// @property NSUInteger minimumSignificantDigits __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("minimumSignificantDigits")]
		nuint MinimumSignificantDigits { get; set; }

		// @property NSUInteger maximumSignificantDigits __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("maximumSignificantDigits")]
		nuint MaximumSignificantDigits { get; set; }

		// @property (getter = isPartialStringValidationEnabled) BOOL partialStringValidationEnabled __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("partialStringValidationEnabled")]
		bool PartialStringValidationEnabled { [Bind ("isPartialStringValidationEnabled")] get; set; }
	}

	// @interface NSLocale : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSLocale : INSCopying, INSSecureCoding
	{
		// -(id _Nullable)objectForKey:(NSLocaleKey _Nonnull)key;
		[Export ("objectForKey:")]
		[return: NullAllowed]
		NSObject ObjectForKey (string key);

		// -(NSString * _Nullable)displayNameForKey:(NSLocaleKey _Nonnull)key value:(id _Nonnull)value;
		[Export ("displayNameForKey:value:")]
		[return: NullAllowed]
		string DisplayNameForKey (string key, NSObject value);

		// -(instancetype _Nonnull)initWithLocaleIdentifier:(NSString * _Nonnull)string __attribute__((objc_designated_initializer));
		[Export ("initWithLocaleIdentifier:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string @string);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSExtendedLocale (NSLocale)
	[Category]
	[BaseType (typeof(NSLocale))]
	interface NSLocale_NSExtendedLocale
	{
		// @property (readonly, copy) NSString * _Nonnull localeIdentifier;
		[Export ("localeIdentifier")]
		string LocaleIdentifier { get; }

		// -(NSString * _Nonnull)localizedStringForLocaleIdentifier:(NSString * _Nonnull)localeIdentifier __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForLocaleIdentifier:")]
		string LocalizedStringForLocaleIdentifier (string localeIdentifier);

		// @property (readonly, copy) NSString * _Nonnull languageCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("languageCode")]
		string LanguageCode { get; }

		// -(NSString * _Nullable)localizedStringForLanguageCode:(NSString * _Nonnull)languageCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForLanguageCode:")]
		[return: NullAllowed]
		string LocalizedStringForLanguageCode (string languageCode);

		// @property (readonly, copy) NSString * _Nullable countryCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[NullAllowed, Export ("countryCode")]
		string CountryCode { get; }

		// -(NSString * _Nullable)localizedStringForCountryCode:(NSString * _Nonnull)countryCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForCountryCode:")]
		[return: NullAllowed]
		string LocalizedStringForCountryCode (string countryCode);

		// @property (readonly, copy) NSString * _Nullable scriptCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[NullAllowed, Export ("scriptCode")]
		string ScriptCode { get; }

		// -(NSString * _Nullable)localizedStringForScriptCode:(NSString * _Nonnull)scriptCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForScriptCode:")]
		[return: NullAllowed]
		string LocalizedStringForScriptCode (string scriptCode);

		// @property (readonly, copy) NSString * _Nullable variantCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[NullAllowed, Export ("variantCode")]
		string VariantCode { get; }

		// -(NSString * _Nullable)localizedStringForVariantCode:(NSString * _Nonnull)variantCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForVariantCode:")]
		[return: NullAllowed]
		string LocalizedStringForVariantCode (string variantCode);

		// @property (readonly, copy) NSCharacterSet * _Nonnull exemplarCharacterSet __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("exemplarCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet ExemplarCharacterSet { get; }

		// @property (readonly, copy) NSString * _Nonnull calendarIdentifier __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("calendarIdentifier")]
		string CalendarIdentifier { get; }

		// -(NSString * _Nullable)localizedStringForCalendarIdentifier:(NSString * _Nonnull)calendarIdentifier __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForCalendarIdentifier:")]
		[return: NullAllowed]
		string LocalizedStringForCalendarIdentifier (string calendarIdentifier);

		// @property (readonly, copy) NSString * _Nullable collationIdentifier __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[NullAllowed, Export ("collationIdentifier")]
		string CollationIdentifier { get; }

		// -(NSString * _Nullable)localizedStringForCollationIdentifier:(NSString * _Nonnull)collationIdentifier __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForCollationIdentifier:")]
		[return: NullAllowed]
		string LocalizedStringForCollationIdentifier (string collationIdentifier);

		// @property (readonly) BOOL usesMetricSystem __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("usesMetricSystem")]
		bool UsesMetricSystem { get; }

		// @property (readonly, copy) NSString * _Nonnull decimalSeparator __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("decimalSeparator")]
		string DecimalSeparator { get; }

		// @property (readonly, copy) NSString * _Nonnull groupingSeparator __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("groupingSeparator")]
		string GroupingSeparator { get; }

		// @property (readonly, copy) NSString * _Nonnull currencySymbol __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("currencySymbol")]
		string CurrencySymbol { get; }

		// @property (readonly, copy) NSString * _Nullable currencyCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[NullAllowed, Export ("currencyCode")]
		string CurrencyCode { get; }

		// -(NSString * _Nullable)localizedStringForCurrencyCode:(NSString * _Nonnull)currencyCode __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForCurrencyCode:")]
		[return: NullAllowed]
		string LocalizedStringForCurrencyCode (string currencyCode);

		// @property (readonly, copy) NSString * _Nonnull collatorIdentifier __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("collatorIdentifier")]
		string CollatorIdentifier { get; }

		// -(NSString * _Nullable)localizedStringForCollatorIdentifier:(NSString * _Nonnull)collatorIdentifier __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("localizedStringForCollatorIdentifier:")]
		[return: NullAllowed]
		string LocalizedStringForCollatorIdentifier (string collatorIdentifier);

		// @property (readonly, copy) NSString * _Nonnull quotationBeginDelimiter __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("quotationBeginDelimiter")]
		string QuotationBeginDelimiter { get; }

		// @property (readonly, copy) NSString * _Nonnull quotationEndDelimiter __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("quotationEndDelimiter")]
		string QuotationEndDelimiter { get; }

		// @property (readonly, copy) NSString * _Nonnull alternateQuotationBeginDelimiter __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("alternateQuotationBeginDelimiter")]
		string AlternateQuotationBeginDelimiter { get; }

		// @property (readonly, copy) NSString * _Nonnull alternateQuotationEndDelimiter __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("alternateQuotationEndDelimiter")]
		string AlternateQuotationEndDelimiter { get; }
	}

	// @interface NSLocaleCreation (NSLocale)
	[Category]
	[BaseType (typeof(NSLocale))]
	[DisableDefaultCtor]
	interface NSLocale_NSLocaleCreation
	{
		// @property (readonly, strong, class) NSLocale * _Nonnull autoupdatingCurrentLocale __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("autoupdatingCurrentLocale", ArgumentSemantic.Strong)]
		NSLocale AutoupdatingCurrentLocale { get; }

		// @property (readonly, copy, class) NSLocale * _Nonnull currentLocale;
		[Static]
		[Export ("currentLocale", ArgumentSemantic.Copy)]
		NSLocale CurrentLocale { get; }

		// @property (readonly, copy, class) NSLocale * _Nonnull systemLocale;
		[Static]
		[Export ("systemLocale", ArgumentSemantic.Copy)]
		NSLocale SystemLocale { get; }

		// +(instancetype _Nonnull)localeWithLocaleIdentifier:(NSString * _Nonnull)ident __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("localeWithLocaleIdentifier:")]
		NSLocale LocaleWithLocaleIdentifier (string ident);
	}

	// @interface NSLocaleGeneralInfo (NSLocale)
	[Category]
	[BaseType (typeof(NSLocale))]
	interface NSLocale_NSLocaleGeneralInfo
	{
		// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull availableLocaleIdentifiers;
		[Static]
		[Export ("availableLocaleIdentifiers", ArgumentSemantic.Copy)]
		string[] AvailableLocaleIdentifiers { get; }

		// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOLanguageCodes;
		[Static]
		[Export ("ISOLanguageCodes", ArgumentSemantic.Copy)]
		string[] ISOLanguageCodes { get; }

		// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOCountryCodes;
		[Static]
		[Export ("ISOCountryCodes", ArgumentSemantic.Copy)]
		string[] ISOCountryCodes { get; }

		// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull ISOCurrencyCodes;
		[Static]
		[Export ("ISOCurrencyCodes", ArgumentSemantic.Copy)]
		string[] ISOCurrencyCodes { get; }

		// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull commonISOCurrencyCodes __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("commonISOCurrencyCodes", ArgumentSemantic.Copy)]
		string[] CommonISOCurrencyCodes { get; }

		// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull preferredLanguages __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("preferredLanguages", ArgumentSemantic.Copy)]
		string[] PreferredLanguages { get; }

		// +(NSDictionary<NSString *,NSString *> * _Nonnull)componentsFromLocaleIdentifier:(NSString * _Nonnull)string;
		[Static]
		[Export ("componentsFromLocaleIdentifier:")]
		NSDictionary<NSString, NSString> ComponentsFromLocaleIdentifier (string @string);

		// +(NSString * _Nonnull)localeIdentifierFromComponents:(NSDictionary<NSString *,NSString *> * _Nonnull)dict;
		[Static]
		[Export ("localeIdentifierFromComponents:")]
		string LocaleIdentifierFromComponents (NSDictionary<NSString, NSString> dict);

		// +(NSString * _Nonnull)canonicalLocaleIdentifierFromString:(NSString * _Nonnull)string;
		[Static]
		[Export ("canonicalLocaleIdentifierFromString:")]
		string CanonicalLocaleIdentifierFromString (string @string);

		// +(NSString * _Nonnull)canonicalLanguageIdentifierFromString:(NSString * _Nonnull)string;
		[Static]
		[Export ("canonicalLanguageIdentifierFromString:")]
		string CanonicalLanguageIdentifierFromString (string @string);

		// +(NSString * _Nullable)localeIdentifierFromWindowsLocaleCode:(uint32_t)lcid __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("localeIdentifierFromWindowsLocaleCode:")]
		[return: NullAllowed]
		string LocaleIdentifierFromWindowsLocaleCode (uint lcid);

		// +(uint32_t)windowsLocaleCodeFromLocaleIdentifier:(NSString * _Nonnull)localeIdentifier __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("windowsLocaleCodeFromLocaleIdentifier:")]
		uint WindowsLocaleCodeFromLocaleIdentifier (string localeIdentifier);

		// +(NSLocaleLanguageDirection)characterDirectionForLanguage:(NSString * _Nonnull)isoLangCode __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("characterDirectionForLanguage:")]
		NSLocaleLanguageDirection CharacterDirectionForLanguage (string isoLangCode);

		// +(NSLocaleLanguageDirection)lineDirectionForLanguage:(NSString * _Nonnull)isoLangCode __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("lineDirectionForLanguage:")]
		NSLocaleLanguageDirection LineDirectionForLanguage (string isoLangCode);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSCurrentLocaleDidChangeNotification __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSCurrentLocaleDidChangeNotification", "__Internal")]
		NSString NSCurrentLocaleDidChangeNotification { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleIdentifier;
		[Field ("NSLocaleIdentifier", "__Internal")]
		NSString NSLocaleIdentifier { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleLanguageCode;
		[Field ("NSLocaleLanguageCode", "__Internal")]
		NSString NSLocaleLanguageCode { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleCountryCode;
		[Field ("NSLocaleCountryCode", "__Internal")]
		NSString NSLocaleCountryCode { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleScriptCode;
		[Field ("NSLocaleScriptCode", "__Internal")]
		NSString NSLocaleScriptCode { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleVariantCode;
		[Field ("NSLocaleVariantCode", "__Internal")]
		NSString NSLocaleVariantCode { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleExemplarCharacterSet;
		[Field ("NSLocaleExemplarCharacterSet", "__Internal")]
		NSString NSLocaleExemplarCharacterSet { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleCalendar;
		[Field ("NSLocaleCalendar", "__Internal")]
		NSString NSLocaleCalendar { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleCollationIdentifier;
		[Field ("NSLocaleCollationIdentifier", "__Internal")]
		NSString NSLocaleCollationIdentifier { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleUsesMetricSystem;
		[Field ("NSLocaleUsesMetricSystem", "__Internal")]
		NSString NSLocaleUsesMetricSystem { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleMeasurementSystem;
		[Field ("NSLocaleMeasurementSystem", "__Internal")]
		NSString NSLocaleMeasurementSystem { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleDecimalSeparator;
		[Field ("NSLocaleDecimalSeparator", "__Internal")]
		NSString NSLocaleDecimalSeparator { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleGroupingSeparator;
		[Field ("NSLocaleGroupingSeparator", "__Internal")]
		NSString NSLocaleGroupingSeparator { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleCurrencySymbol;
		[Field ("NSLocaleCurrencySymbol", "__Internal")]
		NSString NSLocaleCurrencySymbol { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleCurrencyCode;
		[Field ("NSLocaleCurrencyCode", "__Internal")]
		NSString NSLocaleCurrencyCode { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleCollatorIdentifier __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSLocaleCollatorIdentifier", "__Internal")]
		NSString NSLocaleCollatorIdentifier { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleQuotationBeginDelimiterKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSLocaleQuotationBeginDelimiterKey", "__Internal")]
		NSString NSLocaleQuotationBeginDelimiterKey { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleQuotationEndDelimiterKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSLocaleQuotationEndDelimiterKey", "__Internal")]
		NSString NSLocaleQuotationEndDelimiterKey { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleAlternateQuotationBeginDelimiterKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSLocaleAlternateQuotationBeginDelimiterKey", "__Internal")]
		NSString NSLocaleAlternateQuotationBeginDelimiterKey { get; }

		// extern const NSLocaleKey _Nonnull NSLocaleAlternateQuotationEndDelimiterKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSLocaleAlternateQuotationEndDelimiterKey", "__Internal")]
		NSString NSLocaleAlternateQuotationEndDelimiterKey { get; }

		// extern NSString *const _Nonnull NSGregorianCalendar __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSGregorianCalendar", "__Internal")]
		NSString NSGregorianCalendar { get; }

		// extern NSString *const _Nonnull NSBuddhistCalendar __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSBuddhistCalendar", "__Internal")]
		NSString NSBuddhistCalendar { get; }

		// extern NSString *const _Nonnull NSChineseCalendar __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSChineseCalendar", "__Internal")]
		NSString NSChineseCalendar { get; }

		// extern NSString *const _Nonnull NSHebrewCalendar __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSHebrewCalendar", "__Internal")]
		NSString NSHebrewCalendar { get; }

		// extern NSString *const _Nonnull NSIslamicCalendar __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSIslamicCalendar", "__Internal")]
		NSString NSIslamicCalendar { get; }

		// extern NSString *const _Nonnull NSIslamicCivilCalendar __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSIslamicCivilCalendar", "__Internal")]
		NSString NSIslamicCivilCalendar { get; }

		// extern NSString *const _Nonnull NSJapaneseCalendar __attribute__((availability(macos, introduced=10.4, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 4)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSJapaneseCalendar", "__Internal")]
		NSString NSJapaneseCalendar { get; }

		// extern NSString *const _Nonnull NSRepublicOfChinaCalendar __attribute__((availability(macos, introduced=10.6, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 6)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 4, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSRepublicOfChinaCalendar", "__Internal")]
		NSString NSRepublicOfChinaCalendar { get; }

		// extern NSString *const _Nonnull NSPersianCalendar __attribute__((availability(macos, introduced=10.6, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 6)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 4, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSPersianCalendar", "__Internal")]
		NSString NSPersianCalendar { get; }

		// extern NSString *const _Nonnull NSIndianCalendar __attribute__((availability(macos, introduced=10.6, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 6)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 4, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSIndianCalendar", "__Internal")]
		NSString NSIndianCalendar { get; }

		// extern NSString *const _Nonnull NSISO8601Calendar __attribute__((availability(macos, introduced=10.6, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 6)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 4, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Field ("NSISO8601Calendar", "__Internal")]
		NSString NSISO8601Calendar { get; }
	}

	// @interface NSMeasurementFormatter : NSFormatter <NSSecureCoding>
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSMeasurementFormatter : INSSecureCoding
	{
		// @property NSMeasurementFormatterUnitOptions unitOptions;
		[Export ("unitOptions", ArgumentSemantic.Assign)]
		NSMeasurementFormatterUnitOptions UnitOptions { get; set; }

		// @property NSFormattingUnitStyle unitStyle;
		[Export ("unitStyle", ArgumentSemantic.Assign)]
		NSFormattingUnitStyle UnitStyle { get; set; }

		// @property (copy, null_resettable) NSLocale * _Null_unspecified locale;
		[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
		NSLocale Locale { get; set; }

		// @property (copy, null_resettable) NSNumberFormatter * _Null_unspecified numberFormatter;
		[NullAllowed, Export ("numberFormatter", ArgumentSemantic.Copy)]
		NSNumberFormatter NumberFormatter { get; set; }

		// -(NSString * _Nonnull)stringFromMeasurement:(NSMeasurement * _Nonnull)measurement;
		[Export ("stringFromMeasurement:")]
		string StringFromMeasurement (NSMeasurement measurement);

		// -(NSString * _Nonnull)stringFromUnit:(NSUnit * _Nonnull)unit;
		[Export ("stringFromUnit:")]
		string StringFromUnit (NSUnit unit);
	}

	// @interface NSPersonNameComponents : NSObject <NSCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	[BaseType (typeof(NSObject))]
	interface NSPersonNameComponents : INSCopying, INSSecureCoding
	{
		// @property (copy) NSString * _Nullable namePrefix;
		[NullAllowed, Export ("namePrefix")]
		string NamePrefix { get; set; }

		// @property (copy) NSString * _Nullable givenName;
		[NullAllowed, Export ("givenName")]
		string GivenName { get; set; }

		// @property (copy) NSString * _Nullable middleName;
		[NullAllowed, Export ("middleName")]
		string MiddleName { get; set; }

		// @property (copy) NSString * _Nullable familyName;
		[NullAllowed, Export ("familyName")]
		string FamilyName { get; set; }

		// @property (copy) NSString * _Nullable nameSuffix;
		[NullAllowed, Export ("nameSuffix")]
		string NameSuffix { get; set; }

		// @property (copy) NSString * _Nullable nickname;
		[NullAllowed, Export ("nickname")]
		string Nickname { get; set; }

		// @property (copy) NSPersonNameComponents * _Nullable phoneticRepresentation;
		[NullAllowed, Export ("phoneticRepresentation", ArgumentSemantic.Copy)]
		NSPersonNameComponents PhoneticRepresentation { get; set; }
	}

	// @interface NSPersonNameComponentsFormatter : NSFormatter
	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSPersonNameComponentsFormatter
	{
		// @property NSPersonNameComponentsFormatterStyle style;
		[Export ("style", ArgumentSemantic.Assign)]
		NSPersonNameComponentsFormatterStyle Style { get; set; }

		// @property (getter = isPhonetic) BOOL phonetic;
		[Export ("phonetic")]
		bool Phonetic { [Bind ("isPhonetic")] get; set; }

		// @property (copy, null_resettable) NSLocale * _Null_unspecified locale __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
		NSLocale Locale { get; set; }

		// +(NSString * _Nonnull)localizedStringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components style:(NSPersonNameComponentsFormatterStyle)nameFormatStyle options:(NSPersonNameComponentsFormatterOptions)nameOptions;
		[Static]
		[Export ("localizedStringFromPersonNameComponents:style:options:")]
		string LocalizedStringFromPersonNameComponents (NSPersonNameComponents components, NSPersonNameComponentsFormatterStyle nameFormatStyle, NSPersonNameComponentsFormatterOptions nameOptions);

		// -(NSString * _Nonnull)stringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components;
		[Export ("stringFromPersonNameComponents:")]
		string StringFromPersonNameComponents (NSPersonNameComponents components);

		// -(NSAttributedString * _Nonnull)annotatedStringFromPersonNameComponents:(NSPersonNameComponents * _Nonnull)components;
		[Export ("annotatedStringFromPersonNameComponents:")]
		NSAttributedString AnnotatedStringFromPersonNameComponents (NSPersonNameComponents components);

		// -(NSPersonNameComponents * _Nullable)personNameComponentsFromString:(NSString * _Nonnull)string __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("personNameComponentsFromString:")]
		[return: NullAllowed]
		NSPersonNameComponents PersonNameComponentsFromString (string @string);

		// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
		[Export ("getObjectValue:forString:errorDescription:")]
		bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSPersonNameComponentKey __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSPersonNameComponentKey", "__Internal")]
		NSString NSPersonNameComponentKey { get; }

		// extern NSString *const _Nonnull NSPersonNameComponentGivenName __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSPersonNameComponentGivenName", "__Internal")]
		NSString NSPersonNameComponentGivenName { get; }

		// extern NSString *const _Nonnull NSPersonNameComponentFamilyName __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSPersonNameComponentFamilyName", "__Internal")]
		NSString NSPersonNameComponentFamilyName { get; }

		// extern NSString *const _Nonnull NSPersonNameComponentMiddleName __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSPersonNameComponentMiddleName", "__Internal")]
		NSString NSPersonNameComponentMiddleName { get; }

		// extern NSString *const _Nonnull NSPersonNameComponentPrefix __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSPersonNameComponentPrefix", "__Internal")]
		NSString NSPersonNameComponentPrefix { get; }

		// extern NSString *const _Nonnull NSPersonNameComponentSuffix __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSPersonNameComponentSuffix", "__Internal")]
		NSString NSPersonNameComponentSuffix { get; }

		// extern NSString *const _Nonnull NSPersonNameComponentNickname __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSPersonNameComponentNickname", "__Internal")]
		NSString NSPersonNameComponentNickname { get; }

		// extern NSString *const _Nonnull NSPersonNameComponentDelimiter __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSPersonNameComponentDelimiter", "__Internal")]
		NSString NSPersonNameComponentDelimiter { get; }
	}

	// @interface NSRelativeDateTimeFormatter : NSFormatter
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSRelativeDateTimeFormatter
	{
		// @property NSRelativeDateTimeFormatterStyle dateTimeStyle;
		[Export ("dateTimeStyle", ArgumentSemantic.Assign)]
		NSRelativeDateTimeFormatterStyle DateTimeStyle { get; set; }

		// @property NSRelativeDateTimeFormatterUnitsStyle unitsStyle;
		[Export ("unitsStyle", ArgumentSemantic.Assign)]
		NSRelativeDateTimeFormatterUnitsStyle UnitsStyle { get; set; }

		// @property NSFormattingContext formattingContext;
		[Export ("formattingContext", ArgumentSemantic.Assign)]
		NSFormattingContext FormattingContext { get; set; }

		// @property (copy, null_resettable) NSCalendar * _Null_unspecified calendar;
		[NullAllowed, Export ("calendar", ArgumentSemantic.Copy)]
		NSCalendar Calendar { get; set; }

		// @property (copy, null_resettable) NSLocale * _Null_unspecified locale;
		[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
		NSLocale Locale { get; set; }

		// -(NSString * _Nonnull)localizedStringFromDateComponents:(NSDateComponents * _Nonnull)dateComponents;
		[Export ("localizedStringFromDateComponents:")]
		string LocalizedStringFromDateComponents (NSDateComponents dateComponents);

		// -(NSString * _Nonnull)localizedStringFromTimeInterval:(NSTimeInterval)timeInterval;
		[Export ("localizedStringFromTimeInterval:")]
		string LocalizedStringFromTimeInterval (double timeInterval);

		// -(NSString * _Nonnull)localizedStringForDate:(NSDate * _Nonnull)date relativeToDate:(NSDate * _Nonnull)referenceDate;
		[Export ("localizedStringForDate:relativeToDate:")]
		string LocalizedStringForDate (NSDate date, NSDate referenceDate);

		// -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
		[Export ("stringForObjectValue:")]
		[return: NullAllowed]
		string StringForObjectValue ([NullAllowed] NSObject obj);
	}

	// @interface NSListFormatter : NSFormatter
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSListFormatter
	{
		// @property (copy, null_resettable) NSLocale * _Null_unspecified locale;
		[NullAllowed, Export ("locale", ArgumentSemantic.Copy)]
		NSLocale Locale { get; set; }

		// @property (copy) NSFormatter * _Nullable itemFormatter;
		[NullAllowed, Export ("itemFormatter", ArgumentSemantic.Copy)]
		NSFormatter ItemFormatter { get; set; }

		// +(NSString * _Nonnull)localizedStringByJoiningStrings:(NSArray<NSString *> * _Nonnull)strings;
		[Static]
		[Export ("localizedStringByJoiningStrings:")]
		string LocalizedStringByJoiningStrings (string[] strings);

		// -(NSString * _Nullable)stringFromItems:(NSArray * _Nonnull)items;
		[Export ("stringFromItems:")]
		[return: NullAllowed]
		string StringFromItems (NSObject[] items);

		// -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
		[Export ("stringForObjectValue:")]
		[return: NullAllowed]
		string StringForObjectValue ([NullAllowed] NSObject obj);
	}

	// @interface NSScanner : NSObject <NSCopying>
	[BaseType (typeof(NSObject))]
	interface NSScanner : INSCopying
	{
		// @property (readonly, copy) NSString * _Nonnull string;
		[Export ("string")]
		string String { get; }

		// @property NSUInteger scanLocation;
		[Export ("scanLocation")]
		nuint ScanLocation { get; set; }

		// @property (copy) NSCharacterSet * _Nullable charactersToBeSkipped;
		[NullAllowed, Export ("charactersToBeSkipped", ArgumentSemantic.Copy)]
		NSCharacterSet CharactersToBeSkipped { get; set; }

		// @property BOOL caseSensitive;
		[Export ("caseSensitive")]
		bool CaseSensitive { get; set; }

		// @property (retain) id _Nullable locale;
		[NullAllowed, Export ("locale", ArgumentSemantic.Retain)]
		NSObject Locale { get; set; }

		// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)string __attribute__((objc_designated_initializer));
		[Export ("initWithString:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string @string);
	}

	// @interface NSExtendedScanner (NSScanner)
	[Category]
	[BaseType (typeof(NSScanner))]
	interface NSScanner_NSExtendedScanner
	{
		// -(BOOL)scanInt:(int * _Nullable)result;
		[Export ("scanInt:")]
		unsafe bool ScanInt ([NullAllowed] int* result);

		// -(BOOL)scanInteger:(NSInteger * _Nullable)result __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("scanInteger:")]
		unsafe bool ScanInteger ([NullAllowed] nint* result);

		// -(BOOL)scanLongLong:(long long * _Nullable)result;
		[Export ("scanLongLong:")]
		unsafe bool ScanLongLong ([NullAllowed] long* result);

		// -(BOOL)scanUnsignedLongLong:(unsigned long long * _Nullable)result __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("scanUnsignedLongLong:")]
		unsafe bool ScanUnsignedLongLong ([NullAllowed] ulong* result);

		// -(BOOL)scanFloat:(float * _Nullable)result;
		[Export ("scanFloat:")]
		unsafe bool ScanFloat ([NullAllowed] float* result);

		// -(BOOL)scanDouble:(double * _Nullable)result;
		[Export ("scanDouble:")]
		unsafe bool ScanDouble ([NullAllowed] double* result);

		// -(BOOL)scanHexInt:(unsigned int * _Nullable)result;
		[Export ("scanHexInt:")]
		unsafe bool ScanHexInt ([NullAllowed] uint* result);

		// -(BOOL)scanHexLongLong:(unsigned long long * _Nullable)result __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("scanHexLongLong:")]
		unsafe bool ScanHexLongLong ([NullAllowed] ulong* result);

		// -(BOOL)scanHexFloat:(float * _Nullable)result __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("scanHexFloat:")]
		unsafe bool ScanHexFloat ([NullAllowed] float* result);

		// -(BOOL)scanHexDouble:(double * _Nullable)result __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("scanHexDouble:")]
		unsafe bool ScanHexDouble ([NullAllowed] double* result);

		// -(BOOL)scanString:(NSString * _Nonnull)string intoString:(NSString * _Nullable * _Nullable)result;
		[Export ("scanString:intoString:")]
		bool ScanString (string @string, [NullAllowed] out string result);

		// -(BOOL)scanCharactersFromSet:(NSCharacterSet * _Nonnull)set intoString:(NSString * _Nullable * _Nullable)result;
		[Export ("scanCharactersFromSet:intoString:")]
		bool ScanCharactersFromSet (NSCharacterSet set, [NullAllowed] out string result);

		// -(BOOL)scanUpToString:(NSString * _Nonnull)string intoString:(NSString * _Nullable * _Nullable)result;
		[Export ("scanUpToString:intoString:")]
		bool ScanUpToString (string @string, [NullAllowed] out string result);

		// -(BOOL)scanUpToCharactersFromSet:(NSCharacterSet * _Nonnull)set intoString:(NSString * _Nullable * _Nullable)result;
		[Export ("scanUpToCharactersFromSet:intoString:")]
		bool ScanUpToCharactersFromSet (NSCharacterSet set, [NullAllowed] out string result);

		// @property (readonly, getter = isAtEnd) BOOL atEnd;
		[Export ("atEnd")]
		bool AtEnd { [Bind ("isAtEnd")] get; }

		// +(instancetype _Nonnull)scannerWithString:(NSString * _Nonnull)string;
		[Static]
		[Export ("scannerWithString:")]
		NSScanner ScannerWithString (string @string);

		// +(id _Nonnull)localizedScannerWithString:(NSString * _Nonnull)string;
		[Static]
		[Export ("localizedScannerWithString:")]
		NSObject LocalizedScannerWithString (string @string);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSExceptionName _Nonnull NSGenericException;
		[Field ("NSGenericException", "__Internal")]
		NSString NSGenericException { get; }

		// extern const NSExceptionName _Nonnull NSRangeException;
		[Field ("NSRangeException", "__Internal")]
		NSString NSRangeException { get; }

		// extern const NSExceptionName _Nonnull NSInvalidArgumentException;
		[Field ("NSInvalidArgumentException", "__Internal")]
		NSString NSInvalidArgumentException { get; }

		// extern const NSExceptionName _Nonnull NSInternalInconsistencyException;
		[Field ("NSInternalInconsistencyException", "__Internal")]
		NSString NSInternalInconsistencyException { get; }

		// extern const NSExceptionName _Nonnull NSMallocException;
		[Field ("NSMallocException", "__Internal")]
		NSString NSMallocException { get; }

		// extern const NSExceptionName _Nonnull NSObjectInaccessibleException;
		[Field ("NSObjectInaccessibleException", "__Internal")]
		NSString NSObjectInaccessibleException { get; }

		// extern const NSExceptionName _Nonnull NSObjectNotAvailableException;
		[Field ("NSObjectNotAvailableException", "__Internal")]
		NSString NSObjectNotAvailableException { get; }

		// extern const NSExceptionName _Nonnull NSDestinationInvalidException;
		[Field ("NSDestinationInvalidException", "__Internal")]
		NSString NSDestinationInvalidException { get; }

		// extern const NSExceptionName _Nonnull NSPortTimeoutException;
		[Field ("NSPortTimeoutException", "__Internal")]
		NSString NSPortTimeoutException { get; }

		// extern const NSExceptionName _Nonnull NSInvalidSendPortException;
		[Field ("NSInvalidSendPortException", "__Internal")]
		NSString NSInvalidSendPortException { get; }

		// extern const NSExceptionName _Nonnull NSInvalidReceivePortException;
		[Field ("NSInvalidReceivePortException", "__Internal")]
		NSString NSInvalidReceivePortException { get; }

		// extern const NSExceptionName _Nonnull NSPortSendException;
		[Field ("NSPortSendException", "__Internal")]
		NSString NSPortSendException { get; }

		// extern const NSExceptionName _Nonnull NSPortReceiveException;
		[Field ("NSPortReceiveException", "__Internal")]
		NSString NSPortReceiveException { get; }

		// extern const NSExceptionName _Nonnull NSOldStyleException;
		[Field ("NSOldStyleException", "__Internal")]
		NSString NSOldStyleException { get; }

		// extern const NSExceptionName _Nonnull NSInconsistentArchiveException;
		[Field ("NSInconsistentArchiveException", "__Internal")]
		NSString NSInconsistentArchiveException { get; }
	}

	// @interface NSException : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSException : INSCopying, INSSecureCoding
	{
		// +(NSException * _Nonnull)exceptionWithName:(NSExceptionName _Nonnull)name reason:(NSString * _Nullable)reason userInfo:(NSDictionary * _Nullable)userInfo;
		[Static]
		[Export ("exceptionWithName:reason:userInfo:")]
		NSException ExceptionWithName (string name, [NullAllowed] string reason, [NullAllowed] NSDictionary userInfo);

		// -(instancetype _Nonnull)initWithName:(NSExceptionName _Nonnull)aName reason:(NSString * _Nullable)aReason userInfo:(NSDictionary * _Nullable)aUserInfo __attribute__((objc_designated_initializer));
		[Export ("initWithName:reason:userInfo:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string aName, [NullAllowed] string aReason, [NullAllowed] NSDictionary aUserInfo);

		// @property (readonly, copy) NSExceptionName _Nonnull name;
		[Export ("name")]
		string Name { get; }

		// @property (readonly, copy) NSString * _Nullable reason;
		[NullAllowed, Export ("reason")]
		string Reason { get; }

		// @property (readonly, copy) NSDictionary * _Nullable userInfo;
		[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary UserInfo { get; }

		// @property (readonly, copy) NSArray<NSNumber *> * _Nonnull callStackReturnAddresses __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("callStackReturnAddresses", ArgumentSemantic.Copy)]
		NSNumber[] CallStackReturnAddresses { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull callStackSymbols __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("callStackSymbols", ArgumentSemantic.Copy)]
		string[] CallStackSymbols { get; }

		// -(void)raise;
		[Export ("raise")]
		void Raise ();
	}

	// @interface NSExceptionRaisingConveniences (NSException)
	[Category]
	[BaseType (typeof(NSException))]
	interface NSException_NSExceptionRaisingConveniences
	{
		// +(void)raise:(NSExceptionName _Nonnull)name format:(NSString * _Nonnull)format, ... __attribute__((format(NSString, 2, 3)));
		[Static, Internal]
		[Export ("raise:format:", IsVariadic = true)]
		void Raise (string name, string format, IntPtr varArgs);

		// +(void)raise:(NSExceptionName _Nonnull)name format:(NSString * _Nonnull)format arguments:(va_list)argList __attribute__((format(NSString, 2, 0)));
		[Static]
		[Export ("raise:format:arguments:")]
		unsafe void Raise (string name, string format, sbyte* argList);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSAssertionHandlerKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSAssertionHandlerKey", "__Internal")]
		NSString NSAssertionHandlerKey { get; }
	}

	// @interface NSAssertionHandler : NSObject
	[BaseType (typeof(NSObject))]
	interface NSAssertionHandler
	{
		// @property (readonly, strong, class) NSAssertionHandler * _Nonnull currentHandler;
		[Static]
		[Export ("currentHandler", ArgumentSemantic.Strong)]
		NSAssertionHandler CurrentHandler { get; }

		// -(void)handleFailureInMethod:(SEL _Nonnull)selector object:(id _Nonnull)object file:(NSString * _Nonnull)fileName lineNumber:(NSInteger)line description:(NSString * _Nullable)format, ... __attribute__((format(NSString, 5, 6)));
		[Internal]
		[Export ("handleFailureInMethod:object:file:lineNumber:description:", IsVariadic = true)]
		void HandleFailureInMethod (Selector selector, NSObject @object, string fileName, nint line, [NullAllowed] string format, IntPtr varArgs);

		// -(void)handleFailureInFunction:(NSString * _Nonnull)functionName file:(NSString * _Nonnull)fileName lineNumber:(NSInteger)line description:(NSString * _Nullable)format, ... __attribute__((format(NSString, 4, 5)));
		[Internal]
		[Export ("handleFailureInFunction:file:lineNumber:description:", IsVariadic = true)]
		void HandleFailureInFunction (string functionName, string fileName, nint line, [NullAllowed] string format, IntPtr varArgs);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSExceptionName _Nonnull NSDecimalNumberExactnessException;
		[Field ("NSDecimalNumberExactnessException", "__Internal")]
		NSString NSDecimalNumberExactnessException { get; }

		// extern const NSExceptionName _Nonnull NSDecimalNumberOverflowException;
		[Field ("NSDecimalNumberOverflowException", "__Internal")]
		NSString NSDecimalNumberOverflowException { get; }

		// extern const NSExceptionName _Nonnull NSDecimalNumberUnderflowException;
		[Field ("NSDecimalNumberUnderflowException", "__Internal")]
		NSString NSDecimalNumberUnderflowException { get; }

		// extern const NSExceptionName _Nonnull NSDecimalNumberDivideByZeroException;
		[Field ("NSDecimalNumberDivideByZeroException", "__Internal")]
		NSString NSDecimalNumberDivideByZeroException { get; }
	}

	// @protocol NSDecimalNumberBehaviors
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSDecimalNumberBehaviors
	{
		// @required -(NSRoundingMode)roundingMode;
		[Abstract]
		[Export ("roundingMode")]
		NSRoundingMode RoundingMode { get; }

		// @required -(short)scale;
		[Abstract]
		[Export ("scale")]
		short Scale { get; }

		// @required -(NSDecimalNumber * _Nullable)exceptionDuringOperation:(SEL _Nonnull)operation error:(NSCalculationError)error leftOperand:(NSDecimalNumber * _Nonnull)leftOperand rightOperand:(NSDecimalNumber * _Nullable)rightOperand;
		[Abstract]
		[Export ("exceptionDuringOperation:error:leftOperand:rightOperand:")]
		[return: NullAllowed]
		NSDecimalNumber Error (Selector operation, NSCalculationError error, NSDecimalNumber leftOperand, [NullAllowed] NSDecimalNumber rightOperand);
	}

	// @interface NSDecimalNumber : NSNumber
	[BaseType (typeof(NSNumber))]
	interface NSDecimalNumber
	{
		// -(instancetype _Nonnull)initWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag;
		[Export ("initWithMantissa:exponent:isNegative:")]
		NativeHandle Constructor (ulong mantissa, short exponent, bool flag);

		// -(instancetype _Nonnull)initWithDecimal:(NSDecimal)dcm __attribute__((objc_designated_initializer));
		[Export ("initWithDecimal:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSDecimal dcm);

		// -(instancetype _Nonnull)initWithString:(NSString * _Nullable)numberValue;
		[Export ("initWithString:")]
		NativeHandle Constructor ([NullAllowed] string numberValue);

		// -(instancetype _Nonnull)initWithString:(NSString * _Nullable)numberValue locale:(id _Nullable)locale;
		[Export ("initWithString:locale:")]
		NativeHandle Constructor ([NullAllowed] string numberValue, [NullAllowed] NSObject locale);

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
		[Export ("descriptionWithLocale:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale);

		// @property (readonly) NSDecimal decimalValue;
		[Export ("decimalValue")]
		NSDecimal DecimalValue { get; }

		// +(NSDecimalNumber * _Nonnull)decimalNumberWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag;
		[Static]
		[Export ("decimalNumberWithMantissa:exponent:isNegative:")]
		NSDecimalNumber DecimalNumberWithMantissa (ulong mantissa, short exponent, bool flag);

		// +(NSDecimalNumber * _Nonnull)decimalNumberWithDecimal:(NSDecimal)dcm;
		[Static]
		[Export ("decimalNumberWithDecimal:")]
		NSDecimalNumber DecimalNumberWithDecimal (NSDecimal dcm);

		// +(NSDecimalNumber * _Nonnull)decimalNumberWithString:(NSString * _Nullable)numberValue;
		[Static]
		[Export ("decimalNumberWithString:")]
		NSDecimalNumber DecimalNumberWithString ([NullAllowed] string numberValue);

		// +(NSDecimalNumber * _Nonnull)decimalNumberWithString:(NSString * _Nullable)numberValue locale:(id _Nullable)locale;
		[Static]
		[Export ("decimalNumberWithString:locale:")]
		NSDecimalNumber DecimalNumberWithString ([NullAllowed] string numberValue, [NullAllowed] NSObject locale);

		// @property (readonly, copy, class) NSDecimalNumber * _Nonnull zero;
		[Static]
		[Export ("zero", ArgumentSemantic.Copy)]
		NSDecimalNumber Zero { get; }

		// @property (readonly, copy, class) NSDecimalNumber * _Nonnull one;
		[Static]
		[Export ("one", ArgumentSemantic.Copy)]
		NSDecimalNumber One { get; }

		// @property (readonly, copy, class) NSDecimalNumber * _Nonnull minimumDecimalNumber;
		[Static]
		[Export ("minimumDecimalNumber", ArgumentSemantic.Copy)]
		NSDecimalNumber MinimumDecimalNumber { get; }

		// @property (readonly, copy, class) NSDecimalNumber * _Nonnull maximumDecimalNumber;
		[Static]
		[Export ("maximumDecimalNumber", ArgumentSemantic.Copy)]
		NSDecimalNumber MaximumDecimalNumber { get; }

		// @property (readonly, copy, class) NSDecimalNumber * _Nonnull notANumber;
		[Static]
		[Export ("notANumber", ArgumentSemantic.Copy)]
		NSDecimalNumber NotANumber { get; }

		// -(NSDecimalNumber * _Nonnull)decimalNumberByAdding:(NSDecimalNumber * _Nonnull)decimalNumber;
		[Export ("decimalNumberByAdding:")]
		NSDecimalNumber DecimalNumberByAdding (NSDecimalNumber decimalNumber);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByAdding:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
		[Export ("decimalNumberByAdding:withBehavior:")]
		NSDecimalNumber DecimalNumberByAdding (NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

		// -(NSDecimalNumber * _Nonnull)decimalNumberBySubtracting:(NSDecimalNumber * _Nonnull)decimalNumber;
		[Export ("decimalNumberBySubtracting:")]
		NSDecimalNumber DecimalNumberBySubtracting (NSDecimalNumber decimalNumber);

		// -(NSDecimalNumber * _Nonnull)decimalNumberBySubtracting:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
		[Export ("decimalNumberBySubtracting:withBehavior:")]
		NSDecimalNumber DecimalNumberBySubtracting (NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingBy:(NSDecimalNumber * _Nonnull)decimalNumber;
		[Export ("decimalNumberByMultiplyingBy:")]
		NSDecimalNumber DecimalNumberByMultiplyingBy (NSDecimalNumber decimalNumber);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingBy:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
		[Export ("decimalNumberByMultiplyingBy:withBehavior:")]
		NSDecimalNumber DecimalNumberByMultiplyingBy (NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByDividingBy:(NSDecimalNumber * _Nonnull)decimalNumber;
		[Export ("decimalNumberByDividingBy:")]
		NSDecimalNumber DecimalNumberByDividingBy (NSDecimalNumber decimalNumber);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByDividingBy:(NSDecimalNumber * _Nonnull)decimalNumber withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
		[Export ("decimalNumberByDividingBy:withBehavior:")]
		NSDecimalNumber DecimalNumberByDividingBy (NSDecimalNumber decimalNumber, [NullAllowed] NSDecimalNumberBehaviors behavior);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByRaisingToPower:(NSUInteger)power;
		[Export ("decimalNumberByRaisingToPower:")]
		NSDecimalNumber DecimalNumberByRaisingToPower (nuint power);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByRaisingToPower:(NSUInteger)power withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
		[Export ("decimalNumberByRaisingToPower:withBehavior:")]
		NSDecimalNumber DecimalNumberByRaisingToPower (nuint power, [NullAllowed] NSDecimalNumberBehaviors behavior);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingByPowerOf10:(short)power;
		[Export ("decimalNumberByMultiplyingByPowerOf10:")]
		NSDecimalNumber DecimalNumberByMultiplyingByPowerOf10 (short power);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByMultiplyingByPowerOf10:(short)power withBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
		[Export ("decimalNumberByMultiplyingByPowerOf10:withBehavior:")]
		NSDecimalNumber DecimalNumberByMultiplyingByPowerOf10 (short power, [NullAllowed] NSDecimalNumberBehaviors behavior);

		// -(NSDecimalNumber * _Nonnull)decimalNumberByRoundingAccordingToBehavior:(id<NSDecimalNumberBehaviors> _Nullable)behavior;
		[Export ("decimalNumberByRoundingAccordingToBehavior:")]
		NSDecimalNumber DecimalNumberByRoundingAccordingToBehavior ([NullAllowed] NSDecimalNumberBehaviors behavior);

		// -(NSComparisonResult)compare:(NSNumber * _Nonnull)decimalNumber;
		[Export ("compare:")]
		NSComparisonResult Compare (NSNumber decimalNumber);

		// @property (strong, class) id<NSDecimalNumberBehaviors> _Nonnull defaultBehavior;
		[Static]
		[Export ("defaultBehavior", ArgumentSemantic.Strong)]
		NSDecimalNumberBehaviors DefaultBehavior { get; set; }

		// @property (readonly) NS_RETURNS_INNER_POINTER const char * objCType __attribute__((objc_returns_inner_pointer));
		[Export ("objCType")]
		unsafe sbyte* ObjCType { get; }

		// @property (readonly) double doubleValue;
		[Export ("doubleValue")]
		double DoubleValue { get; }
	}

	// @interface NSDecimalNumberHandler : NSObject <NSDecimalNumberBehaviors, NSCoding>
	[BaseType (typeof(NSObject))]
	interface NSDecimalNumberHandler : INSDecimalNumberBehaviors, INSCoding
	{
		// @property (readonly, strong, class) NSDecimalNumberHandler * _Nonnull defaultDecimalNumberHandler;
		[Static]
		[Export ("defaultDecimalNumberHandler", ArgumentSemantic.Strong)]
		NSDecimalNumberHandler DefaultDecimalNumberHandler { get; }

		// -(instancetype _Nonnull)initWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero __attribute__((objc_designated_initializer));
		[Export ("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSRoundingMode roundingMode, short scale, bool exact, bool overflow, bool underflow, bool divideByZero);

		// +(instancetype _Nonnull)decimalNumberHandlerWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero;
		[Static]
		[Export ("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:")]
		NSDecimalNumberHandler DecimalNumberHandlerWithRoundingMode (NSRoundingMode roundingMode, short scale, bool exact, bool overflow, bool underflow, bool divideByZero);
	}

	// @interface NSDecimalNumberExtensions (NSNumber)
	[Category]
	[BaseType (typeof(NSNumber))]
	interface NSNumber_NSDecimalNumberExtensions
	{
		// @property (readonly) NSDecimal decimalValue;
		[Export ("decimalValue")]
		NSDecimal DecimalValue { get; }
	}

	// @interface NSDecimalNumberScanning (NSScanner)
	[Category]
	[BaseType (typeof(NSScanner))]
	interface NSScanner_NSDecimalNumberScanning
	{
		// -(BOOL)scanDecimal:(NSDecimal * _Nullable)dcm;
		[Export ("scanDecimal:")]
		unsafe bool ScanDecimal ([NullAllowed] NSDecimal* dcm);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSErrorDomain _Nonnull NSCocoaErrorDomain;
		[Field ("NSCocoaErrorDomain", "__Internal")]
		NSString NSCocoaErrorDomain { get; }

		// extern const NSErrorDomain _Nonnull NSPOSIXErrorDomain;
		[Field ("NSPOSIXErrorDomain", "__Internal")]
		NSString NSPOSIXErrorDomain { get; }

		// extern const NSErrorDomain _Nonnull NSOSStatusErrorDomain;
		[Field ("NSOSStatusErrorDomain", "__Internal")]
		NSString NSOSStatusErrorDomain { get; }

		// extern const NSErrorDomain _Nonnull NSMachErrorDomain;
		[Field ("NSMachErrorDomain", "__Internal")]
		NSString NSMachErrorDomain { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSUnderlyingErrorKey;
		[Field ("NSUnderlyingErrorKey", "__Internal")]
		NSString NSUnderlyingErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSMultipleUnderlyingErrorsKey __attribute__((availability(macos, introduced=11.3))) __attribute__((availability(ios, introduced=14.5))) __attribute__((availability(watchos, introduced=7.4))) __attribute__((availability(tvos, introduced=14.5)));
		[Watch (7, 4), TV (14, 5), Mac (11, 3), iOS (14, 5)]
		[Field ("NSMultipleUnderlyingErrorsKey", "__Internal")]
		NSString NSMultipleUnderlyingErrorsKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSLocalizedDescriptionKey;
		[Field ("NSLocalizedDescriptionKey", "__Internal")]
		NSString NSLocalizedDescriptionKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSLocalizedFailureReasonErrorKey;
		[Field ("NSLocalizedFailureReasonErrorKey", "__Internal")]
		NSString NSLocalizedFailureReasonErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSLocalizedRecoverySuggestionErrorKey;
		[Field ("NSLocalizedRecoverySuggestionErrorKey", "__Internal")]
		NSString NSLocalizedRecoverySuggestionErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSLocalizedRecoveryOptionsErrorKey;
		[Field ("NSLocalizedRecoveryOptionsErrorKey", "__Internal")]
		NSString NSLocalizedRecoveryOptionsErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSRecoveryAttempterErrorKey;
		[Field ("NSRecoveryAttempterErrorKey", "__Internal")]
		NSString NSRecoveryAttempterErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSHelpAnchorErrorKey;
		[Field ("NSHelpAnchorErrorKey", "__Internal")]
		NSString NSHelpAnchorErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSDebugDescriptionErrorKey __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSDebugDescriptionErrorKey", "__Internal")]
		NSString NSDebugDescriptionErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSLocalizedFailureErrorKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("NSLocalizedFailureErrorKey", "__Internal")]
		NSString NSLocalizedFailureErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSStringEncodingErrorKey;
		[Field ("NSStringEncodingErrorKey", "__Internal")]
		NSString NSStringEncodingErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSURLErrorKey;
		[Field ("NSURLErrorKey", "__Internal")]
		NSString NSURLErrorKey { get; }

		// extern const NSErrorUserInfoKey _Nonnull NSFilePathErrorKey;
		[Field ("NSFilePathErrorKey", "__Internal")]
		NSString NSFilePathErrorKey { get; }
	}

	// @interface NSError : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSError : INSCopying, INSSecureCoding
	{
		// -(instancetype _Nonnull)initWithDomain:(NSErrorDomain _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSErrorUserInfoKey,id> * _Nullable)dict __attribute__((objc_designated_initializer));
		[Export ("initWithDomain:code:userInfo:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string domain, nint code, [NullAllowed] NSDictionary<NSString, NSObject> dict);

		// +(instancetype _Nonnull)errorWithDomain:(NSErrorDomain _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSErrorUserInfoKey,id> * _Nullable)dict;
		[Static]
		[Export ("errorWithDomain:code:userInfo:")]
		NSError ErrorWithDomain (string domain, nint code, [NullAllowed] NSDictionary<NSString, NSObject> dict);

		// @property (readonly, copy) NSErrorDomain _Nonnull domain;
		[Export ("domain")]
		string Domain { get; }

		// @property (readonly) NSInteger code;
		[Export ("code")]
		nint Code { get; }

		// @property (readonly, copy) NSDictionary<NSErrorUserInfoKey,id> * _Nonnull userInfo;
		[Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> UserInfo { get; }

		// @property (readonly, copy) NSString * _Nonnull localizedDescription;
		[Export ("localizedDescription")]
		string LocalizedDescription { get; }

		// @property (readonly, copy) NSString * _Nullable localizedFailureReason;
		[NullAllowed, Export ("localizedFailureReason")]
		string LocalizedFailureReason { get; }

		// @property (readonly, copy) NSString * _Nullable localizedRecoverySuggestion;
		[NullAllowed, Export ("localizedRecoverySuggestion")]
		string LocalizedRecoverySuggestion { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nullable localizedRecoveryOptions;
		[NullAllowed, Export ("localizedRecoveryOptions", ArgumentSemantic.Copy)]
		string[] LocalizedRecoveryOptions { get; }

		// @property (readonly, strong) id _Nullable recoveryAttempter;
		[NullAllowed, Export ("recoveryAttempter", ArgumentSemantic.Strong)]
		NSObject RecoveryAttempter { get; }

		// @property (readonly, copy) NSString * _Nullable helpAnchor;
		[NullAllowed, Export ("helpAnchor")]
		string HelpAnchor { get; }

		// @property (readonly, copy) NSArray<NSError *> * _Nonnull underlyingErrors __attribute__((availability(macos, introduced=11.3))) __attribute__((availability(ios, introduced=14.5))) __attribute__((availability(watchos, introduced=7.4))) __attribute__((availability(tvos, introduced=14.5)));
		[Watch (7, 4), TV (14, 5), Mac (11, 3), iOS (14, 5)]
		[Export ("underlyingErrors", ArgumentSemantic.Copy)]
		NSError[] UnderlyingErrors { get; }

		// +(void)setUserInfoValueProviderForDomain:(NSErrorDomain _Nonnull)errorDomain provider:(id  _Nullable (^ _Nullable)(NSError * _Nonnull, NSErrorUserInfoKey _Nonnull))provider __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("setUserInfoValueProviderForDomain:provider:")]
		void SetUserInfoValueProviderForDomain (string errorDomain, [NullAllowed] Func<NSError, NSString, NSObject> provider);

		// +(id  _Nullable (^ _Nullable)(NSError * _Nonnull, NSErrorUserInfoKey _Nonnull))userInfoValueProviderForDomain:(NSErrorDomain _Nonnull)errorDomain __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("userInfoValueProviderForDomain:")]
		[return: NullAllowed]
		Func<NSError, NSString, NSObject> UserInfoValueProviderForDomain (string errorDomain);
	}

	// @interface NSErrorRecoveryAttempting (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSErrorRecoveryAttempting
	{
		// -(void)attemptRecoveryFromError:(NSError * _Nonnull)error optionIndex:(NSUInteger)recoveryOptionIndex delegate:(id _Nullable)delegate didRecoverSelector:(SEL _Nullable)didRecoverSelector contextInfo:(void * _Nullable)contextInfo;
		[Export ("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:")]
		unsafe void AttemptRecoveryFromError (NSError error, nuint recoveryOptionIndex, [NullAllowed] NSObject @delegate, [NullAllowed] Selector didRecoverSelector, [NullAllowed] void* contextInfo);

		// -(BOOL)attemptRecoveryFromError:(NSError * _Nonnull)error optionIndex:(NSUInteger)recoveryOptionIndex;
		[Export ("attemptRecoveryFromError:optionIndex:")]
		bool AttemptRecoveryFromError (NSError error, nuint recoveryOptionIndex);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSRunLoopMode _Nonnull NSDefaultRunLoopMode;
		[Field ("NSDefaultRunLoopMode", "__Internal")]
		NSString NSDefaultRunLoopMode { get; }

		// extern const NSRunLoopMode _Nonnull NSRunLoopCommonModes __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSRunLoopCommonModes", "__Internal")]
		NSString NSRunLoopCommonModes { get; }
	}

	// @interface NSRunLoop : NSObject
	[BaseType (typeof(NSObject))]
	interface NSRunLoop
	{
		// @property (readonly, strong, class) NS_SWIFT_UNAVAILABLE_FROM_ASYNC("currentRunLoop cannot be used from async contexts.") NSRunLoop * currentRunLoop __attribute__((swift_attr("@_unavailableFromAsync(message: "currentRunLoop cannot be used from async contexts.")")));
		[Static]
		[Export ("currentRunLoop", ArgumentSemantic.Strong)]
		NSRunLoop CurrentRunLoop { get; }

		// @property (readonly, strong, class) NSRunLoop * _Nonnull mainRunLoop __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("mainRunLoop", ArgumentSemantic.Strong)]
		NSRunLoop MainRunLoop { get; }

		// @property (readonly, copy) NSRunLoopMode _Nullable currentMode;
		[NullAllowed, Export ("currentMode")]
		string CurrentMode { get; }

		// -(CFRunLoopRef _Nonnull)getCFRunLoop __attribute__((cf_returns_not_retained));
		[Export ("getCFRunLoop")]
		CFRunLoop CFRunLoop { get; }

		// -(void)addTimer:(NSTimer * _Nonnull)timer forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("addTimer:forMode:")]
		void AddTimer (NSTimer timer, string mode);

		// -(void)addPort:(NSPort * _Nonnull)aPort forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("addPort:forMode:")]
		void AddPort (NSPort aPort, string mode);

		// -(void)removePort:(NSPort * _Nonnull)aPort forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("removePort:forMode:")]
		void RemovePort (NSPort aPort, string mode);

		// -(NSDate * _Nullable)limitDateForMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("limitDateForMode:")]
		[return: NullAllowed]
		NSDate LimitDateForMode (string mode);

		// -(void)acceptInputForMode:(NSRunLoopMode _Nonnull)mode beforeDate:(NSDate * _Nonnull)limitDate __attribute__((swift_attr("@_unavailableFromAsync(message: "acceptInput(for:before:) cannot be used from async contexts.")")));
		[Export ("acceptInputForMode:beforeDate:")]
		void AcceptInputForMode (string mode, NSDate limitDate);
	}

	// @interface NSRunLoopConveniences (NSRunLoop)
	[Category]
	[BaseType (typeof(NSRunLoop))]
	interface NSRunLoop_NSRunLoopConveniences
	{
		// -(void)run __attribute__((swift_attr("@_unavailableFromAsync(message: "run cannot be used from async contexts.")")));
		[Export ("run")]
		void Run ();

		// -(void)runUntilDate:(NSDate * _Nonnull)limitDate __attribute__((swift_attr("@_unavailableFromAsync(message: "run(until:) cannot be used from async contexts.")")));
		[Export ("runUntilDate:")]
		void RunUntilDate (NSDate limitDate);

		// -(BOOL)runMode:(NSRunLoopMode _Nonnull)mode beforeDate:(NSDate * _Nonnull)limitDate __attribute__((swift_attr("@_unavailableFromAsync(message: "run(_:before:) cannot be used from async contexts.")")));
		[Export ("runMode:beforeDate:")]
		bool RunMode (string mode, NSDate limitDate);

		// -(void)performInModes:(NSArray<NSRunLoopMode> * _Nonnull)modes block:(void (^ _Nonnull)(void))block __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("performInModes:block:")]
		void PerformInModes (string[] modes, Action block);

		// -(void)performBlock:(void (^ _Nonnull)(void))block __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("performBlock:")]
		void PerformBlock (Action block);
	}

	// @interface NSDelayedPerforming (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSDelayedPerforming
	{
		// -(void)performSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)anArgument afterDelay:(NSTimeInterval)delay inModes:(NSArray<NSRunLoopMode> * _Nonnull)modes;
		[Export ("performSelector:withObject:afterDelay:inModes:")]
		void PerformSelector (Selector aSelector, [NullAllowed] NSObject anArgument, double delay, string[] modes);

		// -(void)performSelector:(SEL _Nonnull)aSelector withObject:(id _Nullable)anArgument afterDelay:(NSTimeInterval)delay;
		[Export ("performSelector:withObject:afterDelay:")]
		void PerformSelector (Selector aSelector, [NullAllowed] NSObject anArgument, double delay);

		// +(void)cancelPreviousPerformRequestsWithTarget:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector object:(id _Nullable)anArgument;
		[Static]
		[Export ("cancelPreviousPerformRequestsWithTarget:selector:object:")]
		void CancelPreviousPerformRequestsWithTarget (NSObject aTarget, Selector aSelector, [NullAllowed] NSObject anArgument);

		// +(void)cancelPreviousPerformRequestsWithTarget:(id _Nonnull)aTarget;
		[Static]
		[Export ("cancelPreviousPerformRequestsWithTarget:")]
		void CancelPreviousPerformRequestsWithTarget (NSObject aTarget);
	}

	// @interface NSOrderedPerform (NSRunLoop)
	[Category]
	[BaseType (typeof(NSRunLoop))]
	interface NSRunLoop_NSOrderedPerform
	{
		// -(void)performSelector:(SEL _Nonnull)aSelector target:(id _Nonnull)target argument:(id _Nullable)arg order:(NSUInteger)order modes:(NSArray<NSRunLoopMode> * _Nonnull)modes;
		[Export ("performSelector:target:argument:order:modes:")]
		void PerformSelector (Selector aSelector, NSObject target, [NullAllowed] NSObject arg, nuint order, string[] modes);

		// -(void)cancelPerformSelector:(SEL _Nonnull)aSelector target:(id _Nonnull)target argument:(id _Nullable)arg;
		[Export ("cancelPerformSelector:target:argument:")]
		void CancelPerformSelector (Selector aSelector, NSObject target, [NullAllowed] NSObject arg);

		// -(void)cancelPerformSelectorsWithTarget:(id _Nonnull)target;
		[Export ("cancelPerformSelectorsWithTarget:")]
		void CancelPerformSelectorsWithTarget (NSObject target);
	}

	// @interface NSFileHandle : NSObject <NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSFileHandle : INSSecureCoding
	{
		// @property (readonly, copy) NSData * _Nonnull availableData;
		[Export ("availableData", ArgumentSemantic.Copy)]
		NSData AvailableData { get; }

		// -(instancetype _Nonnull)initWithFileDescriptor:(int)fd closeOnDealloc:(BOOL)closeopt __attribute__((objc_designated_initializer));
		[Export ("initWithFileDescriptor:closeOnDealloc:")]
		[DesignatedInitializer]
		NativeHandle Constructor (int fd, bool closeopt);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// -(NSData * _Nullable)readDataToEndOfFileAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((swift_private));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("readDataToEndOfFileAndReturnError:")]
		[return: NullAllowed]
		NSData ReadDataToEndOfFileAndReturnError ([NullAllowed] out NSError error);

		// -(NSData * _Nullable)readDataUpToLength:(NSUInteger)length error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((swift_private));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("readDataUpToLength:error:")]
		[return: NullAllowed]
		NSData ReadDataUpToLength (nuint length, [NullAllowed] out NSError error);

		// -(BOOL)writeData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((swift_private));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("writeData:error:")]
		bool WriteData (NSData data, [NullAllowed] out NSError error);

		// -(BOOL)getOffset:(unsigned long long * _Nonnull)offsetInFile error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((swift_private));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("getOffset:error:")]
		unsafe bool GetOffset (ulong* offsetInFile, [NullAllowed] out NSError error);

		// -(BOOL)seekToEndReturningOffset:(unsigned long long * _Nullable)offsetInFile error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((swift_private));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("seekToEndReturningOffset:error:")]
		unsafe bool SeekToEndReturningOffset ([NullAllowed] ulong* offsetInFile, [NullAllowed] out NSError error);

		// -(BOOL)seekToOffset:(unsigned long long)offset error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("seekToOffset:error:")]
		bool SeekToOffset (ulong offset, [NullAllowed] out NSError error);

		// -(BOOL)truncateAtOffset:(unsigned long long)offset error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("truncateAtOffset:error:")]
		bool TruncateAtOffset (ulong offset, [NullAllowed] out NSError error);

		// -(BOOL)synchronizeAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("synchronizeAndReturnError:")]
		bool SynchronizeAndReturnError ([NullAllowed] out NSError error);

		// -(BOOL)closeAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("closeAndReturnError:")]
		bool CloseAndReturnError ([NullAllowed] out NSError error);
	}

	// @interface NSFileHandleCreation (NSFileHandle)
	[Category]
	[BaseType (typeof(NSFileHandle))]
	interface NSFileHandle_NSFileHandleCreation
	{
		// @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardInput;
		[Static]
		[Export ("fileHandleWithStandardInput", ArgumentSemantic.Strong)]
		NSFileHandle FileHandleWithStandardInput { get; }

		// @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardOutput;
		[Static]
		[Export ("fileHandleWithStandardOutput", ArgumentSemantic.Strong)]
		NSFileHandle FileHandleWithStandardOutput { get; }

		// @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithStandardError;
		[Static]
		[Export ("fileHandleWithStandardError", ArgumentSemantic.Strong)]
		NSFileHandle FileHandleWithStandardError { get; }

		// @property (readonly, strong, class) NSFileHandle * _Nonnull fileHandleWithNullDevice;
		[Static]
		[Export ("fileHandleWithNullDevice", ArgumentSemantic.Strong)]
		NSFileHandle FileHandleWithNullDevice { get; }

		// +(instancetype _Nullable)fileHandleForReadingAtPath:(NSString * _Nonnull)path;
		[Static]
		[Export ("fileHandleForReadingAtPath:")]
		[return: NullAllowed]
		NSFileHandle FileHandleForReadingAtPath (string path);

		// +(instancetype _Nullable)fileHandleForWritingAtPath:(NSString * _Nonnull)path;
		[Static]
		[Export ("fileHandleForWritingAtPath:")]
		[return: NullAllowed]
		NSFileHandle FileHandleForWritingAtPath (string path);

		// +(instancetype _Nullable)fileHandleForUpdatingAtPath:(NSString * _Nonnull)path;
		[Static]
		[Export ("fileHandleForUpdatingAtPath:")]
		[return: NullAllowed]
		NSFileHandle FileHandleForUpdatingAtPath (string path);

		// +(instancetype _Nullable)fileHandleForReadingFromURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("fileHandleForReadingFromURL:error:")]
		[return: NullAllowed]
		NSFileHandle FileHandleForReadingFromURL (NSURL url, [NullAllowed] out NSError error);

		// +(instancetype _Nullable)fileHandleForWritingToURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("fileHandleForWritingToURL:error:")]
		[return: NullAllowed]
		NSFileHandle FileHandleForWritingToURL (NSURL url, [NullAllowed] out NSError error);

		// +(instancetype _Nullable)fileHandleForUpdatingURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("fileHandleForUpdatingURL:error:")]
		[return: NullAllowed]
		NSFileHandle FileHandleForUpdatingURL (NSURL url, [NullAllowed] out NSError error);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSExceptionName _Nonnull NSFileHandleOperationException;
		[Field ("NSFileHandleOperationException", "__Internal")]
		NSString NSFileHandleOperationException { get; }

		// extern const NSNotificationName _Nonnull NSFileHandleReadCompletionNotification;
		[Field ("NSFileHandleReadCompletionNotification", "__Internal")]
		NSString NSFileHandleReadCompletionNotification { get; }

		// extern const NSNotificationName _Nonnull NSFileHandleReadToEndOfFileCompletionNotification;
		[Field ("NSFileHandleReadToEndOfFileCompletionNotification", "__Internal")]
		NSString NSFileHandleReadToEndOfFileCompletionNotification { get; }

		// extern const NSNotificationName _Nonnull NSFileHandleConnectionAcceptedNotification;
		[Field ("NSFileHandleConnectionAcceptedNotification", "__Internal")]
		NSString NSFileHandleConnectionAcceptedNotification { get; }

		// extern const NSNotificationName _Nonnull NSFileHandleDataAvailableNotification;
		[Field ("NSFileHandleDataAvailableNotification", "__Internal")]
		NSString NSFileHandleDataAvailableNotification { get; }

		// extern NSString *const _Nonnull NSFileHandleNotificationDataItem;
		[Field ("NSFileHandleNotificationDataItem", "__Internal")]
		NSString NSFileHandleNotificationDataItem { get; }

		// extern NSString *const _Nonnull NSFileHandleNotificationFileHandleItem;
		[Field ("NSFileHandleNotificationFileHandleItem", "__Internal")]
		NSString NSFileHandleNotificationFileHandleItem { get; }

		// extern NSString *const _Nonnull NSFileHandleNotificationMonitorModes __attribute__((availability(macos, introduced=10.0, deprecated=10.7))) __attribute__((availability(ios, introduced=2.0, deprecated=5.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 7, message: "Not supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 5, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Field ("NSFileHandleNotificationMonitorModes", "__Internal")]
		NSString NSFileHandleNotificationMonitorModes { get; }
	}

	// @interface NSFileHandleAsynchronousAccess (NSFileHandle)
	[Category]
	[BaseType (typeof(NSFileHandle))]
	interface NSFileHandle_NSFileHandleAsynchronousAccess
	{
		// -(void)readInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
		[Export ("readInBackgroundAndNotifyForModes:")]
		void ReadInBackgroundAndNotifyForModes ([NullAllowed] string[] modes);

		// -(void)readInBackgroundAndNotify;
		[Export ("readInBackgroundAndNotify")]
		void ReadInBackgroundAndNotify ();

		// -(void)readToEndOfFileInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
		[Export ("readToEndOfFileInBackgroundAndNotifyForModes:")]
		void ReadToEndOfFileInBackgroundAndNotifyForModes ([NullAllowed] string[] modes);

		// -(void)readToEndOfFileInBackgroundAndNotify;
		[Export ("readToEndOfFileInBackgroundAndNotify")]
		void ReadToEndOfFileInBackgroundAndNotify ();

		// -(void)acceptConnectionInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
		[Export ("acceptConnectionInBackgroundAndNotifyForModes:")]
		void AcceptConnectionInBackgroundAndNotifyForModes ([NullAllowed] string[] modes);

		// -(void)acceptConnectionInBackgroundAndNotify;
		[Export ("acceptConnectionInBackgroundAndNotify")]
		void AcceptConnectionInBackgroundAndNotify ();

		// -(void)waitForDataInBackgroundAndNotifyForModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
		[Export ("waitForDataInBackgroundAndNotifyForModes:")]
		void WaitForDataInBackgroundAndNotifyForModes ([NullAllowed] string[] modes);

		// -(void)waitForDataInBackgroundAndNotify;
		[Export ("waitForDataInBackgroundAndNotify")]
		void WaitForDataInBackgroundAndNotify ();

		// @property (copy) void (^ _Nullable)(NSFileHandle * _Nonnull) readabilityHandler __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[NullAllowed, Export ("readabilityHandler", ArgumentSemantic.Copy)]
		Action<NSFileHandle> ReadabilityHandler { get; set; }

		// @property (copy) void (^ _Nullable)(NSFileHandle * _Nonnull) writeabilityHandler __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[NullAllowed, Export ("writeabilityHandler", ArgumentSemantic.Copy)]
		Action<NSFileHandle> WriteabilityHandler { get; set; }
	}

	// @interface NSFileHandlePlatformSpecific (NSFileHandle)
	[Category]
	[BaseType (typeof(NSFileHandle))]
	interface NSFileHandle_NSFileHandlePlatformSpecific
	{
		// -(instancetype _Nonnull)initWithFileDescriptor:(int)fd;
		[Export ("initWithFileDescriptor:")]
		NativeHandle Constructor (int fd);

		// @property (readonly) int fileDescriptor;
		[Export ("fileDescriptor")]
		int FileDescriptor { get; }
	}

	// @interface  (NSFileHandle)
	[Category]
	[BaseType (typeof(NSFileHandle))]
	interface NSFileHandle_
	{
		// -(NSData * _Nonnull)readDataToEndOfFile __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("readDataToEndOfFile")]
		NSData ReadDataToEndOfFile { get; }

		// -(NSData * _Nonnull)readDataOfLength:(NSUInteger)length __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("readDataOfLength:")]
		NSData ReadDataOfLength (nuint length);

		// -(void)writeData:(NSData * _Nonnull)data __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("writeData:")]
		void WriteData (NSData data);

		// @property (readonly) unsigned long long offsetInFile __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("offsetInFile")]
		ulong OffsetInFile { get; }

		// -(unsigned long long)seekToEndOfFile __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("seekToEndOfFile")]
		ulong SeekToEndOfFile { get; }

		// -(void)seekToFileOffset:(unsigned long long)offset __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("seekToFileOffset:")]
		void SeekToFileOffset (ulong offset);

		// -(void)truncateFileAtOffset:(unsigned long long)offset __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("truncateFileAtOffset:")]
		void TruncateFileAtOffset (ulong offset);

		// -(void)synchronizeFile __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("synchronizeFile")]
		void SynchronizeFile ();

		// -(void)closeFile __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("closeFile")]
		void CloseFile ();
	}

	// @interface NSPipe : NSObject
	[BaseType (typeof(NSObject))]
	interface NSPipe
	{
		// @property (readonly, retain) NSFileHandle * _Nonnull fileHandleForReading;
		[Export ("fileHandleForReading", ArgumentSemantic.Retain)]
		NSFileHandle FileHandleForReading { get; }

		// @property (readonly, retain) NSFileHandle * _Nonnull fileHandleForWriting;
		[Export ("fileHandleForWriting", ArgumentSemantic.Retain)]
		NSFileHandle FileHandleForWriting { get; }

		// +(NSPipe * _Nonnull)pipe;
		[Static]
		[Export ("pipe")]
		NSPipe Pipe { get; }
	}

	// @interface NSStringPathExtensions (NSString)
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSStringPathExtensions
	{
		// +(NSString * _Nonnull)pathWithComponents:(NSArray<NSString *> * _Nonnull)components;
		[Static]
		[Export ("pathWithComponents:")]
		string PathWithComponents (string[] components);

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull pathComponents;
		[Export ("pathComponents", ArgumentSemantic.Copy)]
		string[] PathComponents { get; }

		// @property (readonly, getter = isAbsolutePath) BOOL absolutePath;
		[Export ("absolutePath")]
		bool AbsolutePath { [Bind ("isAbsolutePath")] get; }

		// @property (readonly, copy) NSString * _Nonnull lastPathComponent;
		[Export ("lastPathComponent")]
		string LastPathComponent { get; }

		// @property (readonly, copy) NSString * _Nonnull stringByDeletingLastPathComponent;
		[Export ("stringByDeletingLastPathComponent")]
		string StringByDeletingLastPathComponent { get; }

		// -(NSString * _Nonnull)stringByAppendingPathComponent:(NSString * _Nonnull)str;
		[Export ("stringByAppendingPathComponent:")]
		string StringByAppendingPathComponent (string str);

		// @property (readonly, copy) NSString * _Nonnull pathExtension;
		[Export ("pathExtension")]
		string PathExtension { get; }

		// @property (readonly, copy) NSString * _Nonnull stringByDeletingPathExtension;
		[Export ("stringByDeletingPathExtension")]
		string StringByDeletingPathExtension { get; }

		// -(NSString * _Nullable)stringByAppendingPathExtension:(NSString * _Nonnull)str;
		[Export ("stringByAppendingPathExtension:")]
		[return: NullAllowed]
		string StringByAppendingPathExtension (string str);

		// @property (readonly, copy) NSString * _Nonnull stringByAbbreviatingWithTildeInPath;
		[Export ("stringByAbbreviatingWithTildeInPath")]
		string StringByAbbreviatingWithTildeInPath { get; }

		// @property (readonly, copy) NSString * _Nonnull stringByExpandingTildeInPath;
		[Export ("stringByExpandingTildeInPath")]
		string StringByExpandingTildeInPath { get; }

		// @property (readonly, copy) NSString * _Nonnull stringByStandardizingPath;
		[Export ("stringByStandardizingPath")]
		string StringByStandardizingPath { get; }

		// @property (readonly, copy) NSString * _Nonnull stringByResolvingSymlinksInPath;
		[Export ("stringByResolvingSymlinksInPath")]
		string StringByResolvingSymlinksInPath { get; }

		// -(NSArray<NSString *> * _Nonnull)stringsByAppendingPaths:(NSArray<NSString *> * _Nonnull)paths;
		[Export ("stringsByAppendingPaths:")]
		string[] StringsByAppendingPaths (string[] paths);

		// -(NSUInteger)completePathIntoString:(NSString * _Nullable * _Nullable)outputName caseSensitive:(BOOL)flag matchesIntoArray:(NSArray<NSString *> * _Nullable * _Nullable)outputArray filterTypes:(NSArray<NSString *> * _Nullable)filterTypes;
		[Export ("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:")]
		nuint CompletePathIntoString ([NullAllowed] out string outputName, bool flag, [NullAllowed] out string[] outputArray, [NullAllowed] string[] filterTypes);

		// @property (readonly) NS_RETURNS_INNER_POINTER const char * fileSystemRepresentation __attribute__((objc_returns_inner_pointer));
		[Export ("fileSystemRepresentation")]
		unsafe sbyte* FileSystemRepresentation { get; }

		// -(BOOL)getFileSystemRepresentation:(char * _Nonnull)cname maxLength:(NSUInteger)max;
		[Export ("getFileSystemRepresentation:maxLength:")]
		unsafe bool GetFileSystemRepresentation (sbyte* cname, nuint max);
	}

	// @interface NSArrayPathExtensions (NSArray)
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSArrayPathExtensions
	{
		// -(NSArray<NSString *> * _Nonnull)pathsMatchingExtensions:(NSArray<NSString *> * _Nonnull)filterTypes;
		[Export ("pathsMatchingExtensions:")]
		string[] PathsMatchingExtensions (string[] filterTypes);
	}

	// @interface NSURL : NSObject <NSSecureCoding, NSCopying>
	[BaseType (typeof(NSObject))]
	interface NSURL : INSSecureCoding, INSCopying
	{
		// -(instancetype _Nullable)initWithScheme:(NSString * _Nonnull)scheme host:(NSString * _Nullable)host path:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLComponents instead, which lets you create a valid URL with any valid combination of URL components and subcomponents (not just scheme, host and path), and lets you set components and subcomponents with either percent-encoded or un-percent-encoded strings.")]
		[Export ("initWithScheme:host:path:")]
		NativeHandle Constructor (string scheme, [NullAllowed] string host, string path);

		// -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("initFileURLWithPath:isDirectory:relativeToURL:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string path, bool isDir, [NullAllowed] NSURL baseURL);

		// -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("initFileURLWithPath:relativeToURL:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string path, [NullAllowed] NSURL baseURL);

		// -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("initFileURLWithPath:isDirectory:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string path, bool isDir);

		// -(instancetype _Nonnull)initFileURLWithPath:(NSString * _Nonnull)path __attribute__((objc_designated_initializer));
		[Export ("initFileURLWithPath:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string path);

		// +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("fileURLWithPath:isDirectory:relativeToURL:")]
		NSURL FileURLWithPath (string path, bool isDir, [NullAllowed] NSURL baseURL);

		// +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("fileURLWithPath:relativeToURL:")]
		NSURL FileURLWithPath (string path, [NullAllowed] NSURL baseURL);

		// +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path isDirectory:(BOOL)isDir __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Static]
		[Export ("fileURLWithPath:isDirectory:")]
		NSURL FileURLWithPath (string path, bool isDir);

		// +(NSURL * _Nonnull)fileURLWithPath:(NSString * _Nonnull)path;
		[Static]
		[Export ("fileURLWithPath:")]
		NSURL FileURLWithPath (string path);

		// -(instancetype _Nonnull)initFileURLWithFileSystemRepresentation:(const char * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:")]
		[DesignatedInitializer]
		unsafe NativeHandle Constructor (sbyte* path, bool isDir, [NullAllowed] NSURL baseURL);

		// +(NSURL * _Nonnull)fileURLWithFileSystemRepresentation:(const char * _Nonnull)path isDirectory:(BOOL)isDir relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Static]
		[Export ("fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:")]
		unsafe NSURL FileURLWithFileSystemRepresentation (sbyte* path, bool isDir, [NullAllowed] NSURL baseURL);

		// -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString;
		[Export ("initWithString:")]
		NativeHandle Constructor (string URLString);

		// -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString relativeToURL:(NSURL * _Nullable)baseURL __attribute__((objc_designated_initializer));
		[Export ("initWithString:relativeToURL:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string URLString, [NullAllowed] NSURL baseURL);

		// +(instancetype _Nullable)URLWithString:(NSString * _Nonnull)URLString;
		[Static]
		[Export ("URLWithString:")]
		[return: NullAllowed]
		NSURL URLWithString (string URLString);

		// +(instancetype _Nullable)URLWithString:(NSString * _Nonnull)URLString relativeToURL:(NSURL * _Nullable)baseURL;
		[Static]
		[Export ("URLWithString:relativeToURL:")]
		[return: NullAllowed]
		NSURL URLWithString (string URLString, [NullAllowed] NSURL baseURL);

		// -(instancetype _Nonnull)initWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("initWithDataRepresentation:relativeToURL:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSData data, [NullAllowed] NSURL baseURL);

		// +(NSURL * _Nonnull)URLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("URLWithDataRepresentation:relativeToURL:")]
		NSURL URLWithDataRepresentation (NSData data, [NullAllowed] NSURL baseURL);

		// -(instancetype _Nonnull)initAbsoluteURLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("initAbsoluteURLWithDataRepresentation:relativeToURL:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSData data, [NullAllowed] NSURL baseURL);

		// +(NSURL * _Nonnull)absoluteURLWithDataRepresentation:(NSData * _Nonnull)data relativeToURL:(NSURL * _Nullable)baseURL __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("absoluteURLWithDataRepresentation:relativeToURL:")]
		NSURL AbsoluteURLWithDataRepresentation (NSData data, [NullAllowed] NSURL baseURL);

		// @property (readonly, copy) NSData * _Nonnull dataRepresentation __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("dataRepresentation", ArgumentSemantic.Copy)]
		NSData DataRepresentation { get; }

		// @property (readonly, copy) NSString * _Nullable absoluteString;
		[NullAllowed, Export ("absoluteString")]
		string AbsoluteString { get; }

		// @property (readonly, copy) NSString * _Nonnull relativeString;
		[Export ("relativeString")]
		string RelativeString { get; }

		// @property (readonly, copy) NSURL * _Nullable baseURL;
		[NullAllowed, Export ("baseURL", ArgumentSemantic.Copy)]
		NSURL BaseURL { get; }

		// @property (readonly, copy) NSURL * _Nullable absoluteURL;
		[NullAllowed, Export ("absoluteURL", ArgumentSemantic.Copy)]
		NSURL AbsoluteURL { get; }

		// @property (readonly, copy) NSString * _Nullable scheme;
		[NullAllowed, Export ("scheme")]
		string Scheme { get; }

		// @property (readonly, copy) NSString * _Nullable resourceSpecifier;
		[NullAllowed, Export ("resourceSpecifier")]
		string ResourceSpecifier { get; }

		// @property (readonly, copy) NSString * _Nullable host;
		[NullAllowed, Export ("host")]
		string Host { get; }

		// @property (readonly, copy) NSNumber * _Nullable port;
		[NullAllowed, Export ("port", ArgumentSemantic.Copy)]
		NSNumber Port { get; }

		// @property (readonly, copy) NSString * _Nullable user;
		[NullAllowed, Export ("user")]
		string User { get; }

		// @property (readonly, copy) NSString * _Nullable password;
		[NullAllowed, Export ("password")]
		string Password { get; }

		// @property (readonly, copy) NSString * _Nullable path;
		[NullAllowed, Export ("path")]
		string Path { get; }

		// @property (readonly, copy) NSString * _Nullable fragment;
		[NullAllowed, Export ("fragment")]
		string Fragment { get; }

		// @property (readonly, copy) NSString * _Nullable parameterString __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=2.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "The parameterString method is deprecated. Post deprecation for applications linked with or after the macOS 10.15, and for all iOS, watchOS, and tvOS applications, parameterString will always return nil, and the path method will return the complete path including the semicolon separator and params component if the URL string contains them.")]
		[NullAllowed, Export ("parameterString")]
		string ParameterString { get; }

		// @property (readonly, copy) NSString * _Nullable query;
		[NullAllowed, Export ("query")]
		string Query { get; }

		// @property (readonly, copy) NSString * _Nullable relativePath;
		[NullAllowed, Export ("relativePath")]
		string RelativePath { get; }

		// @property (readonly) BOOL hasDirectoryPath __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("hasDirectoryPath")]
		bool HasDirectoryPath { get; }

		// -(BOOL)getFileSystemRepresentation:(char * _Nonnull)buffer maxLength:(NSUInteger)maxBufferLength __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("getFileSystemRepresentation:maxLength:")]
		unsafe bool GetFileSystemRepresentation (sbyte* buffer, nuint maxBufferLength);

		// @property (readonly) NS_RETURNS_INNER_POINTER const char * fileSystemRepresentation __attribute__((objc_returns_inner_pointer)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Export ("fileSystemRepresentation")]
		unsafe sbyte* FileSystemRepresentation { get; }

		// @property (readonly, getter = isFileURL) BOOL fileURL;
		[Export ("fileURL")]
		bool FileURL { [Bind ("isFileURL")] get; }

		// @property (readonly, copy) NSURL * _Nullable standardizedURL;
		[NullAllowed, Export ("standardizedURL", ArgumentSemantic.Copy)]
		NSURL StandardizedURL { get; }

		// -(BOOL)checkResourceIsReachableAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((swift_error("none"))) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("checkResourceIsReachableAndReturnError:")]
		bool CheckResourceIsReachableAndReturnError ([NullAllowed] out NSError error);

		// -(BOOL)isFileReferenceURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("isFileReferenceURL")]
		bool IsFileReferenceURL { get; }

		// -(NSURL * _Nullable)fileReferenceURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("fileReferenceURL")]
		NSURL FileReferenceURL { get; }

		// @property (readonly, copy) NSURL * _Nullable filePathURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("filePathURL", ArgumentSemantic.Copy)]
		NSURL FilePathURL { get; }

		// -(BOOL)getResourceValue:(id  _Nullable * _Nonnull)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("getResourceValue:forKey:error:")]
		bool GetResourceValue ([NullAllowed] out NSObject value, string key, [NullAllowed] out NSError error);

		// -(NSDictionary<NSURLResourceKey,id> * _Nullable)resourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("resourceValuesForKeys:error:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> ResourceValuesForKeys (string[] keys, [NullAllowed] out NSError error);

		// -(BOOL)setResourceValue:(id _Nullable)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("setResourceValue:forKey:error:")]
		bool SetResourceValue ([NullAllowed] NSObject value, string key, [NullAllowed] out NSError error);

		// -(BOOL)setResourceValues:(NSDictionary<NSURLResourceKey,id> * _Nonnull)keyedValues error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("setResourceValues:error:")]
		bool SetResourceValues (NSDictionary<NSString, NSObject> keyedValues, [NullAllowed] out NSError error);

		// -(void)removeCachedResourceValueForKey:(NSURLResourceKey _Nonnull)key __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("removeCachedResourceValueForKey:")]
		void RemoveCachedResourceValueForKey (string key);

		// -(void)removeAllCachedResourceValues __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("removeAllCachedResourceValues")]
		void RemoveAllCachedResourceValues ();

		// -(void)setTemporaryResourceValue:(id _Nullable)value forKey:(NSURLResourceKey _Nonnull)key __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("setTemporaryResourceValue:forKey:")]
		void SetTemporaryResourceValue ([NullAllowed] NSObject value, string key);

		// -(NSData * _Nullable)bookmarkDataWithOptions:(NSURLBookmarkCreationOptions)options includingResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys relativeToURL:(NSURL * _Nullable)relativeURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:")]
		[return: NullAllowed]
		NSData BookmarkDataWithOptions (NSURLBookmarkCreationOptions options, [NullAllowed] string[] keys, [NullAllowed] NSURL relativeURL, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initByResolvingBookmarkData:(NSData * _Nonnull)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL * _Nullable)relativeURL bookmarkDataIsStale:(BOOL * _Nullable)isStale error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:")]
		unsafe NativeHandle Constructor (NSData bookmarkData, NSURLBookmarkResolutionOptions options, [NullAllowed] NSURL relativeURL, [NullAllowed] bool* isStale, [NullAllowed] out NSError error);

		// +(instancetype _Nullable)URLByResolvingBookmarkData:(NSData * _Nonnull)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL * _Nullable)relativeURL bookmarkDataIsStale:(BOOL * _Nullable)isStale error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:")]
		[return: NullAllowed]
		unsafe NSURL URLByResolvingBookmarkData (NSData bookmarkData, NSURLBookmarkResolutionOptions options, [NullAllowed] NSURL relativeURL, [NullAllowed] bool* isStale, [NullAllowed] out NSError error);

		// +(NSDictionary<NSURLResourceKey,id> * _Nullable)resourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys fromBookmarkData:(NSData * _Nonnull)bookmarkData __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("resourceValuesForKeys:fromBookmarkData:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> ResourceValuesForKeys (string[] keys, NSData bookmarkData);

		// +(BOOL)writeBookmarkData:(NSData * _Nonnull)bookmarkData toURL:(NSURL * _Nonnull)bookmarkFileURL options:(NSURLBookmarkFileCreationOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("writeBookmarkData:toURL:options:error:")]
		bool WriteBookmarkData (NSData bookmarkData, NSURL bookmarkFileURL, nuint options, [NullAllowed] out NSError error);

		// +(NSData * _Nullable)bookmarkDataWithContentsOfURL:(NSURL * _Nonnull)bookmarkFileURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("bookmarkDataWithContentsOfURL:error:")]
		[return: NullAllowed]
		NSData BookmarkDataWithContentsOfURL (NSURL bookmarkFileURL, [NullAllowed] out NSError error);

		// +(instancetype _Nullable)URLByResolvingAliasFileAtURL:(NSURL * _Nonnull)url options:(NSURLBookmarkResolutionOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Static]
		[Export ("URLByResolvingAliasFileAtURL:options:error:")]
		[return: NullAllowed]
		NSURL URLByResolvingAliasFileAtURL (NSURL url, NSURLBookmarkResolutionOptions options, [NullAllowed] out NSError error);

		// -(BOOL)startAccessingSecurityScopedResource __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (8, 0)]
		[Export ("startAccessingSecurityScopedResource")]
		bool StartAccessingSecurityScopedResource { get; }

		// -(void)stopAccessingSecurityScopedResource __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (8,0)]
		[Export ("stopAccessingSecurityScopedResource")]
		void StopAccessingSecurityScopedResource ();
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSURLFileScheme;
		[Field ("NSURLFileScheme", "__Internal")]
		NSString NSURLFileScheme { get; }

		// extern const NSURLResourceKey _Nonnull NSURLKeysOfUnsetValuesKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLKeysOfUnsetValuesKey", "__Internal")]
		NSString NSURLKeysOfUnsetValuesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLNameKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLNameKey", "__Internal")]
		NSString NSURLNameKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLLocalizedNameKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLLocalizedNameKey", "__Internal")]
		NSString NSURLLocalizedNameKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsRegularFileKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsRegularFileKey", "__Internal")]
		NSString NSURLIsRegularFileKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsDirectoryKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsDirectoryKey", "__Internal")]
		NSString NSURLIsDirectoryKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsSymbolicLinkKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsSymbolicLinkKey", "__Internal")]
		NSString NSURLIsSymbolicLinkKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsVolumeKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsVolumeKey", "__Internal")]
		NSString NSURLIsVolumeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsPackageKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsPackageKey", "__Internal")]
		NSString NSURLIsPackageKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsApplicationKey __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSURLIsApplicationKey", "__Internal")]
		NSString NSURLIsApplicationKey { get; }

		// extern API_AVAILABLE(macos(10.11)) const NSURLResourceKey NSURLApplicationIsScriptableKey __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 11)]
		[Field ("NSURLApplicationIsScriptableKey", "__Internal")]
		NSString NSURLApplicationIsScriptableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsSystemImmutableKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsSystemImmutableKey", "__Internal")]
		NSString NSURLIsSystemImmutableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsUserImmutableKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsUserImmutableKey", "__Internal")]
		NSString NSURLIsUserImmutableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsHiddenKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsHiddenKey", "__Internal")]
		NSString NSURLIsHiddenKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLHasHiddenExtensionKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLHasHiddenExtensionKey", "__Internal")]
		NSString NSURLHasHiddenExtensionKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLCreationDateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLCreationDateKey", "__Internal")]
		NSString NSURLCreationDateKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLContentAccessDateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLContentAccessDateKey", "__Internal")]
		NSString NSURLContentAccessDateKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLContentModificationDateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLContentModificationDateKey", "__Internal")]
		NSString NSURLContentModificationDateKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLAttributeModificationDateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLAttributeModificationDateKey", "__Internal")]
		NSString NSURLAttributeModificationDateKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLLinkCountKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLLinkCountKey", "__Internal")]
		NSString NSURLLinkCountKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLParentDirectoryURLKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLParentDirectoryURLKey", "__Internal")]
		NSString NSURLParentDirectoryURLKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeURLKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeURLKey", "__Internal")]
		NSString NSURLVolumeURLKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLTypeIdentifierKey __attribute__((availability(macos, introduced=10.6, deprecated=100000))) __attribute__((availability(ios, introduced=4.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use NSURLContentTypeKey instead")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "Use NSURLContentTypeKey instead")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use NSURLContentTypeKey instead")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "Use NSURLContentTypeKey instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLContentTypeKey instead")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "Use NSURLContentTypeKey instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLContentTypeKey instead")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "Use NSURLContentTypeKey instead")]
		[Field ("NSURLTypeIdentifierKey", "__Internal")]
		NSString NSURLTypeIdentifierKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLContentTypeKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("NSURLContentTypeKey", "__Internal")]
		NSString NSURLContentTypeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLLocalizedTypeDescriptionKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLLocalizedTypeDescriptionKey", "__Internal")]
		NSString NSURLLocalizedTypeDescriptionKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLLabelNumberKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLLabelNumberKey", "__Internal")]
		NSString NSURLLabelNumberKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLLabelColorKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLLabelColorKey", "__Internal")]
		NSString NSURLLabelColorKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLLocalizedLabelKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLLocalizedLabelKey", "__Internal")]
		NSString NSURLLocalizedLabelKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLEffectiveIconKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLEffectiveIconKey", "__Internal")]
		NSString NSURLEffectiveIconKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLCustomIconKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLCustomIconKey", "__Internal")]
		NSString NSURLCustomIconKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLFileResourceIdentifierKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceIdentifierKey", "__Internal")]
		NSString NSURLFileResourceIdentifierKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIdentifierKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeIdentifierKey", "__Internal")]
		NSString NSURLVolumeIdentifierKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLPreferredIOBlockSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLPreferredIOBlockSizeKey", "__Internal")]
		NSString NSURLPreferredIOBlockSizeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsReadableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLIsReadableKey", "__Internal")]
		NSString NSURLIsReadableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsWritableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLIsWritableKey", "__Internal")]
		NSString NSURLIsWritableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsExecutableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLIsExecutableKey", "__Internal")]
		NSString NSURLIsExecutableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLFileSecurityKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileSecurityKey", "__Internal")]
		NSString NSURLFileSecurityKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsExcludedFromBackupKey __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=5.1))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (5, 1)]
		[Field ("NSURLIsExcludedFromBackupKey", "__Internal")]
		NSString NSURLIsExcludedFromBackupKey { get; }

		// extern API_AVAILABLE(macos(10.9)) const NSURLResourceKey NSURLTagNamesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSURLTagNamesKey", "__Internal")]
		NSString NSURLTagNamesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLPathKey __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Field ("NSURLPathKey", "__Internal")]
		NSString NSURLPathKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLCanonicalPathKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLCanonicalPathKey", "__Internal")]
		NSString NSURLCanonicalPathKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsMountTriggerKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLIsMountTriggerKey", "__Internal")]
		NSString NSURLIsMountTriggerKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLGenerationIdentifierKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLGenerationIdentifierKey", "__Internal")]
		NSString NSURLGenerationIdentifierKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLDocumentIdentifierKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLDocumentIdentifierKey", "__Internal")]
		NSString NSURLDocumentIdentifierKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLAddedToDirectoryDateKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLAddedToDirectoryDateKey", "__Internal")]
		NSString NSURLAddedToDirectoryDateKey { get; }

		// extern API_AVAILABLE(macos(10.10)) const NSURLResourceKey NSURLQuarantinePropertiesKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 10)]
		[Field ("NSURLQuarantinePropertiesKey", "__Internal")]
		NSString NSURLQuarantinePropertiesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLFileResourceTypeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeKey", "__Internal")]
		NSString NSURLFileResourceTypeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLFileIdentifierKey __attribute__((availability(macos, introduced=13.3))) __attribute__((availability(ios, introduced=16.4))) __attribute__((availability(watchos, introduced=9.4))) __attribute__((availability(tvos, introduced=16.4)));
		[Watch (9, 4), TV (16, 4), Mac (13, 3), iOS (16, 4)]
		[Field ("NSURLFileIdentifierKey", "__Internal")]
		NSString NSURLFileIdentifierKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLFileContentIdentifierKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("NSURLFileContentIdentifierKey", "__Internal")]
		NSString NSURLFileContentIdentifierKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLMayShareFileContentKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("NSURLMayShareFileContentKey", "__Internal")]
		NSString NSURLMayShareFileContentKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLMayHaveExtendedAttributesKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("NSURLMayHaveExtendedAttributesKey", "__Internal")]
		NSString NSURLMayHaveExtendedAttributesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsPurgeableKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("NSURLIsPurgeableKey", "__Internal")]
		NSString NSURLIsPurgeableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsSparseKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("NSURLIsSparseKey", "__Internal")]
		NSString NSURLIsSparseKey { get; }

		// extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeNamedPipe __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeNamedPipe", "__Internal")]
		NSString NSURLFileResourceTypeNamedPipe { get; }

		// extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeCharacterSpecial __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeCharacterSpecial", "__Internal")]
		NSString NSURLFileResourceTypeCharacterSpecial { get; }

		// extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeDirectory __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeDirectory", "__Internal")]
		NSString NSURLFileResourceTypeDirectory { get; }

		// extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeBlockSpecial __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeBlockSpecial", "__Internal")]
		NSString NSURLFileResourceTypeBlockSpecial { get; }

		// extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeRegular __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeRegular", "__Internal")]
		NSString NSURLFileResourceTypeRegular { get; }

		// extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeSymbolicLink __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeSymbolicLink", "__Internal")]
		NSString NSURLFileResourceTypeSymbolicLink { get; }

		// extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeSocket __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeSocket", "__Internal")]
		NSString NSURLFileResourceTypeSocket { get; }

		// extern const NSURLFileResourceType _Nonnull NSURLFileResourceTypeUnknown __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLFileResourceTypeUnknown", "__Internal")]
		NSString NSURLFileResourceTypeUnknown { get; }

		// extern const NSURLResourceKey _Nonnull NSURLThumbnailDictionaryKey __attribute__((availability(macos, introduced=10.10, deprecated=12.0))) __attribute__((availability(ios, introduced=8.0, deprecated=15.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=8.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=15.0)));
		[Introduced (PlatformName.MacOSX, 10, 10, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.MacOSX, 12, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Introduced (PlatformName.iOS, 8, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.iOS, 15, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.WatchOS, 8, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Field ("NSURLThumbnailDictionaryKey", "__Internal")]
		NSString NSURLThumbnailDictionaryKey { get; }

		// extern API_DEPRECATED("Use the QuickLookThumbnailing framework and extension point instead", macos(10.10, 12.0)) const NSURLResourceKey NSURLThumbnailKey __attribute__((availability(macos, introduced=10.10, deprecated=12.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 10, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.MacOSX, 12, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[NoWatch, NoTV, NoiOS]
		[Field ("NSURLThumbnailKey", "__Internal")]
		NSString NSURLThumbnailKey { get; }

		// extern const NSURLThumbnailDictionaryItem _Nonnull NSThumbnail1024x1024SizeKey __attribute__((availability(macos, introduced=10.10, deprecated=12.0))) __attribute__((availability(ios, introduced=8.0, deprecated=15.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=8.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=15.0)));
		[Introduced (PlatformName.MacOSX, 10, 10, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.MacOSX, 12, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Introduced (PlatformName.iOS, 8, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.iOS, 15, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.WatchOS, 8, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Use the QuickLookThumbnailing framework and extension point instead")]
		[Field ("NSThumbnail1024x1024SizeKey", "__Internal")]
		NSString NSThumbnail1024x1024SizeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLFileSizeKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLFileSizeKey", "__Internal")]
		NSString NSURLFileSizeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLFileAllocatedSizeKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLFileAllocatedSizeKey", "__Internal")]
		NSString NSURLFileAllocatedSizeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLTotalFileSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLTotalFileSizeKey", "__Internal")]
		NSString NSURLTotalFileSizeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLTotalFileAllocatedSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLTotalFileAllocatedSizeKey", "__Internal")]
		NSString NSURLTotalFileAllocatedSizeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsAliasFileKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLIsAliasFileKey", "__Internal")]
		NSString NSURLIsAliasFileKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLFileProtectionKey __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Field ("NSURLFileProtectionKey", "__Internal")]
		NSString NSURLFileProtectionKey { get; }

		// extern const NSURLFileProtectionType _Nonnull NSURLFileProtectionNone __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (11, 0), iOS (9, 0)]
		[Field ("NSURLFileProtectionNone", "__Internal")]
		NSString NSURLFileProtectionNone { get; }

		// extern const NSURLFileProtectionType _Nonnull NSURLFileProtectionComplete __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (11, 0), iOS (9, 0)]
		[Field ("NSURLFileProtectionComplete", "__Internal")]
		NSString NSURLFileProtectionComplete { get; }

		// extern const NSURLFileProtectionType _Nonnull NSURLFileProtectionCompleteUnlessOpen __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (11, 0), iOS (9, 0)]
		[Field ("NSURLFileProtectionCompleteUnlessOpen", "__Internal")]
		NSString NSURLFileProtectionCompleteUnlessOpen { get; }

		// extern const NSURLFileProtectionType _Nonnull NSURLFileProtectionCompleteUntilFirstUserAuthentication __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (11, 0), iOS (9, 0)]
		[Field ("NSURLFileProtectionCompleteUntilFirstUserAuthentication", "__Internal")]
		NSString NSURLFileProtectionCompleteUntilFirstUserAuthentication { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeLocalizedFormatDescriptionKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeLocalizedFormatDescriptionKey", "__Internal")]
		NSString NSURLVolumeLocalizedFormatDescriptionKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeTotalCapacityKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeTotalCapacityKey", "__Internal")]
		NSString NSURLVolumeTotalCapacityKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeAvailableCapacityKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeAvailableCapacityKey", "__Internal")]
		NSString NSURLVolumeAvailableCapacityKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeResourceCountKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeResourceCountKey", "__Internal")]
		NSString NSURLVolumeResourceCountKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsPersistentIDsKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeSupportsPersistentIDsKey", "__Internal")]
		NSString NSURLVolumeSupportsPersistentIDsKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsSymbolicLinksKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeSupportsSymbolicLinksKey", "__Internal")]
		NSString NSURLVolumeSupportsSymbolicLinksKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsHardLinksKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeSupportsHardLinksKey", "__Internal")]
		NSString NSURLVolumeSupportsHardLinksKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsJournalingKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeSupportsJournalingKey", "__Internal")]
		NSString NSURLVolumeSupportsJournalingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsJournalingKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeIsJournalingKey", "__Internal")]
		NSString NSURLVolumeIsJournalingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsSparseFilesKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeSupportsSparseFilesKey", "__Internal")]
		NSString NSURLVolumeSupportsSparseFilesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsZeroRunsKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeSupportsZeroRunsKey", "__Internal")]
		NSString NSURLVolumeSupportsZeroRunsKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsCaseSensitiveNamesKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeSupportsCaseSensitiveNamesKey", "__Internal")]
		NSString NSURLVolumeSupportsCaseSensitiveNamesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsCasePreservedNamesKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLVolumeSupportsCasePreservedNamesKey", "__Internal")]
		NSString NSURLVolumeSupportsCasePreservedNamesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsRootDirectoryDatesKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeSupportsRootDirectoryDatesKey", "__Internal")]
		NSString NSURLVolumeSupportsRootDirectoryDatesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsVolumeSizesKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeSupportsVolumeSizesKey", "__Internal")]
		NSString NSURLVolumeSupportsVolumeSizesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsRenamingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeSupportsRenamingKey", "__Internal")]
		NSString NSURLVolumeSupportsRenamingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsAdvisoryFileLockingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeSupportsAdvisoryFileLockingKey", "__Internal")]
		NSString NSURLVolumeSupportsAdvisoryFileLockingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsExtendedSecurityKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeSupportsExtendedSecurityKey", "__Internal")]
		NSString NSURLVolumeSupportsExtendedSecurityKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsBrowsableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeIsBrowsableKey", "__Internal")]
		NSString NSURLVolumeIsBrowsableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeMaximumFileSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeMaximumFileSizeKey", "__Internal")]
		NSString NSURLVolumeMaximumFileSizeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsEjectableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeIsEjectableKey", "__Internal")]
		NSString NSURLVolumeIsEjectableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsRemovableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeIsRemovableKey", "__Internal")]
		NSString NSURLVolumeIsRemovableKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsInternalKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeIsInternalKey", "__Internal")]
		NSString NSURLVolumeIsInternalKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsAutomountedKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeIsAutomountedKey", "__Internal")]
		NSString NSURLVolumeIsAutomountedKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsLocalKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeIsLocalKey", "__Internal")]
		NSString NSURLVolumeIsLocalKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsReadOnlyKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeIsReadOnlyKey", "__Internal")]
		NSString NSURLVolumeIsReadOnlyKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeCreationDateKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeCreationDateKey", "__Internal")]
		NSString NSURLVolumeCreationDateKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeURLForRemountingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeURLForRemountingKey", "__Internal")]
		NSString NSURLVolumeURLForRemountingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeUUIDStringKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeUUIDStringKey", "__Internal")]
		NSString NSURLVolumeUUIDStringKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeNameKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeNameKey", "__Internal")]
		NSString NSURLVolumeNameKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeLocalizedNameKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLVolumeLocalizedNameKey", "__Internal")]
		NSString NSURLVolumeLocalizedNameKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsEncryptedKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLVolumeIsEncryptedKey", "__Internal")]
		NSString NSURLVolumeIsEncryptedKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeIsRootFileSystemKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLVolumeIsRootFileSystemKey", "__Internal")]
		NSString NSURLVolumeIsRootFileSystemKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsCompressionKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLVolumeSupportsCompressionKey", "__Internal")]
		NSString NSURLVolumeSupportsCompressionKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsFileCloningKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLVolumeSupportsFileCloningKey", "__Internal")]
		NSString NSURLVolumeSupportsFileCloningKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsSwapRenamingKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLVolumeSupportsSwapRenamingKey", "__Internal")]
		NSString NSURLVolumeSupportsSwapRenamingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsExclusiveRenamingKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLVolumeSupportsExclusiveRenamingKey", "__Internal")]
		NSString NSURLVolumeSupportsExclusiveRenamingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsImmutableFilesKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("NSURLVolumeSupportsImmutableFilesKey", "__Internal")]
		NSString NSURLVolumeSupportsImmutableFilesKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsAccessPermissionsKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("NSURLVolumeSupportsAccessPermissionsKey", "__Internal")]
		NSString NSURLVolumeSupportsAccessPermissionsKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSupportsFileProtectionKey __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Field ("NSURLVolumeSupportsFileProtectionKey", "__Internal")]
		NSString NSURLVolumeSupportsFileProtectionKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeAvailableCapacityForImportantUsageKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 13), iOS (11, 0)]
		[Field ("NSURLVolumeAvailableCapacityForImportantUsageKey", "__Internal")]
		NSString NSURLVolumeAvailableCapacityForImportantUsageKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeAvailableCapacityForOpportunisticUsageKey __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 13), iOS (11, 0)]
		[Field ("NSURLVolumeAvailableCapacityForOpportunisticUsageKey", "__Internal")]
		NSString NSURLVolumeAvailableCapacityForOpportunisticUsageKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeTypeNameKey __attribute__((availability(macos, introduced=13.3))) __attribute__((availability(ios, introduced=16.4))) __attribute__((availability(watchos, introduced=9.4))) __attribute__((availability(tvos, introduced=16.4)));
		[Watch (9, 4), TV (16, 4), Mac (13, 3), iOS (16, 4)]
		[Field ("NSURLVolumeTypeNameKey", "__Internal")]
		NSString NSURLVolumeTypeNameKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeSubtypeKey __attribute__((availability(macos, introduced=13.3))) __attribute__((availability(ios, introduced=16.4))) __attribute__((availability(watchos, introduced=9.4))) __attribute__((availability(tvos, introduced=16.4)));
		[Watch (9, 4), TV (16, 4), Mac (13, 3), iOS (16, 4)]
		[Field ("NSURLVolumeSubtypeKey", "__Internal")]
		NSString NSURLVolumeSubtypeKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLVolumeMountFromLocationKey __attribute__((availability(macos, introduced=13.3))) __attribute__((availability(ios, introduced=16.4))) __attribute__((availability(watchos, introduced=9.4))) __attribute__((availability(tvos, introduced=16.4)));
		[Watch (9, 4), TV (16, 4), Mac (13, 3), iOS (16, 4)]
		[Field ("NSURLVolumeMountFromLocationKey", "__Internal")]
		NSString NSURLVolumeMountFromLocationKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLIsUbiquitousItemKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLIsUbiquitousItemKey", "__Internal")]
		NSString NSURLIsUbiquitousItemKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemHasUnresolvedConflictsKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLUbiquitousItemHasUnresolvedConflictsKey", "__Internal")]
		NSString NSURLUbiquitousItemHasUnresolvedConflictsKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsDownloadedKey __attribute__((availability(macos, introduced=10.7, deprecated=10.9))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.iOS, 5, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLUbiquitousItemDownloadingStatusKey instead")]
		[Field ("NSURLUbiquitousItemIsDownloadedKey", "__Internal")]
		NSString NSURLUbiquitousItemIsDownloadedKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsDownloadingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLUbiquitousItemIsDownloadingKey", "__Internal")]
		NSString NSURLUbiquitousItemIsDownloadingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsUploadedKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLUbiquitousItemIsUploadedKey", "__Internal")]
		NSString NSURLUbiquitousItemIsUploadedKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsUploadingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSURLUbiquitousItemIsUploadingKey", "__Internal")]
		NSString NSURLUbiquitousItemIsUploadingKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemPercentDownloadedKey __attribute__((availability(macos, introduced=10.7, deprecated=10.8))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
		[Introduced (PlatformName.iOS, 5, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemPercentDownloadedKey instead")]
		[Field ("NSURLUbiquitousItemPercentDownloadedKey", "__Internal")]
		NSString NSURLUbiquitousItemPercentDownloadedKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemPercentUploadedKey __attribute__((availability(macos, introduced=10.7, deprecated=10.8))) __attribute__((availability(ios, introduced=5.0, deprecated=6.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
		[Introduced (PlatformName.iOS, 5, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemPercentUploadedKey instead")]
		[Field ("NSURLUbiquitousItemPercentUploadedKey", "__Internal")]
		NSString NSURLUbiquitousItemPercentUploadedKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemDownloadingStatusKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLUbiquitousItemDownloadingStatusKey", "__Internal")]
		NSString NSURLUbiquitousItemDownloadingStatusKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemDownloadingErrorKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLUbiquitousItemDownloadingErrorKey", "__Internal")]
		NSString NSURLUbiquitousItemDownloadingErrorKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemUploadingErrorKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLUbiquitousItemUploadingErrorKey", "__Internal")]
		NSString NSURLUbiquitousItemUploadingErrorKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemDownloadRequestedKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLUbiquitousItemDownloadRequestedKey", "__Internal")]
		NSString NSURLUbiquitousItemDownloadRequestedKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemContainerDisplayNameKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLUbiquitousItemContainerDisplayNameKey", "__Internal")]
		NSString NSURLUbiquitousItemContainerDisplayNameKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsExcludedFromSyncKey __attribute__((availability(macos, introduced=11.3))) __attribute__((availability(ios, introduced=14.5))) __attribute__((availability(watchos, introduced=7.4))) __attribute__((availability(tvos, introduced=14.5)));
		[Watch (7, 4), TV (14, 5), Mac (11, 3), iOS (14, 5)]
		[Field ("NSURLUbiquitousItemIsExcludedFromSyncKey", "__Internal")]
		NSString NSURLUbiquitousItemIsExcludedFromSyncKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousItemIsSharedKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousItemIsSharedKey", "__Internal")]
		NSString NSURLUbiquitousItemIsSharedKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousSharedItemCurrentUserRoleKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousSharedItemCurrentUserRoleKey", "__Internal")]
		NSString NSURLUbiquitousSharedItemCurrentUserRoleKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousSharedItemCurrentUserPermissionsKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousSharedItemCurrentUserPermissionsKey", "__Internal")]
		NSString NSURLUbiquitousSharedItemCurrentUserPermissionsKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousSharedItemOwnerNameComponentsKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousSharedItemOwnerNameComponentsKey", "__Internal")]
		NSString NSURLUbiquitousSharedItemOwnerNameComponentsKey { get; }

		// extern const NSURLResourceKey _Nonnull NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey", "__Internal")]
		NSString NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey { get; }

		// extern const NSURLUbiquitousItemDownloadingStatus _Nonnull NSURLUbiquitousItemDownloadingStatusNotDownloaded __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLUbiquitousItemDownloadingStatusNotDownloaded", "__Internal")]
		NSString NSURLUbiquitousItemDownloadingStatusNotDownloaded { get; }

		// extern const NSURLUbiquitousItemDownloadingStatus _Nonnull NSURLUbiquitousItemDownloadingStatusDownloaded __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLUbiquitousItemDownloadingStatusDownloaded", "__Internal")]
		NSString NSURLUbiquitousItemDownloadingStatusDownloaded { get; }

		// extern const NSURLUbiquitousItemDownloadingStatus _Nonnull NSURLUbiquitousItemDownloadingStatusCurrent __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLUbiquitousItemDownloadingStatusCurrent", "__Internal")]
		NSString NSURLUbiquitousItemDownloadingStatusCurrent { get; }

		// extern const NSURLUbiquitousSharedItemRole _Nonnull NSURLUbiquitousSharedItemRoleOwner __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousSharedItemRoleOwner", "__Internal")]
		NSString NSURLUbiquitousSharedItemRoleOwner { get; }

		// extern const NSURLUbiquitousSharedItemRole _Nonnull NSURLUbiquitousSharedItemRoleParticipant __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousSharedItemRoleParticipant", "__Internal")]
		NSString NSURLUbiquitousSharedItemRoleParticipant { get; }

		// extern const NSURLUbiquitousSharedItemPermissions _Nonnull NSURLUbiquitousSharedItemPermissionsReadOnly __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousSharedItemPermissionsReadOnly", "__Internal")]
		NSString NSURLUbiquitousSharedItemPermissionsReadOnly { get; }

		// extern const NSURLUbiquitousSharedItemPermissions _Nonnull NSURLUbiquitousSharedItemPermissionsReadWrite __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSURLUbiquitousSharedItemPermissionsReadWrite", "__Internal")]
		NSString NSURLUbiquitousSharedItemPermissionsReadWrite { get; }
	}

	// @interface NSPromisedItems (NSURL)
	[Category]
	[BaseType (typeof(NSURL))]
	interface NSURL_NSPromisedItems
	{
		// -(BOOL)getPromisedItemResourceValue:(id  _Nullable * _Nonnull)value forKey:(NSURLResourceKey _Nonnull)key error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("getPromisedItemResourceValue:forKey:error:")]
		bool GetPromisedItemResourceValue ([NullAllowed] out NSObject value, string key, [NullAllowed] out NSError error);

		// -(NSDictionary<NSURLResourceKey,id> * _Nullable)promisedItemResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nonnull)keys error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("promisedItemResourceValuesForKeys:error:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> PromisedItemResourceValuesForKeys (string[] keys, [NullAllowed] out NSError error);

		// -(BOOL)checkPromisedItemIsReachableAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((swift_error("none"))) __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("checkPromisedItemIsReachableAndReturnError:")]
		bool CheckPromisedItemIsReachableAndReturnError ([NullAllowed] out NSError error);
	}

	// @interface NSItemProvider (NSURL) <NSItemProviderReading, NSItemProviderWriting>
	[Category]
	[BaseType (typeof(NSURL))]
	interface NSURL_NSItemProvider : INSItemProviderReading, INSItemProviderWriting
	{
	}

	// @interface NSURLQueryItem : NSObject <NSSecureCoding, NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLQueryItem : INSSecureCoding, INSCopying
	{
		// -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value __attribute__((objc_designated_initializer));
		[Export ("initWithName:value:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string name, [NullAllowed] string value);

		// +(instancetype _Nonnull)queryItemWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value;
		[Static]
		[Export ("queryItemWithName:value:")]
		NSURLQueryItem QueryItemWithName (string name, [NullAllowed] string value);

		// @property (readonly) NSString * _Nonnull name;
		[Export ("name")]
		string Name { get; }

		// @property (readonly) NSString * _Nullable value;
		[NullAllowed, Export ("value")]
		string Value { get; }
	}

	// @interface NSURLComponents : NSObject <NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLComponents : INSCopying
	{
		// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url resolvingAgainstBaseURL:(BOOL)resolve;
		[Export ("initWithURL:resolvingAgainstBaseURL:")]
		NativeHandle Constructor (NSURL url, bool resolve);

		// +(instancetype _Nullable)componentsWithURL:(NSURL * _Nonnull)url resolvingAgainstBaseURL:(BOOL)resolve;
		[Static]
		[Export ("componentsWithURL:resolvingAgainstBaseURL:")]
		[return: NullAllowed]
		NSURLComponents ComponentsWithURL (NSURL url, bool resolve);

		// -(instancetype _Nullable)initWithString:(NSString * _Nonnull)URLString;
		[Export ("initWithString:")]
		NativeHandle Constructor (string URLString);

		// +(instancetype _Nullable)componentsWithString:(NSString * _Nonnull)URLString;
		[Static]
		[Export ("componentsWithString:")]
		[return: NullAllowed]
		NSURLComponents ComponentsWithString (string URLString);

		// @property (readonly, copy) NSURL * _Nullable URL;
		[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
		NSURL URL { get; }

		// -(NSURL * _Nullable)URLRelativeToURL:(NSURL * _Nullable)baseURL;
		[Export ("URLRelativeToURL:")]
		[return: NullAllowed]
		NSURL URLRelativeToURL ([NullAllowed] NSURL baseURL);

		// @property (readonly, copy) NSString * _Nullable string __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[NullAllowed, Export ("string")]
		string String { get; }

		// @property (copy) NSString * _Nullable scheme;
		[NullAllowed, Export ("scheme")]
		string Scheme { get; set; }

		// @property (copy) NSString * _Nullable user;
		[NullAllowed, Export ("user")]
		string User { get; set; }

		// @property (copy) NSString * _Nullable password;
		[NullAllowed, Export ("password")]
		string Password { get; set; }

		// @property (copy) NSString * _Nullable host;
		[NullAllowed, Export ("host")]
		string Host { get; set; }

		// @property (copy) NSNumber * _Nullable port;
		[NullAllowed, Export ("port", ArgumentSemantic.Copy)]
		NSNumber Port { get; set; }

		// @property (copy) NSString * _Nullable path;
		[NullAllowed, Export ("path")]
		string Path { get; set; }

		// @property (copy) NSString * _Nullable query;
		[NullAllowed, Export ("query")]
		string Query { get; set; }

		// @property (copy) NSString * _Nullable fragment;
		[NullAllowed, Export ("fragment")]
		string Fragment { get; set; }

		// @property (copy) NSString * _Nullable percentEncodedUser;
		[NullAllowed, Export ("percentEncodedUser")]
		string PercentEncodedUser { get; set; }

		// @property (copy) NSString * _Nullable percentEncodedPassword;
		[NullAllowed, Export ("percentEncodedPassword")]
		string PercentEncodedPassword { get; set; }

		// @property (copy) NSString * _Nullable percentEncodedHost __attribute__((availability(macos, introduced=10.9, deprecated=100000))) __attribute__((availability(ios, introduced=7.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Use encodedHost instead")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "Use encodedHost instead")]
		[Introduced (PlatformName.iOS, 7, 0, message: "Use encodedHost instead")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "Use encodedHost instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use encodedHost instead")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "Use encodedHost instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use encodedHost instead")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "Use encodedHost instead")]
		[NullAllowed, Export ("percentEncodedHost")]
		string PercentEncodedHost { get; set; }

		// @property (copy) NSString * _Nullable percentEncodedPath;
		[NullAllowed, Export ("percentEncodedPath")]
		string PercentEncodedPath { get; set; }

		// @property (copy) NSString * _Nullable percentEncodedQuery;
		[NullAllowed, Export ("percentEncodedQuery")]
		string PercentEncodedQuery { get; set; }

		// @property (copy) NSString * _Nullable percentEncodedFragment;
		[NullAllowed, Export ("percentEncodedFragment")]
		string PercentEncodedFragment { get; set; }

		// @property (copy) NSString * _Nullable encodedHost __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.0))) __attribute__((availability(watchos, introduced=9.0))) __attribute__((availability(tvos, introduced=16.0)));
		[Watch (9, 0), TV (16, 0), Mac (13, 0), iOS (16, 0)]
		[NullAllowed, Export ("encodedHost")]
		string EncodedHost { get; set; }

		// @property (readonly) NSRange rangeOfScheme __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("rangeOfScheme")]
		NSRange RangeOfScheme { get; }

		// @property (readonly) NSRange rangeOfUser __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("rangeOfUser")]
		NSRange RangeOfUser { get; }

		// @property (readonly) NSRange rangeOfPassword __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("rangeOfPassword")]
		NSRange RangeOfPassword { get; }

		// @property (readonly) NSRange rangeOfHost __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("rangeOfHost")]
		NSRange RangeOfHost { get; }

		// @property (readonly) NSRange rangeOfPort __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("rangeOfPort")]
		NSRange RangeOfPort { get; }

		// @property (readonly) NSRange rangeOfPath __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("rangeOfPath")]
		NSRange RangeOfPath { get; }

		// @property (readonly) NSRange rangeOfQuery __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("rangeOfQuery")]
		NSRange RangeOfQuery { get; }

		// @property (readonly) NSRange rangeOfFragment __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("rangeOfFragment")]
		NSRange RangeOfFragment { get; }

		// @property (copy) NSArray<NSURLQueryItem *> * _Nullable queryItems __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[NullAllowed, Export ("queryItems", ArgumentSemantic.Copy)]
		NSURLQueryItem[] QueryItems { get; set; }

		// @property (copy) NSArray<NSURLQueryItem *> * _Nullable percentEncodedQueryItems __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[NullAllowed, Export ("percentEncodedQueryItems", ArgumentSemantic.Copy)]
		NSURLQueryItem[] PercentEncodedQueryItems { get; set; }
	}

	// @interface NSURLUtilities (NSCharacterSet)
	[Category]
	[BaseType (typeof(NSCharacterSet))]
	interface NSCharacterSet_NSURLUtilities
	{
		// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLUserAllowedCharacterSet __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Static]
		[Export ("URLUserAllowedCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet URLUserAllowedCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLPasswordAllowedCharacterSet __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Static]
		[Export ("URLPasswordAllowedCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet URLPasswordAllowedCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLHostAllowedCharacterSet __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Static]
		[Export ("URLHostAllowedCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet URLHostAllowedCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLPathAllowedCharacterSet __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Static]
		[Export ("URLPathAllowedCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet URLPathAllowedCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLQueryAllowedCharacterSet __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Static]
		[Export ("URLQueryAllowedCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet URLQueryAllowedCharacterSet { get; }

		// @property (readonly, copy, class) NSCharacterSet * _Nonnull URLFragmentAllowedCharacterSet __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Static]
		[Export ("URLFragmentAllowedCharacterSet", ArgumentSemantic.Copy)]
		NSCharacterSet URLFragmentAllowedCharacterSet { get; }
	}

	// @interface NSURLUtilities (NSString)
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSURLUtilities
	{
		// -(NSString * _Nullable)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet * _Nonnull)allowedCharacters __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("stringByAddingPercentEncodingWithAllowedCharacters:")]
		[return: NullAllowed]
		string StringByAddingPercentEncodingWithAllowedCharacters (NSCharacterSet allowedCharacters);

		// @property (readonly, copy) NSString * _Nullable stringByRemovingPercentEncoding __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[NullAllowed, Export ("stringByRemovingPercentEncoding")]
		string StringByRemovingPercentEncoding { get; }

		// -(NSString * _Nullable)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)enc __attribute__((availability(macos, introduced=10.0, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -stringByAddingPercentEncodingWithAllowedCharacters: instead, which always uses the recommended UTF-8 encoding, and which encodes for a specific URL component or subcomponent since each URL component or subcomponent has different rules for what characters are valid.")]
		[Export ("stringByAddingPercentEscapesUsingEncoding:")]
		[return: NullAllowed]
		string StringByAddingPercentEscapesUsingEncoding (nuint enc);

		// -(NSString * _Nullable)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)enc __attribute__((availability(macos, introduced=10.0, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -stringByRemovingPercentEncoding instead, which always uses the recommended UTF-8 encoding.")]
		[Export ("stringByReplacingPercentEscapesUsingEncoding:")]
		[return: NullAllowed]
		string StringByReplacingPercentEscapesUsingEncoding (nuint enc);
	}

	// @interface NSURLPathUtilities (NSURL)
	[Category]
	[BaseType (typeof(NSURL))]
	interface NSURL_NSURLPathUtilities
	{
		// +(NSURL * _Nullable)fileURLWithPathComponents:(NSArray<NSString *> * _Nonnull)components __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("fileURLWithPathComponents:")]
		[return: NullAllowed]
		NSURL FileURLWithPathComponents (string[] components);

		// @property (readonly, copy) NSArray<NSString *> * _Nullable pathComponents __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("pathComponents", ArgumentSemantic.Copy)]
		string[] PathComponents { get; }

		// @property (readonly, copy) NSString * _Nullable lastPathComponent __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("lastPathComponent")]
		string LastPathComponent { get; }

		// @property (readonly, copy) NSString * _Nullable pathExtension __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("pathExtension")]
		string PathExtension { get; }

		// -(NSURL * _Nullable)URLByAppendingPathComponent:(NSString * _Nonnull)pathComponent __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLByAppendingPathComponent:")]
		[return: NullAllowed]
		NSURL URLByAppendingPathComponent (string pathComponent);

		// -(NSURL * _Nullable)URLByAppendingPathComponent:(NSString * _Nonnull)pathComponent isDirectory:(BOOL)isDirectory __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("URLByAppendingPathComponent:isDirectory:")]
		[return: NullAllowed]
		NSURL URLByAppendingPathComponent (string pathComponent, bool isDirectory);

		// @property (readonly, copy) NSURL * _Nullable URLByDeletingLastPathComponent __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("URLByDeletingLastPathComponent", ArgumentSemantic.Copy)]
		NSURL URLByDeletingLastPathComponent { get; }

		// -(NSURL * _Nullable)URLByAppendingPathExtension:(NSString * _Nonnull)pathExtension __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLByAppendingPathExtension:")]
		[return: NullAllowed]
		NSURL URLByAppendingPathExtension (string pathExtension);

		// @property (readonly, copy) NSURL * _Nullable URLByDeletingPathExtension __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("URLByDeletingPathExtension", ArgumentSemantic.Copy)]
		NSURL URLByDeletingPathExtension { get; }

		// @property (readonly, copy) NSURL * _Nullable URLByStandardizingPath __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("URLByStandardizingPath", ArgumentSemantic.Copy)]
		NSURL URLByStandardizingPath { get; }

		// @property (readonly, copy) NSURL * _Nullable URLByResolvingSymlinksInPath __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("URLByResolvingSymlinksInPath", ArgumentSemantic.Copy)]
		NSURL URLByResolvingSymlinksInPath { get; }
	}

	// @interface NSFileSecurity : NSObject <NSCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSFileSecurity : INSCopying, INSSecureCoding
	{
		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	[Static]
	partial interface Constants
	{
		// extern API_AVAILABLE(macos(10.11)) NSString *const NSFileManagerUnmountDissentingProcessIdentifierErrorKey __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 11)]
		[Field ("NSFileManagerUnmountDissentingProcessIdentifierErrorKey", "__Internal")]
		NSString NSFileManagerUnmountDissentingProcessIdentifierErrorKey { get; }

		// extern const NSNotificationName _Nonnull NSUbiquityIdentityDidChangeNotification __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Field ("NSUbiquityIdentityDidChangeNotification", "__Internal")]
		NSString NSUbiquityIdentityDidChangeNotification { get; }
	}

	// @interface NSFileManager : NSObject
	[BaseType (typeof(NSObject))]
	interface NSFileManager
	{
		// @property (readonly, strong, class) NSFileManager * _Nonnull defaultManager;
		[Static]
		[Export ("defaultManager", ArgumentSemantic.Strong)]
		NSFileManager DefaultManager { get; }

		// -(NSArray<NSURL *> * _Nullable)mountedVolumeURLsIncludingResourceValuesForKeys:(NSArray<NSURLResourceKey> * _Nullable)propertyKeys options:(NSVolumeEnumerationOptions)options __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("mountedVolumeURLsIncludingResourceValuesForKeys:options:")]
		[return: NullAllowed]
		NSURL[] MountedVolumeURLsIncludingResourceValuesForKeys ([NullAllowed] string[] propertyKeys, NSVolumeEnumerationOptions options);

		// -(void)unmountVolumeAtURL:(NSURL * _Nonnull)url options:(NSFileManagerUnmountOptions)mask completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,11)]
		[Export ("unmountVolumeAtURL:options:completionHandler:")]
		void UnmountVolumeAtURL (NSURL url, NSFileManagerUnmountOptions mask, Action<NSError> completionHandler);

		// -(NSArray<NSURL *> * _Nullable)contentsOfDirectoryAtURL:(NSURL * _Nonnull)url includingPropertiesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys options:(NSDirectoryEnumerationOptions)mask error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:")]
		[return: NullAllowed]
		NSURL[] ContentsOfDirectoryAtURL (NSURL url, [NullAllowed] string[] keys, NSDirectoryEnumerationOptions mask, [NullAllowed] out NSError error);

		// -(NSArray<NSURL *> * _Nonnull)URLsForDirectory:(NSSearchPathDirectory)directory inDomains:(NSSearchPathDomainMask)domainMask __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLsForDirectory:inDomains:")]
		NSURL[] URLsForDirectory (NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask);

		// -(NSURL * _Nullable)URLForDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domain appropriateForURL:(NSURL * _Nullable)url create:(BOOL)shouldCreate error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLForDirectory:inDomain:appropriateForURL:create:error:")]
		[return: NullAllowed]
		NSURL URLForDirectory (NSSearchPathDirectory directory, NSSearchPathDomainMask domain, [NullAllowed] NSURL url, bool shouldCreate, [NullAllowed] out NSError error);

		// -(BOOL)getRelationship:(NSURLRelationship * _Nonnull)outRelationship ofDirectoryAtURL:(NSURL * _Nonnull)directoryURL toItemAtURL:(NSURL * _Nonnull)otherURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("getRelationship:ofDirectoryAtURL:toItemAtURL:error:")]
		unsafe bool GetRelationship (NSURLRelationship* outRelationship, NSURL directoryURL, NSURL otherURL, [NullAllowed] out NSError error);

		// -(BOOL)getRelationship:(NSURLRelationship * _Nonnull)outRelationship ofDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domainMask toItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("getRelationship:ofDirectory:inDomain:toItemAtURL:error:")]
		unsafe bool GetRelationship (NSURLRelationship* outRelationship, NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, NSURL url, [NullAllowed] out NSError error);

		// -(BOOL)createDirectoryAtURL:(NSURL * _Nonnull)url withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("createDirectoryAtURL:withIntermediateDirectories:attributes:error:")]
		bool CreateDirectoryAtURL (NSURL url, bool createIntermediates, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] out NSError error);

		// -(BOOL)createSymbolicLinkAtURL:(NSURL * _Nonnull)url withDestinationURL:(NSURL * _Nonnull)destURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("createSymbolicLinkAtURL:withDestinationURL:error:")]
		bool CreateSymbolicLinkAtURL (NSURL url, NSURL destURL, [NullAllowed] out NSError error);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSFileManagerDelegate Delegate { get; set; }

		// @property (assign) id<NSFileManagerDelegate> _Nullable delegate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// -(BOOL)setAttributes:(NSDictionary<NSFileAttributeKey,id> * _Nonnull)attributes ofItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("setAttributes:ofItemAtPath:error:")]
		bool SetAttributes (NSDictionary<NSString, NSObject> attributes, string path, [NullAllowed] out NSError error);

		// -(BOOL)createDirectoryAtPath:(NSString * _Nonnull)path withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("createDirectoryAtPath:withIntermediateDirectories:attributes:error:")]
		bool CreateDirectoryAtPath (string path, bool createIntermediates, [NullAllowed] NSDictionary<NSString, NSObject> attributes, [NullAllowed] out NSError error);

		// -(NSArray<NSString *> * _Nullable)contentsOfDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("contentsOfDirectoryAtPath:error:")]
		[return: NullAllowed]
		string[] ContentsOfDirectoryAtPath (string path, [NullAllowed] out NSError error);

		// -(NSArray<NSString *> * _Nullable)subpathsOfDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("subpathsOfDirectoryAtPath:error:")]
		[return: NullAllowed]
		string[] SubpathsOfDirectoryAtPath (string path, [NullAllowed] out NSError error);

		// -(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributesOfItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("attributesOfItemAtPath:error:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> AttributesOfItemAtPath (string path, [NullAllowed] out NSError error);

		// -(NSDictionary<NSFileAttributeKey,id> * _Nullable)attributesOfFileSystemForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("attributesOfFileSystemForPath:error:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> AttributesOfFileSystemForPath (string path, [NullAllowed] out NSError error);

		// -(BOOL)createSymbolicLinkAtPath:(NSString * _Nonnull)path withDestinationPath:(NSString * _Nonnull)destPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("createSymbolicLinkAtPath:withDestinationPath:error:")]
		bool CreateSymbolicLinkAtPath (string path, string destPath, [NullAllowed] out NSError error);

		// -(NSString * _Nullable)destinationOfSymbolicLinkAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("destinationOfSymbolicLinkAtPath:error:")]
		[return: NullAllowed]
		string DestinationOfSymbolicLinkAtPath (string path, [NullAllowed] out NSError error);

		// -(BOOL)copyItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("copyItemAtPath:toPath:error:")]
		bool CopyItemAtPath (string srcPath, string dstPath, [NullAllowed] out NSError error);

		// -(BOOL)moveItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("moveItemAtPath:toPath:error:")]
		bool MoveItemAtPath (string srcPath, string dstPath, [NullAllowed] out NSError error);

		// -(BOOL)linkItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("linkItemAtPath:toPath:error:")]
		bool LinkItemAtPath (string srcPath, string dstPath, [NullAllowed] out NSError error);

		// -(BOOL)removeItemAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("removeItemAtPath:error:")]
		bool RemoveItemAtPath (string path, [NullAllowed] out NSError error);

		// -(BOOL)copyItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("copyItemAtURL:toURL:error:")]
		bool CopyItemAtURL (NSURL srcURL, NSURL dstURL, [NullAllowed] out NSError error);

		// -(BOOL)moveItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("moveItemAtURL:toURL:error:")]
		bool MoveItemAtURL (NSURL srcURL, NSURL dstURL, [NullAllowed] out NSError error);

		// -(BOOL)linkItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("linkItemAtURL:toURL:error:")]
		bool LinkItemAtURL (NSURL srcURL, NSURL dstURL, [NullAllowed] out NSError error);

		// -(BOOL)removeItemAtURL:(NSURL * _Nonnull)URL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("removeItemAtURL:error:")]
		bool RemoveItemAtURL (NSURL URL, [NullAllowed] out NSError error);

		// -(BOOL)trashItemAtURL:(NSURL * _Nonnull)url resultingItemURL:(NSURL * _Nullable * _Nullable)outResultingURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10,8), iOS (11,0)]
		[Export ("trashItemAtURL:resultingItemURL:error:")]
		bool TrashItemAtURL (NSURL url, [NullAllowed] out NSURL outResultingURL, [NullAllowed] out NSError error);

		// -(NSDictionary * _Nullable)fileAttributesAtPath:(NSString * _Nonnull)path traverseLink:(BOOL)yorn __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -attributesOfItemAtPath:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -attributesOfItemAtPath:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -attributesOfItemAtPath:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -attributesOfItemAtPath:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -attributesOfItemAtPath:error: instead")]
		[Export ("fileAttributesAtPath:traverseLink:")]
		[return: NullAllowed]
		NSDictionary FileAttributesAtPath (string path, bool yorn);

		// -(BOOL)changeFileAttributes:(NSDictionary * _Nonnull)attributes atPath:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -setAttributes:ofItemAtPath:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -setAttributes:ofItemAtPath:error: instead")]
		[Export ("changeFileAttributes:atPath:")]
		bool ChangeFileAttributes (NSDictionary attributes, string path);

		// -(NSArray * _Nullable)directoryContentsAtPath:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -contentsOfDirectoryAtPath:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -contentsOfDirectoryAtPath:error: instead")]
		[Export ("directoryContentsAtPath:")]
		[return: NullAllowed]
		NSObject[] DirectoryContentsAtPath (string path);

		// -(NSDictionary * _Nullable)fileSystemAttributesAtPath:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -attributesOfFileSystemForPath:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -attributesOfFileSystemForPath:error: instead")]
		[Export ("fileSystemAttributesAtPath:")]
		[return: NullAllowed]
		NSDictionary FileSystemAttributesAtPath (string path);

		// -(NSString * _Nullable)pathContentOfSymbolicLinkAtPath:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -destinationOfSymbolicLinkAtPath:error:")]
		[Export ("pathContentOfSymbolicLinkAtPath:")]
		[return: NullAllowed]
		string PathContentOfSymbolicLinkAtPath (string path);

		// -(BOOL)createSymbolicLinkAtPath:(NSString * _Nonnull)path pathContent:(NSString * _Nonnull)otherpath __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -createSymbolicLinkAtPath:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -createSymbolicLinkAtPath:error: instead")]
		[Export ("createSymbolicLinkAtPath:pathContent:")]
		bool CreateSymbolicLinkAtPath (string path, string otherpath);

		// -(BOOL)createDirectoryAtPath:(NSString * _Nonnull)path attributes:(NSDictionary * _Nonnull)attributes __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -createDirectoryAtPath:withIntermediateDirectories:attributes:error: instead")]
		[Export ("createDirectoryAtPath:attributes:")]
		bool CreateDirectoryAtPath (string path, NSDictionary attributes);

		// @property (readonly, copy) NSString * _Nonnull currentDirectoryPath;
		[Export ("currentDirectoryPath")]
		string CurrentDirectoryPath { get; }

		// -(BOOL)changeCurrentDirectoryPath:(NSString * _Nonnull)path;
		[Export ("changeCurrentDirectoryPath:")]
		bool ChangeCurrentDirectoryPath (string path);

		// -(BOOL)fileExistsAtPath:(NSString * _Nonnull)path;
		[Export ("fileExistsAtPath:")]
		bool FileExistsAtPath (string path);

		// -(BOOL)fileExistsAtPath:(NSString * _Nonnull)path isDirectory:(BOOL * _Nullable)isDirectory;
		[Export ("fileExistsAtPath:isDirectory:")]
		unsafe bool FileExistsAtPath (string path, [NullAllowed] bool* isDirectory);

		// -(BOOL)isReadableFileAtPath:(NSString * _Nonnull)path;
		[Export ("isReadableFileAtPath:")]
		bool IsReadableFileAtPath (string path);

		// -(BOOL)isWritableFileAtPath:(NSString * _Nonnull)path;
		[Export ("isWritableFileAtPath:")]
		bool IsWritableFileAtPath (string path);

		// -(BOOL)isExecutableFileAtPath:(NSString * _Nonnull)path;
		[Export ("isExecutableFileAtPath:")]
		bool IsExecutableFileAtPath (string path);

		// -(BOOL)isDeletableFileAtPath:(NSString * _Nonnull)path;
		[Export ("isDeletableFileAtPath:")]
		bool IsDeletableFileAtPath (string path);

		// -(BOOL)contentsEqualAtPath:(NSString * _Nonnull)path1 andPath:(NSString * _Nonnull)path2;
		[Export ("contentsEqualAtPath:andPath:")]
		bool ContentsEqualAtPath (string path1, string path2);

		// -(NSString * _Nonnull)displayNameAtPath:(NSString * _Nonnull)path;
		[Export ("displayNameAtPath:")]
		string DisplayNameAtPath (string path);

		// -(NSArray<NSString *> * _Nullable)componentsToDisplayForPath:(NSString * _Nonnull)path;
		[Export ("componentsToDisplayForPath:")]
		[return: NullAllowed]
		string[] ComponentsToDisplayForPath (string path);

		// -(NSDirectoryEnumerator<NSString *> * _Nullable)enumeratorAtPath:(NSString * _Nonnull)path;
		[Export ("enumeratorAtPath:")]
		[return: NullAllowed]
		NSDirectoryEnumerator<NSString> EnumeratorAtPath (string path);

		// -(NSDirectoryEnumerator<NSURL *> * _Nullable)enumeratorAtURL:(NSURL * _Nonnull)url includingPropertiesForKeys:(NSArray<NSURLResourceKey> * _Nullable)keys options:(NSDirectoryEnumerationOptions)mask errorHandler:(BOOL (^ _Nullable)(NSURL * _Nonnull, NSError * _Nonnull))handler __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:")]
		[return: NullAllowed]
		NSDirectoryEnumerator<NSURL> EnumeratorAtURL (NSURL url, [NullAllowed] string[] keys, NSDirectoryEnumerationOptions mask, [NullAllowed] Func<NSURL, NSError, bool> handler);

		// -(NSArray<NSString *> * _Nullable)subpathsAtPath:(NSString * _Nonnull)path;
		[Export ("subpathsAtPath:")]
		[return: NullAllowed]
		string[] SubpathsAtPath (string path);

		// -(NSData * _Nullable)contentsAtPath:(NSString * _Nonnull)path;
		[Export ("contentsAtPath:")]
		[return: NullAllowed]
		NSData ContentsAtPath (string path);

		// -(BOOL)createFileAtPath:(NSString * _Nonnull)path contents:(NSData * _Nullable)data attributes:(NSDictionary<NSFileAttributeKey,id> * _Nullable)attr;
		[Export ("createFileAtPath:contents:attributes:")]
		bool CreateFileAtPath (string path, [NullAllowed] NSData data, [NullAllowed] NSDictionary<NSString, NSObject> attr);

		// -(const char * _Nonnull)fileSystemRepresentationWithPath:(NSString * _Nonnull)path __attribute__((objc_returns_inner_pointer));
		[Export ("fileSystemRepresentationWithPath:")]
		unsafe sbyte* FileSystemRepresentationWithPath (string path);

		// -(NSString * _Nonnull)stringWithFileSystemRepresentation:(const char * _Nonnull)str length:(NSUInteger)len;
		[Export ("stringWithFileSystemRepresentation:length:")]
		unsafe string StringWithFileSystemRepresentation (sbyte* str, nuint len);

		// -(BOOL)replaceItemAtURL:(NSURL * _Nonnull)originalItemURL withItemAtURL:(NSURL * _Nonnull)newItemURL backupItemName:(NSString * _Nullable)backupItemName options:(NSFileManagerItemReplacementOptions)options resultingItemURL:(NSURL * _Nullable * _Nullable)resultingURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:")]
		bool ReplaceItemAtURL (NSURL originalItemURL, NSURL newItemURL, [NullAllowed] string backupItemName, NSFileManagerItemReplacementOptions options, [NullAllowed] out NSURL resultingURL, [NullAllowed] out NSError error);

		// -(BOOL)setUbiquitous:(BOOL)flag itemAtURL:(NSURL * _Nonnull)url destinationURL:(NSURL * _Nonnull)destinationURL error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("setUbiquitous:itemAtURL:destinationURL:error:")]
		bool SetUbiquitous (bool flag, NSURL url, NSURL destinationURL, [NullAllowed] out NSError error);

		// -(BOOL)isUbiquitousItemAtURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("isUbiquitousItemAtURL:")]
		bool IsUbiquitousItemAtURL (NSURL url);

		// -(BOOL)startDownloadingUbiquitousItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("startDownloadingUbiquitousItemAtURL:error:")]
		bool StartDownloadingUbiquitousItemAtURL (NSURL url, [NullAllowed] out NSError error);

		// -(BOOL)evictUbiquitousItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("evictUbiquitousItemAtURL:error:")]
		bool EvictUbiquitousItemAtURL (NSURL url, [NullAllowed] out NSError error);

		// -(NSURL * _Nullable)URLForUbiquityContainerIdentifier:(NSString * _Nullable)containerIdentifier __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("URLForUbiquityContainerIdentifier:")]
		[return: NullAllowed]
		NSURL URLForUbiquityContainerIdentifier ([NullAllowed] string containerIdentifier);

		// -(NSURL * _Nullable)URLForPublishingUbiquitousItemAtURL:(NSURL * _Nonnull)url expirationDate:(NSDate * _Nullable * _Nullable)outDate error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("URLForPublishingUbiquitousItemAtURL:expirationDate:error:")]
		[return: NullAllowed]
		NSURL URLForPublishingUbiquitousItemAtURL (NSURL url, [NullAllowed] out NSDate outDate, [NullAllowed] out NSError error);

		// @property (readonly, copy) id<NSObject,NSCopying,NSCoding> _Nullable ubiquityIdentityToken __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[NullAllowed, Export ("ubiquityIdentityToken", ArgumentSemantic.Copy)]
		NSObject<NSObject, NSCopying, NSCoding> UbiquityIdentityToken { get; }

		// -(void)getFileProviderServicesForItemAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSDictionary<NSFileProviderServiceName,NSFileProviderService *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10,13), iOS (11,0)]
		[Export ("getFileProviderServicesForItemAtURL:completionHandler:")]
		void GetFileProviderServicesForItemAtURL (NSURL url, Action<NSDictionary<NSString, NSFileProviderService>, NSError> completionHandler);

		// -(NSURL * _Nullable)containerURLForSecurityApplicationGroupIdentifier:(NSString * _Nonnull)groupIdentifier __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (7,0)]
		[Export ("containerURLForSecurityApplicationGroupIdentifier:")]
		[return: NullAllowed]
		NSURL ContainerURLForSecurityApplicationGroupIdentifier (string groupIdentifier);
	}

	// @interface NSUserInformation (NSFileManager)
	[Category]
	[BaseType (typeof(NSFileManager))]
	interface NSFileManager_NSUserInformation
	{
		// @property (readonly, copy) API_AVAILABLE(macosx(10.12)) NSURL * homeDirectoryForCurrentUser __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 12)]
		[Export ("homeDirectoryForCurrentUser", ArgumentSemantic.Copy)]
		NSURL HomeDirectoryForCurrentUser { get; }

		// @property (readonly, copy) NSURL * _Nonnull temporaryDirectory __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("temporaryDirectory", ArgumentSemantic.Copy)]
		NSURL TemporaryDirectory { get; }

		// -(NSURL * _Nullable)homeDirectoryForUser:(NSString * _Nonnull)userName __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,12)]
		[Export ("homeDirectoryForUser:")]
		[return: NullAllowed]
		NSURL HomeDirectoryForUser (string userName);
	}

	// @interface NSCopyLinkMoveHandler (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSCopyLinkMoveHandler
	{
		// -(BOOL)fileManager:(NSFileManager * _Nonnull)fm shouldProceedAfterError:(NSDictionary * _Nonnull)errorInfo __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: " Handler API no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: " Handler API no longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: " Handler API no longer supported")]
		[Deprecated (PlatformName.iOS, 2, 0, message: " Handler API no longer supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: " Handler API no longer supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: " Handler API no longer supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: " Handler API no longer supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: " Handler API no longer supported")]
		[Export ("fileManager:shouldProceedAfterError:")]
		bool FileManager (NSFileManager fm, NSDictionary errorInfo);

		// -(void)fileManager:(NSFileManager * _Nonnull)fm willProcessPath:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Handler API no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Handler API no longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Handler API no longer supported")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Handler API no longer supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Handler API no longer supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Handler API no longer supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Handler API no longer supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Handler API no longer supported")]
		[Export ("fileManager:willProcessPath:")]
		void FileManager (NSFileManager fm, string path);
	}

	// @protocol NSFileManagerDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSFileManagerDelegate
	{
		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldCopyItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
		[Export ("fileManager:shouldCopyItemAtPath:toPath:")]
		bool ShouldCopyItemAtPath (NSFileManager fileManager, string srcPath, string dstPath);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldCopyItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("fileManager:shouldCopyItemAtURL:toURL:")]
		bool ShouldCopyItemAtURL (NSFileManager fileManager, NSURL srcURL, NSURL dstURL);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error copyingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
		[Export ("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:")]
		bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, string srcPath, string dstPath);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error copyingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:")]
		bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, NSURL srcURL, NSURL dstURL);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldMoveItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
		[Export ("fileManager:shouldMoveItemAtPath:toPath:")]
		bool ShouldMoveItemAtPath (NSFileManager fileManager, string srcPath, string dstPath);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldMoveItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("fileManager:shouldMoveItemAtURL:toURL:")]
		bool ShouldMoveItemAtURL (NSFileManager fileManager, NSURL srcURL, NSURL dstURL);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error movingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
		[Export ("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:")]
		bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, string srcPath, string dstPath);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error movingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:")]
		bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, NSURL srcURL, NSURL dstURL);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldLinkItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
		[Export ("fileManager:shouldLinkItemAtPath:toPath:")]
		bool ShouldLinkItemAtPath (NSFileManager fileManager, string srcPath, string dstPath);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldLinkItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("fileManager:shouldLinkItemAtURL:toURL:")]
		bool ShouldLinkItemAtURL (NSFileManager fileManager, NSURL srcURL, NSURL dstURL);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error linkingItemAtPath:(NSString * _Nonnull)srcPath toPath:(NSString * _Nonnull)dstPath;
		[Export ("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:")]
		bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, string srcPath, string dstPath);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error linkingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:")]
		bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, NSURL srcURL, NSURL dstURL);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldRemoveItemAtPath:(NSString * _Nonnull)path;
		[Export ("fileManager:shouldRemoveItemAtPath:")]
		bool ShouldRemoveItemAtPath (NSFileManager fileManager, string path);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldRemoveItemAtURL:(NSURL * _Nonnull)URL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("fileManager:shouldRemoveItemAtURL:")]
		bool ShouldRemoveItemAtURL (NSFileManager fileManager, NSURL URL);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error removingItemAtPath:(NSString * _Nonnull)path;
		[Export ("fileManager:shouldProceedAfterError:removingItemAtPath:")]
		bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, string path);

		// @optional -(BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error removingItemAtURL:(NSURL * _Nonnull)URL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("fileManager:shouldProceedAfterError:removingItemAtURL:")]
		bool ShouldProceedAfterError (NSFileManager fileManager, NSError error, NSURL URL);
	}

	// audit-objc-generics: @interface NSDirectoryEnumerator<ObjectType> : NSEnumerator
	[BaseType (typeof(NSEnumerator))]
	interface NSDirectoryEnumerator
	{
		// @property (readonly, copy) NSDictionary<NSFileAttributeKey,id> * _Nullable fileAttributes;
		[NullAllowed, Export ("fileAttributes", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> FileAttributes { get; }

		// @property (readonly, copy) NSDictionary<NSFileAttributeKey,id> * _Nullable directoryAttributes;
		[NullAllowed, Export ("directoryAttributes", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> DirectoryAttributes { get; }

		// @property (readonly) BOOL isEnumeratingDirectoryPostOrder __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("isEnumeratingDirectoryPostOrder")]
		bool IsEnumeratingDirectoryPostOrder { get; }

		// -(void)skipDescendents;
		[Export ("skipDescendents")]
		void SkipDescendents ();

		// @property (readonly) NSUInteger level __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("level")]
		nuint Level { get; }

		// -(void)skipDescendants __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("skipDescendants")]
		void SkipDescendants ();
	}

	// @interface NSFileProviderService : NSObject
	[NoWatch, NoTV, Mac (10,13), iOS (11,0)]
	[BaseType (typeof(NSObject))]
	interface NSFileProviderService
	{
		// -(void)getFileProviderConnectionWithCompletionHandler:(void (^ _Nonnull)(NSXPCConnection * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("getFileProviderConnectionWithCompletionHandler:")]
		void GetFileProviderConnectionWithCompletionHandler (Action<NSXPCConnection, NSError> completionHandler);

		// @property (readonly, copy) NSFileProviderServiceName _Nonnull name;
		[Export ("name")]
		string Name { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSFileAttributeKey _Nonnull NSFileType;
		[Field ("NSFileType", "__Internal")]
		NSString NSFileType { get; }

		// extern const NSFileAttributeType _Nonnull NSFileTypeDirectory;
		[Field ("NSFileTypeDirectory", "__Internal")]
		NSString NSFileTypeDirectory { get; }

		// extern const NSFileAttributeType _Nonnull NSFileTypeRegular;
		[Field ("NSFileTypeRegular", "__Internal")]
		NSString NSFileTypeRegular { get; }

		// extern const NSFileAttributeType _Nonnull NSFileTypeSymbolicLink;
		[Field ("NSFileTypeSymbolicLink", "__Internal")]
		NSString NSFileTypeSymbolicLink { get; }

		// extern const NSFileAttributeType _Nonnull NSFileTypeSocket;
		[Field ("NSFileTypeSocket", "__Internal")]
		NSString NSFileTypeSocket { get; }

		// extern const NSFileAttributeType _Nonnull NSFileTypeCharacterSpecial;
		[Field ("NSFileTypeCharacterSpecial", "__Internal")]
		NSString NSFileTypeCharacterSpecial { get; }

		// extern const NSFileAttributeType _Nonnull NSFileTypeBlockSpecial;
		[Field ("NSFileTypeBlockSpecial", "__Internal")]
		NSString NSFileTypeBlockSpecial { get; }

		// extern const NSFileAttributeType _Nonnull NSFileTypeUnknown;
		[Field ("NSFileTypeUnknown", "__Internal")]
		NSString NSFileTypeUnknown { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileSize;
		[Field ("NSFileSize", "__Internal")]
		NSString NSFileSize { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileModificationDate;
		[Field ("NSFileModificationDate", "__Internal")]
		NSString NSFileModificationDate { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileReferenceCount;
		[Field ("NSFileReferenceCount", "__Internal")]
		NSString NSFileReferenceCount { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileDeviceIdentifier;
		[Field ("NSFileDeviceIdentifier", "__Internal")]
		NSString NSFileDeviceIdentifier { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileOwnerAccountName;
		[Field ("NSFileOwnerAccountName", "__Internal")]
		NSString NSFileOwnerAccountName { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileGroupOwnerAccountName;
		[Field ("NSFileGroupOwnerAccountName", "__Internal")]
		NSString NSFileGroupOwnerAccountName { get; }

		// extern const NSFileAttributeKey _Nonnull NSFilePosixPermissions;
		[Field ("NSFilePosixPermissions", "__Internal")]
		NSString NSFilePosixPermissions { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileSystemNumber;
		[Field ("NSFileSystemNumber", "__Internal")]
		NSString NSFileSystemNumber { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileSystemFileNumber;
		[Field ("NSFileSystemFileNumber", "__Internal")]
		NSString NSFileSystemFileNumber { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileExtensionHidden;
		[Field ("NSFileExtensionHidden", "__Internal")]
		NSString NSFileExtensionHidden { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileHFSCreatorCode;
		[Field ("NSFileHFSCreatorCode", "__Internal")]
		NSString NSFileHFSCreatorCode { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileHFSTypeCode;
		[Field ("NSFileHFSTypeCode", "__Internal")]
		NSString NSFileHFSTypeCode { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileImmutable;
		[Field ("NSFileImmutable", "__Internal")]
		NSString NSFileImmutable { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileAppendOnly;
		[Field ("NSFileAppendOnly", "__Internal")]
		NSString NSFileAppendOnly { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileCreationDate;
		[Field ("NSFileCreationDate", "__Internal")]
		NSString NSFileCreationDate { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileOwnerAccountID;
		[Field ("NSFileOwnerAccountID", "__Internal")]
		NSString NSFileOwnerAccountID { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileGroupOwnerAccountID;
		[Field ("NSFileGroupOwnerAccountID", "__Internal")]
		NSString NSFileGroupOwnerAccountID { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileBusy;
		[Field ("NSFileBusy", "__Internal")]
		NSString NSFileBusy { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileProtectionKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSFileProtectionKey", "__Internal")]
		NSString NSFileProtectionKey { get; }

		// extern const NSFileProtectionType _Nonnull NSFileProtectionNone __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSFileProtectionNone", "__Internal")]
		NSString NSFileProtectionNone { get; }

		// extern const NSFileProtectionType _Nonnull NSFileProtectionComplete __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSFileProtectionComplete", "__Internal")]
		NSString NSFileProtectionComplete { get; }

		// extern const NSFileProtectionType _Nonnull NSFileProtectionCompleteUnlessOpen __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (5, 0)]
		[Field ("NSFileProtectionCompleteUnlessOpen", "__Internal")]
		NSString NSFileProtectionCompleteUnlessOpen { get; }

		// extern const NSFileProtectionType _Nonnull NSFileProtectionCompleteUntilFirstUserAuthentication __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (5, 0)]
		[Field ("NSFileProtectionCompleteUntilFirstUserAuthentication", "__Internal")]
		NSString NSFileProtectionCompleteUntilFirstUserAuthentication { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileSystemSize;
		[Field ("NSFileSystemSize", "__Internal")]
		NSString NSFileSystemSize { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileSystemFreeSize;
		[Field ("NSFileSystemFreeSize", "__Internal")]
		NSString NSFileSystemFreeSize { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileSystemNodes;
		[Field ("NSFileSystemNodes", "__Internal")]
		NSString NSFileSystemNodes { get; }

		// extern const NSFileAttributeKey _Nonnull NSFileSystemFreeNodes;
		[Field ("NSFileSystemFreeNodes", "__Internal")]
		NSString NSFileSystemFreeNodes { get; }
	}

	// @interface NSFileAttributes (NSDictionary)
	[Category]
	[BaseType (typeof(NSDictionary))]
	interface NSDictionary_NSFileAttributes
	{
		// -(unsigned long long)fileSize;
		[Export ("fileSize")]
		ulong FileSize { get; }

		// -(NSDate * _Nullable)fileModificationDate;
		[NullAllowed, Export ("fileModificationDate")]
		NSDate FileModificationDate { get; }

		// -(NSString * _Nullable)fileType;
		[NullAllowed, Export ("fileType")]
		string FileType { get; }

		// -(NSUInteger)filePosixPermissions;
		[Export ("filePosixPermissions")]
		nuint FilePosixPermissions { get; }

		// -(NSString * _Nullable)fileOwnerAccountName;
		[NullAllowed, Export ("fileOwnerAccountName")]
		string FileOwnerAccountName { get; }

		// -(NSString * _Nullable)fileGroupOwnerAccountName;
		[NullAllowed, Export ("fileGroupOwnerAccountName")]
		string FileGroupOwnerAccountName { get; }

		// -(NSInteger)fileSystemNumber;
		[Export ("fileSystemNumber")]
		nint FileSystemNumber { get; }

		// -(NSUInteger)fileSystemFileNumber;
		[Export ("fileSystemFileNumber")]
		nuint FileSystemFileNumber { get; }

		// -(BOOL)fileExtensionHidden;
		[Export ("fileExtensionHidden")]
		bool FileExtensionHidden { get; }

		// -(OSType)fileHFSCreatorCode;
		[Export ("fileHFSCreatorCode")]
		uint FileHFSCreatorCode { get; }

		// -(OSType)fileHFSTypeCode;
		[Export ("fileHFSTypeCode")]
		uint FileHFSTypeCode { get; }

		// -(BOOL)fileIsImmutable;
		[Export ("fileIsImmutable")]
		bool FileIsImmutable { get; }

		// -(BOOL)fileIsAppendOnly;
		[Export ("fileIsAppendOnly")]
		bool FileIsAppendOnly { get; }

		// -(NSDate * _Nullable)fileCreationDate;
		[NullAllowed, Export ("fileCreationDate")]
		NSDate FileCreationDate { get; }

		// -(NSNumber * _Nullable)fileOwnerAccountID;
		[NullAllowed, Export ("fileOwnerAccountID")]
		NSNumber FileOwnerAccountID { get; }

		// -(NSNumber * _Nullable)fileGroupOwnerAccountID;
		[NullAllowed, Export ("fileGroupOwnerAccountID")]
		NSNumber FileGroupOwnerAccountID { get; }
	}

	// @interface NSPointerFunctions : NSObject <NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,5), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSPointerFunctions : INSCopying
	{
		// -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options __attribute__((objc_designated_initializer));
		[Export ("initWithOptions:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSPointerFunctionsOptions options);

		// +(NSPointerFunctions * _Nonnull)pointerFunctionsWithOptions:(NSPointerFunctionsOptions)options;
		[Static]
		[Export ("pointerFunctionsWithOptions:")]
		NSPointerFunctions PointerFunctionsWithOptions (NSPointerFunctionsOptions options);

		// @property NSUInteger (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) hashFunction;
		[NullAllowed, Export ("hashFunction", ArgumentSemantic.Assign)]
		unsafe Func<void*, System.Func<void*, nuint>*, nuint>* HashFunction { get; set; }

		// @property BOOL (* _Nullable)(const void * _Nonnull, const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) isEqualFunction;
		[NullAllowed, Export ("isEqualFunction", ArgumentSemantic.Assign)]
		unsafe Func<void*, void*, System.Func<void*, nuint>*, bool>* IsEqualFunction { get; set; }

		// @property NSUInteger (* _Nullable)(const void * _Nonnull) sizeFunction;
		[NullAllowed, Export ("sizeFunction", ArgumentSemantic.Assign)]
		unsafe Func<void*, nuint>* SizeFunction { get; set; }

		// @property NSString * _Nullable (* _Nullable)(const void * _Nonnull) descriptionFunction;
		[NullAllowed, Export ("descriptionFunction", ArgumentSemantic.Assign)]
		unsafe Func<void*, NSString>* DescriptionFunction { get; set; }

		// @property void (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull)) relinquishFunction;
		[NullAllowed, Export ("relinquishFunction", ArgumentSemantic.Assign)]
		unsafe Action<void*, System.Func<void*, nuint>*>* RelinquishFunction { get; set; }

		// @property void * _Nonnull (* _Nullable)(const void * _Nonnull, NSUInteger (* _Nullable)(const void * _Nonnull), BOOL) acquireFunction;
		[NullAllowed, Export ("acquireFunction", ArgumentSemantic.Assign)]
		unsafe Func<void*, System.Func<void*, nuint>*, bool, void*>* AcquireFunction { get; set; }

		// @property BOOL usesStrongWriteBarrier __attribute__((availability(macos, introduced=10.5, deprecated=10.12))) __attribute__((availability(ios, introduced=2.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=10.0)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "Garbage collection no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Garbage collection no longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Garbage collection no longer supported")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Garbage collection no longer supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Garbage collection no longer supported")]
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Garbage collection no longer supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Garbage collection no longer supported")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Garbage collection no longer supported")]
		[Export ("usesStrongWriteBarrier")]
		bool UsesStrongWriteBarrier { get; set; }

		// @property BOOL usesWeakReadAndWriteBarriers __attribute__((availability(macos, introduced=10.5, deprecated=10.12))) __attribute__((availability(ios, introduced=2.0, deprecated=10.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=3.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=10.0)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "Garbage collection no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 12, message: "Garbage collection no longer supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Garbage collection no longer supported")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Garbage collection no longer supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Garbage collection no longer supported")]
		[Deprecated (PlatformName.WatchOS, 3, 0, message: "Garbage collection no longer supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Garbage collection no longer supported")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Garbage collection no longer supported")]
		[Export ("usesWeakReadAndWriteBarriers")]
		bool UsesWeakReadAndWriteBarriers { get; set; }
	}

	// audit-objc-generics: @interface NSHashTable<ObjectType> : NSObject <NSCopying, NSSecureCoding, NSFastEnumeration>
	[Watch (2,0), TV (9,0), Mac (10,5), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSHashTable : INSCopying, INSSecureCoding, INSFastEnumeration
	{
		// -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
		[Export ("initWithOptions:capacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSPointerFunctionsOptions options, nuint initialCapacity);

		// -(instancetype _Nonnull)initWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
		[Export ("initWithPointerFunctions:capacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSPointerFunctions functions, nuint initialCapacity);

		// +(NSHashTable<ObjectType> * _Nonnull)hashTableWithOptions:(NSPointerFunctionsOptions)options;
		[Static]
		[Export ("hashTableWithOptions:")]
		NSHashTable<NSObject> HashTableWithOptions (NSPointerFunctionsOptions options);

		// +(id _Nonnull)hashTableWithWeakObjects __attribute__((availability(macos, introduced=10.5, deprecated=10.8))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
		[NoWatch, NoTV, NoiOS]
		[Static]
		[Export ("hashTableWithWeakObjects")]
		NSObject HashTableWithWeakObjects { get; }

		// +(NSHashTable<ObjectType> * _Nonnull)weakObjectsHashTable __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Static]
		[Export ("weakObjectsHashTable")]
		NSHashTable<NSObject> WeakObjectsHashTable { get; }

		// @property (readonly, copy) NSPointerFunctions * _Nonnull pointerFunctions;
		[Export ("pointerFunctions", ArgumentSemantic.Copy)]
		NSPointerFunctions PointerFunctions { get; }

		// @property (readonly) NSUInteger count;
		[Export ("count")]
		nuint Count { get; }

		// -(ObjectType _Nullable)member:(ObjectType _Nullable)object;
		[Export ("member:")]
		[return: NullAllowed]
		NSObject Member ([NullAllowed] NSObject @object);

		// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
		[Export ("objectEnumerator")]
		NSEnumerator<NSObject> ObjectEnumerator { get; }

		// -(void)addObject:(ObjectType _Nullable)object;
		[Export ("addObject:")]
		void AddObject ([NullAllowed] NSObject @object);

		// -(void)removeObject:(ObjectType _Nullable)object;
		[Export ("removeObject:")]
		void RemoveObject ([NullAllowed] NSObject @object);

		// -(void)removeAllObjects;
		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		// @property (readonly, copy) NSArray<ObjectType> * _Nonnull allObjects;
		[Export ("allObjects", ArgumentSemantic.Copy)]
		NSObject[] AllObjects { get; }

		// @property (readonly, nonatomic) ObjectType _Nullable anyObject;
		[NullAllowed, Export ("anyObject")]
		NSObject AnyObject { get; }

		// -(BOOL)containsObject:(ObjectType _Nullable)anObject;
		[Export ("containsObject:")]
		bool ContainsObject ([NullAllowed] NSObject anObject);

		// -(BOOL)intersectsHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
		[Export ("intersectsHashTable:")]
		bool IntersectsHashTable (NSHashTable<NSObject> other);

		// -(BOOL)isEqualToHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
		[Export ("isEqualToHashTable:")]
		bool IsEqualToHashTable (NSHashTable<NSObject> other);

		// -(BOOL)isSubsetOfHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
		[Export ("isSubsetOfHashTable:")]
		bool IsSubsetOfHashTable (NSHashTable<NSObject> other);

		// -(void)intersectHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
		[Export ("intersectHashTable:")]
		void IntersectHashTable (NSHashTable<NSObject> other);

		// -(void)unionHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
		[Export ("unionHashTable:")]
		void UnionHashTable (NSHashTable<NSObject> other);

		// -(void)minusHashTable:(NSHashTable<ObjectType> * _Nonnull)other;
		[Export ("minusHashTable:")]
		void MinusHashTable (NSHashTable<NSObject> other);

		// @property (readonly, copy) NSSet<ObjectType> * _Nonnull setRepresentation;
		[Export ("setRepresentation", ArgumentSemantic.Copy)]
		NSSet<NSObject> SetRepresentation { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSHashTableCallBacks NSIntegerHashCallBacks __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 5)]
		[Field ("NSIntegerHashCallBacks", "__Internal")]
		NSHashTableCallBacks NSIntegerHashCallBacks { get; }

		// extern const NSHashTableCallBacks NSNonOwnedPointerHashCallBacks;
		[Field ("NSNonOwnedPointerHashCallBacks", "__Internal")]
		NSHashTableCallBacks NSNonOwnedPointerHashCallBacks { get; }

		// extern const NSHashTableCallBacks NSNonRetainedObjectHashCallBacks;
		[Field ("NSNonRetainedObjectHashCallBacks", "__Internal")]
		NSHashTableCallBacks NSNonRetainedObjectHashCallBacks { get; }

		// extern const NSHashTableCallBacks NSObjectHashCallBacks;
		[Field ("NSObjectHashCallBacks", "__Internal")]
		NSHashTableCallBacks NSObjectHashCallBacks { get; }

		// extern const NSHashTableCallBacks NSOwnedObjectIdentityHashCallBacks;
		[Field ("NSOwnedObjectIdentityHashCallBacks", "__Internal")]
		NSHashTableCallBacks NSOwnedObjectIdentityHashCallBacks { get; }

		// extern const NSHashTableCallBacks NSOwnedPointerHashCallBacks;
		[Field ("NSOwnedPointerHashCallBacks", "__Internal")]
		NSHashTableCallBacks NSOwnedPointerHashCallBacks { get; }

		// extern const NSHashTableCallBacks NSPointerToStructHashCallBacks;
		[Field ("NSPointerToStructHashCallBacks", "__Internal")]
		NSHashTableCallBacks NSPointerToStructHashCallBacks { get; }

		// extern const NSHashTableCallBacks NSIntHashCallBacks __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Not supported")]
		[NoWatch, NoTV, NoiOS]
		[Field ("NSIntHashCallBacks", "__Internal")]
		NSHashTableCallBacks NSIntHashCallBacks { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieName __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieName", "__Internal")]
		NSString NSHTTPCookieName { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieValue __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieValue", "__Internal")]
		NSString NSHTTPCookieValue { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieOriginURL __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieOriginURL", "__Internal")]
		NSString NSHTTPCookieOriginURL { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieVersion __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieVersion", "__Internal")]
		NSString NSHTTPCookieVersion { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieDomain __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieDomain", "__Internal")]
		NSString NSHTTPCookieDomain { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookiePath __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookiePath", "__Internal")]
		NSString NSHTTPCookiePath { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieSecure __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieSecure", "__Internal")]
		NSString NSHTTPCookieSecure { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieExpires __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieExpires", "__Internal")]
		NSString NSHTTPCookieExpires { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieComment __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieComment", "__Internal")]
		NSString NSHTTPCookieComment { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieCommentURL __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieCommentURL", "__Internal")]
		NSString NSHTTPCookieCommentURL { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieDiscard __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieDiscard", "__Internal")]
		NSString NSHTTPCookieDiscard { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieMaximumAge __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieMaximumAge", "__Internal")]
		NSString NSHTTPCookieMaximumAge { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookiePort __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookiePort", "__Internal")]
		NSString NSHTTPCookiePort { get; }

		// extern const NSHTTPCookiePropertyKey _Nonnull NSHTTPCookieSameSitePolicy __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Field ("NSHTTPCookieSameSitePolicy", "__Internal")]
		NSString NSHTTPCookieSameSitePolicy { get; }

		// extern const NSHTTPCookieStringPolicy _Nonnull NSHTTPCookieSameSiteLax __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Field ("NSHTTPCookieSameSiteLax", "__Internal")]
		NSString NSHTTPCookieSameSiteLax { get; }

		// extern const NSHTTPCookieStringPolicy _Nonnull NSHTTPCookieSameSiteStrict __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Field ("NSHTTPCookieSameSiteStrict", "__Internal")]
		NSString NSHTTPCookieSameSiteStrict { get; }
	}

	// @interface NSHTTPCookie : NSObject
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSHTTPCookie
	{
		// -(instancetype _Nullable)initWithProperties:(NSDictionary<NSHTTPCookiePropertyKey,id> * _Nonnull)properties;
		[Export ("initWithProperties:")]
		NativeHandle Constructor (NSDictionary<NSString, NSObject> properties);

		// +(NSHTTPCookie * _Nullable)cookieWithProperties:(NSDictionary<NSHTTPCookiePropertyKey,id> * _Nonnull)properties;
		[Static]
		[Export ("cookieWithProperties:")]
		[return: NullAllowed]
		NSHTTPCookie CookieWithProperties (NSDictionary<NSString, NSObject> properties);

		// +(NSDictionary<NSString *,NSString *> * _Nonnull)requestHeaderFieldsWithCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies;
		[Static]
		[Export ("requestHeaderFieldsWithCookies:")]
		NSDictionary<NSString, NSString> RequestHeaderFieldsWithCookies (NSHTTPCookie[] cookies);

		// +(NSArray<NSHTTPCookie *> * _Nonnull)cookiesWithResponseHeaderFields:(NSDictionary<NSString *,NSString *> * _Nonnull)headerFields forURL:(NSURL * _Nonnull)URL;
		[Static]
		[Export ("cookiesWithResponseHeaderFields:forURL:")]
		NSHTTPCookie[] CookiesWithResponseHeaderFields (NSDictionary<NSString, NSString> headerFields, NSURL URL);

		// @property (readonly, copy) NSDictionary<NSHTTPCookiePropertyKey,id> * _Nullable properties;
		[NullAllowed, Export ("properties", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> Properties { get; }

		// @property (readonly) NSUInteger version;
		[Export ("version")]
		nuint Version { get; }

		// @property (readonly, copy) NSString * _Nonnull name;
		[Export ("name")]
		string Name { get; }

		// @property (readonly, copy) NSString * _Nonnull value;
		[Export ("value")]
		string Value { get; }

		// @property (readonly, copy) NSDate * _Nullable expiresDate;
		[NullAllowed, Export ("expiresDate", ArgumentSemantic.Copy)]
		NSDate ExpiresDate { get; }

		// @property (readonly, getter = isSessionOnly) BOOL sessionOnly;
		[Export ("sessionOnly")]
		bool SessionOnly { [Bind ("isSessionOnly")] get; }

		// @property (readonly, copy) NSString * _Nonnull domain;
		[Export ("domain")]
		string Domain { get; }

		// @property (readonly, copy) NSString * _Nonnull path;
		[Export ("path")]
		string Path { get; }

		// @property (readonly, getter = isSecure) BOOL secure;
		[Export ("secure")]
		bool Secure { [Bind ("isSecure")] get; }

		// @property (readonly, getter = isHTTPOnly) BOOL HTTPOnly;
		[Export ("HTTPOnly")]
		bool HTTPOnly { [Bind ("isHTTPOnly")] get; }

		// @property (readonly, copy) NSString * _Nullable comment;
		[NullAllowed, Export ("comment")]
		string Comment { get; }

		// @property (readonly, copy) NSURL * _Nullable commentURL;
		[NullAllowed, Export ("commentURL", ArgumentSemantic.Copy)]
		NSURL CommentURL { get; }

		// @property (readonly, copy) NSArray<NSNumber *> * _Nullable portList;
		[NullAllowed, Export ("portList", ArgumentSemantic.Copy)]
		NSNumber[] PortList { get; }

		// @property (readonly, copy) NSHTTPCookieStringPolicy _Nullable sameSitePolicy __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[NullAllowed, Export ("sameSitePolicy")]
		string SameSitePolicy { get; }
	}

	// @interface NSHTTPCookieStorage : NSObject
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSHTTPCookieStorage
	{
		// @property (readonly, strong, class) NSHTTPCookieStorage * _Nonnull sharedHTTPCookieStorage;
		[Static]
		[Export ("sharedHTTPCookieStorage", ArgumentSemantic.Strong)]
		NSHTTPCookieStorage SharedHTTPCookieStorage { get; }

		// +(NSHTTPCookieStorage * _Nonnull)sharedCookieStorageForGroupContainerIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("sharedCookieStorageForGroupContainerIdentifier:")]
		NSHTTPCookieStorage SharedCookieStorageForGroupContainerIdentifier (string identifier);

		// @property (readonly, copy) NSArray<NSHTTPCookie *> * _Nullable cookies;
		[NullAllowed, Export ("cookies", ArgumentSemantic.Copy)]
		NSHTTPCookie[] Cookies { get; }

		// -(void)setCookie:(NSHTTPCookie * _Nonnull)cookie;
		[Export ("setCookie:")]
		void SetCookie (NSHTTPCookie cookie);

		// -(void)deleteCookie:(NSHTTPCookie * _Nonnull)cookie;
		[Export ("deleteCookie:")]
		void DeleteCookie (NSHTTPCookie cookie);

		// -(void)removeCookiesSinceDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("removeCookiesSinceDate:")]
		void RemoveCookiesSinceDate (NSDate date);

		// -(NSArray<NSHTTPCookie *> * _Nullable)cookiesForURL:(NSURL * _Nonnull)URL;
		[Export ("cookiesForURL:")]
		[return: NullAllowed]
		NSHTTPCookie[] CookiesForURL (NSURL URL);

		// -(void)setCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies forURL:(NSURL * _Nullable)URL mainDocumentURL:(NSURL * _Nullable)mainDocumentURL;
		[Export ("setCookies:forURL:mainDocumentURL:")]
		void SetCookies (NSHTTPCookie[] cookies, [NullAllowed] NSURL URL, [NullAllowed] NSURL mainDocumentURL);

		// @property NSHTTPCookieAcceptPolicy cookieAcceptPolicy;
		[Export ("cookieAcceptPolicy", ArgumentSemantic.Assign)]
		NSHTTPCookieAcceptPolicy CookieAcceptPolicy { get; set; }

		// -(NSArray<NSHTTPCookie *> * _Nonnull)sortedCookiesUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortOrder __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("sortedCookiesUsingDescriptors:")]
		NSHTTPCookie[] SortedCookiesUsingDescriptors (NSSortDescriptor[] sortOrder);
	}

	// @interface NSURLSessionTaskAdditions (NSHTTPCookieStorage)
	[Category]
	[BaseType (typeof(NSHTTPCookieStorage))]
	interface NSHTTPCookieStorage_NSURLSessionTaskAdditions
	{
		// -(void)storeCookies:(NSArray<NSHTTPCookie *> * _Nonnull)cookies forTask:(NSURLSessionTask * _Nonnull)task __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("storeCookies:forTask:")]
		void StoreCookies (NSHTTPCookie[] cookies, NSURLSessionTask task);

		// -(void)getCookiesForTask:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSArray<NSHTTPCookie *> * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("getCookiesForTask:completionHandler:")]
		void GetCookiesForTask (NSURLSessionTask task, Action<NSArray<NSHTTPCookie>> completionHandler);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSHTTPCookieManagerAcceptPolicyChangedNotification __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieManagerAcceptPolicyChangedNotification", "__Internal")]
		NSString NSHTTPCookieManagerAcceptPolicyChangedNotification { get; }

		// extern const NSNotificationName _Nonnull NSHTTPCookieManagerCookiesChangedNotification __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSHTTPCookieManagerCookiesChangedNotification", "__Internal")]
		NSString NSHTTPCookieManagerCookiesChangedNotification { get; }
	}

	// @interface NSIndexPath : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSIndexPath : INSCopying, INSSecureCoding
	{
		// +(instancetype _Nonnull)indexPathWithIndex:(NSUInteger)index;
		[Static]
		[Export ("indexPathWithIndex:")]
		NSIndexPath IndexPathWithIndex (nuint index);

		// +(instancetype _Nonnull)indexPathWithIndexes:(const NSUInteger * _Nullable)indexes length:(NSUInteger)length;
		[Static]
		[Export ("indexPathWithIndexes:length:")]
		NSIndexPath IndexPathWithIndexes ([NullAllowed] nuint[] indexes, nuint length);

		// -(instancetype _Nonnull)initWithIndexes:(const NSUInteger * _Nullable)indexes length:(NSUInteger)length __attribute__((objc_designated_initializer));
		[Export ("initWithIndexes:length:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] nuint[] indexes, nuint length);

		// -(instancetype _Nonnull)initWithIndex:(NSUInteger)index;
		[Export ("initWithIndex:")]
		NativeHandle Constructor (nuint index);

		// -(NSIndexPath * _Nonnull)indexPathByAddingIndex:(NSUInteger)index;
		[Export ("indexPathByAddingIndex:")]
		NSIndexPath IndexPathByAddingIndex (nuint index);

		// -(NSIndexPath * _Nonnull)indexPathByRemovingLastIndex;
		[Export ("indexPathByRemovingLastIndex")]
		NSIndexPath IndexPathByRemovingLastIndex { get; }

		// -(NSUInteger)indexAtPosition:(NSUInteger)position;
		[Export ("indexAtPosition:")]
		nuint IndexAtPosition (nuint position);

		// @property (readonly) NSUInteger length;
		[Export ("length")]
		nuint Length { get; }

		// -(void)getIndexes:(NSUInteger * _Nonnull)indexes range:(NSRange)positionRange __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("getIndexes:range:")]
		unsafe void GetIndexes (nuint* indexes, NSRange positionRange);

		// -(NSComparisonResult)compare:(NSIndexPath * _Nonnull)otherObject;
		[Export ("compare:")]
		NSComparisonResult Compare (NSIndexPath otherObject);
	}

	// @interface NSDeprecated (NSIndexPath)
	[Category]
	[BaseType (typeof(NSIndexPath))]
	interface NSIndexPath_NSDeprecated
	{
		// -(void)getIndexes:(NSUInteger * _Nonnull)indexes __attribute__((availability(macos, introduced=10.0, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 0)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("getIndexes:")]
		unsafe void GetIndexes (nuint* indexes);
	}

	// @interface NSInflectionRule : NSObject <NSCopying, NSSecureCoding>
	[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface NSInflectionRule : INSCopying, INSSecureCoding
	{
		// @property (readonly, class) NSInflectionRule * _Nonnull automaticRule;
		[Static]
		[Export ("automaticRule")]
		NSInflectionRule AutomaticRule { get; }
	}

	// @interface NSInflectionRuleExplicit : NSInflectionRule
	[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
	[BaseType (typeof(NSInflectionRule))]
	interface NSInflectionRuleExplicit
	{
		// -(instancetype _Nonnull)initWithMorphology:(NSMorphology * _Nonnull)morphology __attribute__((objc_designated_initializer));
		[Export ("initWithMorphology:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSMorphology morphology);

		// @property (readonly, copy) NSMorphology * _Nonnull morphology;
		[Export ("morphology", ArgumentSemantic.Copy)]
		NSMorphology Morphology { get; }
	}

	// @interface NSInflectionAvailability (NSInflectionRule)
	[Category]
	[BaseType (typeof(NSInflectionRule))]
	interface NSInflectionRule_NSInflectionAvailability
	{
		// +(BOOL)canInflectLanguage:(NSString * _Nonnull)language __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Static]
		[Export ("canInflectLanguage:")]
		bool CanInflectLanguage (string language);

		// @property (readonly, class) BOOL canInflectPreferredLocalization __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Static]
		[Export ("canInflectPreferredLocalization")]
		bool CanInflectPreferredLocalization { get; }
	}

	// @interface NSInvocation : NSObject
	[Unavailable (PlatformName.Swift)]
	[BaseType (typeof(NSObject))]
	interface NSInvocation
	{
		// +(NSInvocation * _Nonnull)invocationWithMethodSignature:(NSMethodSignature * _Nonnull)sig;
		[Static]
		[Export ("invocationWithMethodSignature:")]
		NSInvocation InvocationWithMethodSignature (NSMethodSignature sig);

		// @property (readonly, retain) NSMethodSignature * _Nonnull methodSignature;
		[Export ("methodSignature", ArgumentSemantic.Retain)]
		NSMethodSignature MethodSignature { get; }

		// -(void)retainArguments;
		[Export ("retainArguments")]
		void RetainArguments ();

		// @property (readonly) BOOL argumentsRetained;
		[Export ("argumentsRetained")]
		bool ArgumentsRetained { get; }

		// @property (assign) id _Nullable target;
		[NullAllowed, Export ("target", ArgumentSemantic.Assign)]
		NSObject Target { get; set; }

		// @property SEL _Nonnull selector;
		[Export ("selector", ArgumentSemantic.Assign)]
		Selector Selector { get; set; }

		// -(void)getReturnValue:(void * _Nonnull)retLoc;
		[Export ("getReturnValue:")]
		unsafe void GetReturnValue (void* retLoc);

		// -(void)setReturnValue:(void * _Nonnull)retLoc;
		[Export ("setReturnValue:")]
		unsafe void SetReturnValue (void* retLoc);

		// -(void)getArgument:(void * _Nonnull)argumentLocation atIndex:(NSInteger)idx;
		[Export ("getArgument:atIndex:")]
		unsafe void GetArgument (void* argumentLocation, nint idx);

		// -(void)setArgument:(void * _Nonnull)argumentLocation atIndex:(NSInteger)idx;
		[Export ("setArgument:atIndex:")]
		unsafe void SetArgument (void* argumentLocation, nint idx);

		// -(void)invoke;
		[Export ("invoke")]
		void Invoke ();

		// -(void)invokeWithTarget:(id _Nonnull)target;
		[Export ("invokeWithTarget:")]
		void InvokeWithTarget (NSObject target);

		// -(void)invokeUsingIMP:(IMP _Nonnull)imp;
		[Export ("invokeUsingIMP:")]
		unsafe void InvokeUsingIMP (IMP* imp);
	}

	// @interface NSJSONSerialization : NSObject
	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSJSONSerialization
	{
		// +(BOOL)isValidJSONObject:(id _Nonnull)obj;
		[Static]
		[Export ("isValidJSONObject:")]
		bool IsValidJSONObject (NSObject obj);

		// +(NSData * _Nullable)dataWithJSONObject:(id _Nonnull)obj options:(NSJSONWritingOptions)opt error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("dataWithJSONObject:options:error:")]
		[return: NullAllowed]
		NSData DataWithJSONObject (NSObject obj, NSJSONWritingOptions opt, [NullAllowed] out NSError error);

		// +(id _Nullable)JSONObjectWithData:(NSData * _Nonnull)data options:(NSJSONReadingOptions)opt error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("JSONObjectWithData:options:error:")]
		[return: NullAllowed]
		NSObject JSONObjectWithData (NSData data, NSJSONReadingOptions opt, [NullAllowed] out NSError error);

		// +(NSInteger)writeJSONObject:(id _Nonnull)obj toStream:(NSOutputStream * _Nonnull)stream options:(NSJSONWritingOptions)opt error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("writeJSONObject:toStream:options:error:")]
		nint WriteJSONObject (NSObject obj, NSOutputStream stream, NSJSONWritingOptions opt, [NullAllowed] out NSError error);

		// +(id _Nullable)JSONObjectWithStream:(NSInputStream * _Nonnull)stream options:(NSJSONReadingOptions)opt error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("JSONObjectWithStream:options:error:")]
		[return: NullAllowed]
		NSObject JSONObjectWithStream (NSInputStream stream, NSJSONReadingOptions opt, [NullAllowed] out NSError error);
	}

	// audit-objc-generics: @interface NSOrderedSet<__covariant ObjectType> : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSOrderedSet : INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration
	{
		// @property (readonly) NSUInteger count;
		[Export ("count")]
		nuint Count { get; }

		// -(ObjectType _Nonnull)objectAtIndex:(NSUInteger)idx;
		[Export ("objectAtIndex:")]
		NSObject ObjectAtIndex (nuint idx);

		// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)object;
		[Export ("indexOfObject:")]
		nuint IndexOfObject (NSObject @object);

		// -(instancetype _Nonnull)initWithObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)cnt __attribute__((objc_designated_initializer));
		[Export ("initWithObjects:count:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] NSObject[] objects, nuint cnt);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSExtendedOrderedSet (NSOrderedSet)
	[Category]
	[BaseType (typeof(NSOrderedSet))]
	interface NSOrderedSet_NSExtendedOrderedSet
	{
		// -(void)getObjects:(ObjectType  _Nonnull * _Nullable)objects range:(NSRange)range __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("getObjects:range:")]
		void GetObjects ([NullAllowed] NSObject[] objects, NSRange range);

		// -(NSArray<ObjectType> * _Nonnull)objectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
		[Export ("objectsAtIndexes:")]
		NSObject[] ObjectsAtIndexes (NSIndexSet indexes);

		// @property (readonly, nonatomic) ObjectType _Nullable firstObject;
		[NullAllowed, Export ("firstObject")]
		NSObject FirstObject { get; }

		// @property (readonly, nonatomic) ObjectType _Nullable lastObject;
		[NullAllowed, Export ("lastObject")]
		NSObject LastObject { get; }

		// -(BOOL)isEqualToOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
		[Export ("isEqualToOrderedSet:")]
		bool IsEqualToOrderedSet (NSOrderedSet<NSObject> other);

		// -(BOOL)containsObject:(ObjectType _Nonnull)object;
		[Export ("containsObject:")]
		bool ContainsObject (NSObject @object);

		// -(BOOL)intersectsOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
		[Export ("intersectsOrderedSet:")]
		bool IntersectsOrderedSet (NSOrderedSet<NSObject> other);

		// -(BOOL)intersectsSet:(NSSet<ObjectType> * _Nonnull)set;
		[Export ("intersectsSet:")]
		bool IntersectsSet (NSSet<NSObject> set);

		// -(BOOL)isSubsetOfOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
		[Export ("isSubsetOfOrderedSet:")]
		bool IsSubsetOfOrderedSet (NSOrderedSet<NSObject> other);

		// -(BOOL)isSubsetOfSet:(NSSet<ObjectType> * _Nonnull)set;
		[Export ("isSubsetOfSet:")]
		bool IsSubsetOfSet (NSSet<NSObject> set);

		// -(ObjectType _Nonnull)objectAtIndexedSubscript:(NSUInteger)idx __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("objectAtIndexedSubscript:")]
		NSObject ObjectAtIndexedSubscript (nuint idx);

		// -(NSEnumerator<ObjectType> * _Nonnull)objectEnumerator;
		[Export ("objectEnumerator")]
		NSEnumerator<NSObject> ObjectEnumerator { get; }

		// -(NSEnumerator<ObjectType> * _Nonnull)reverseObjectEnumerator;
		[Export ("reverseObjectEnumerator")]
		NSEnumerator<NSObject> ReverseObjectEnumerator { get; }

		// @property (readonly, copy) NSOrderedSet<ObjectType> * _Nonnull reversedOrderedSet;
		[Export ("reversedOrderedSet", ArgumentSemantic.Copy)]
		NSOrderedSet<NSObject> ReversedOrderedSet { get; }

		// @property (readonly, strong) NSArray<ObjectType> * _Nonnull array;
		[Export ("array", ArgumentSemantic.Strong)]
		NSObject[] Array { get; }

		// @property (readonly, strong) NSSet<ObjectType> * _Nonnull set;
		[Export ("set", ArgumentSemantic.Strong)]
		NSSet<NSObject> Set { get; }

		// -(void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
		[Export ("enumerateObjectsUsingBlock:")]
		unsafe void EnumerateObjectsUsingBlock (Action<NSObject, nuint, bool*> block);

		// -(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
		[Export ("enumerateObjectsWithOptions:usingBlock:")]
		unsafe void EnumerateObjectsWithOptions (NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

		// -(void)enumerateObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))block;
		[Export ("enumerateObjectsAtIndexes:options:usingBlock:")]
		unsafe void EnumerateObjectsAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

		// -(NSUInteger)indexOfObjectPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
		[Export ("indexOfObjectPassingTest:")]
		unsafe nuint IndexOfObjectPassingTest (Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
		[Export ("indexOfObjectWithOptions:passingTest:")]
		unsafe nuint IndexOfObjectWithOptions (NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSUInteger)indexOfObjectAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
		[Export ("indexOfObjectAtIndexes:options:passingTest:")]
		unsafe nuint IndexOfObjectAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesOfObjectsPassingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
		[Export ("indexesOfObjectsPassingTest:")]
		unsafe NSIndexSet IndexesOfObjectsPassingTest (Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
		[Export ("indexesOfObjectsWithOptions:passingTest:")]
		unsafe NSIndexSet IndexesOfObjectsWithOptions (NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSIndexSet * _Nonnull)indexesOfObjectsAtIndexes:(NSIndexSet * _Nonnull)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, NSUInteger, BOOL * _Nonnull))predicate;
		[Export ("indexesOfObjectsAtIndexes:options:passingTest:")]
		unsafe NSIndexSet IndexesOfObjectsAtIndexes (NSIndexSet s, NSEnumerationOptions opts, Func<NSObject, nuint, bool*, bool> predicate);

		// -(NSUInteger)indexOfObject:(ObjectType _Nonnull)object inSortedRange:(NSRange)range options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator _Nonnull)cmp;
		[Export ("indexOfObject:inSortedRange:options:usingComparator:")]
		nuint IndexOfObject (NSObject @object, NSRange range, NSBinarySearchingOptions opts, NSComparator cmp);

		// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingComparator:(NSComparator _Nonnull)cmptr;
		[Export ("sortedArrayUsingComparator:")]
		NSObject[] SortedArrayUsingComparator (NSComparator cmptr);

		// -(NSArray<ObjectType> * _Nonnull)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
		[Export ("sortedArrayWithOptions:usingComparator:")]
		NSObject[] SortedArrayWithOptions (NSSortOptions opts, NSComparator cmptr);

		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale;
		[Export ("descriptionWithLocale:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale);

		// -(NSString * _Nonnull)descriptionWithLocale:(id _Nullable)locale indent:(NSUInteger)level;
		[Export ("descriptionWithLocale:indent:")]
		string DescriptionWithLocale ([NullAllowed] NSObject locale, nuint level);
	}

	// @interface NSOrderedSetCreation (NSOrderedSet)
	[Category]
	[BaseType (typeof(NSOrderedSet))]
	interface NSOrderedSet_NSOrderedSetCreation
	{
		// +(instancetype _Nonnull)orderedSet;
		[Static]
		[Export ("orderedSet")]
		NSOrderedSet OrderedSet ();

		// +(instancetype _Nonnull)orderedSetWithObject:(ObjectType _Nonnull)object;
		[Static]
		[Export ("orderedSetWithObject:")]
		NSOrderedSet OrderedSetWithObject (NSObject @object);

		// +(instancetype _Nonnull)orderedSetWithObjects:(ObjectType  _Nonnull const * _Nonnull)objects count:(NSUInteger)cnt;
		[Static]
		[Export ("orderedSetWithObjects:count:")]
		NSOrderedSet OrderedSetWithObjects (NSObject[] objects, nuint cnt);

		// +(instancetype _Nonnull)orderedSetWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
		[Static, Internal]
		[Export ("orderedSetWithObjects:", IsVariadic = true)]
		NSOrderedSet OrderedSetWithObjects (NSObject firstObj, IntPtr varArgs);

		// +(instancetype _Nonnull)orderedSetWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set;
		[Static]
		[Export ("orderedSetWithOrderedSet:")]
		NSOrderedSet OrderedSetWithOrderedSet (NSOrderedSet<NSObject> set);

		// +(instancetype _Nonnull)orderedSetWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
		[Static]
		[Export ("orderedSetWithOrderedSet:range:copyItems:")]
		NSOrderedSet OrderedSetWithOrderedSet (NSOrderedSet<NSObject> set, NSRange range, bool flag);

		// +(instancetype _Nonnull)orderedSetWithArray:(NSArray<ObjectType> * _Nonnull)array;
		[Static]
		[Export ("orderedSetWithArray:")]
		NSOrderedSet OrderedSetWithArray (NSObject[] array);

		// +(instancetype _Nonnull)orderedSetWithArray:(NSArray<ObjectType> * _Nonnull)array range:(NSRange)range copyItems:(BOOL)flag;
		[Static]
		[Export ("orderedSetWithArray:range:copyItems:")]
		NSOrderedSet OrderedSetWithArray (NSObject[] array, NSRange range, bool flag);

		// +(instancetype _Nonnull)orderedSetWithSet:(NSSet<ObjectType> * _Nonnull)set;
		[Static]
		[Export ("orderedSetWithSet:")]
		NSOrderedSet OrderedSetWithSet (NSSet<NSObject> set);

		// +(instancetype _Nonnull)orderedSetWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
		[Static]
		[Export ("orderedSetWithSet:copyItems:")]
		NSOrderedSet OrderedSetWithSet (NSSet<NSObject> set, bool flag);

		// -(instancetype _Nonnull)initWithObject:(ObjectType _Nonnull)object;
		[Export ("initWithObject:")]
		NativeHandle Constructor (NSObject @object);

		// -(instancetype _Nonnull)initWithObjects:(ObjectType _Nonnull)firstObj, ... __attribute__((sentinel(0, 1)));
		[Internal]
		[Export ("initWithObjects:", IsVariadic = true)]
		NativeHandle Constructor (NSObject firstObj, IntPtr varArgs);

		// -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set;
		[Export ("initWithOrderedSet:")]
		NativeHandle Constructor (NSOrderedSet<NSObject> set);

		// -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
		[Export ("initWithOrderedSet:copyItems:")]
		NativeHandle Constructor (NSOrderedSet<NSObject> set, bool flag);

		// -(instancetype _Nonnull)initWithOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
		[Export ("initWithOrderedSet:range:copyItems:")]
		NativeHandle Constructor (NSOrderedSet<NSObject> set, NSRange range, bool flag);

		// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)array;
		[Export ("initWithArray:")]
		NativeHandle Constructor (NSObject[] array);

		// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
		[Export ("initWithArray:copyItems:")]
		NativeHandle Constructor (NSObject[] set, bool flag);

		// -(instancetype _Nonnull)initWithArray:(NSArray<ObjectType> * _Nonnull)set range:(NSRange)range copyItems:(BOOL)flag;
		[Export ("initWithArray:range:copyItems:")]
		NativeHandle Constructor (NSObject[] set, NSRange range, bool flag);

		// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set;
		[Export ("initWithSet:")]
		NativeHandle Constructor (NSSet<NSObject> set);

		// -(instancetype _Nonnull)initWithSet:(NSSet<ObjectType> * _Nonnull)set copyItems:(BOOL)flag;
		[Export ("initWithSet:copyItems:")]
		NativeHandle Constructor (NSSet<NSObject> set, bool flag);
	}

	// @interface NSOrderedSetDiffing (NSOrderedSet)
	[Unavailable (PlatformName.Swift)]
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Category]
	[BaseType (typeof(NSOrderedSet))]
	interface NSOrderedSet_NSOrderedSetDiffing
	{
		// -(NSOrderedCollectionDifference<ObjectType> * _Nonnull)differenceFromOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other withOptions:(NSOrderedCollectionDifferenceCalculationOptions)options usingEquivalenceTest:(BOOL (^ _Nonnull)(ObjectType _Nonnull, ObjectType _Nonnull))block;
		[Export ("differenceFromOrderedSet:withOptions:usingEquivalenceTest:")]
		NSOrderedCollectionDifference<NSObject> DifferenceFromOrderedSet (NSOrderedSet<NSObject> other, NSOrderedCollectionDifferenceCalculationOptions options, Func<NSObject, NSObject, bool> block);

		// -(NSOrderedCollectionDifference<ObjectType> * _Nonnull)differenceFromOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other withOptions:(NSOrderedCollectionDifferenceCalculationOptions)options;
		[Export ("differenceFromOrderedSet:withOptions:")]
		NSOrderedCollectionDifference<NSObject> DifferenceFromOrderedSet (NSOrderedSet<NSObject> other, NSOrderedCollectionDifferenceCalculationOptions options);

		// -(NSOrderedCollectionDifference<ObjectType> * _Nonnull)differenceFromOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
		[Export ("differenceFromOrderedSet:")]
		NSOrderedCollectionDifference<NSObject> DifferenceFromOrderedSet (NSOrderedSet<NSObject> other);

		// -(NSOrderedSet<ObjectType> * _Nullable)orderedSetByApplyingDifference:(NSOrderedCollectionDifference<ObjectType> * _Nonnull)difference;
		[Export ("orderedSetByApplyingDifference:")]
		[return: NullAllowed]
		NSOrderedSet<NSObject> OrderedSetByApplyingDifference (NSOrderedCollectionDifference<NSObject> difference);
	}

	// audit-objc-generics: @interface NSMutableOrderedSet<ObjectType> : NSOrderedSet
	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	[BaseType (typeof(NSOrderedSet))]
	interface NSMutableOrderedSet
	{
		// -(void)insertObject:(ObjectType _Nonnull)object atIndex:(NSUInteger)idx;
		[Export ("insertObject:atIndex:")]
		void InsertObject (NSObject @object, nuint idx);

		// -(void)removeObjectAtIndex:(NSUInteger)idx;
		[Export ("removeObjectAtIndex:")]
		void RemoveObjectAtIndex (nuint idx);

		// -(void)replaceObjectAtIndex:(NSUInteger)idx withObject:(ObjectType _Nonnull)object;
		[Export ("replaceObjectAtIndex:withObject:")]
		void ReplaceObjectAtIndex (nuint idx, NSObject @object);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// -(instancetype _Nonnull)initWithCapacity:(NSUInteger)numItems __attribute__((objc_designated_initializer));
		[Export ("initWithCapacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nuint numItems);
	}

	// @interface NSExtendedMutableOrderedSet (NSMutableOrderedSet)
	[Category]
	[BaseType (typeof(NSMutableOrderedSet))]
	interface NSMutableOrderedSet_NSExtendedMutableOrderedSet
	{
		// -(void)addObject:(ObjectType _Nonnull)object;
		[Export ("addObject:")]
		void AddObject (NSObject @object);

		// -(void)addObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)count;
		[Export ("addObjects:count:")]
		void AddObjects ([NullAllowed] NSObject[] objects, nuint count);

		// -(void)addObjectsFromArray:(NSArray<ObjectType> * _Nonnull)array;
		[Export ("addObjectsFromArray:")]
		void AddObjectsFromArray (NSObject[] array);

		// -(void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2;
		[Export ("exchangeObjectAtIndex:withObjectAtIndex:")]
		void ExchangeObjectAtIndex (nuint idx1, nuint idx2);

		// -(void)moveObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes toIndex:(NSUInteger)idx;
		[Export ("moveObjectsAtIndexes:toIndex:")]
		void MoveObjectsAtIndexes (NSIndexSet indexes, nuint idx);

		// -(void)insertObjects:(NSArray<ObjectType> * _Nonnull)objects atIndexes:(NSIndexSet * _Nonnull)indexes;
		[Export ("insertObjects:atIndexes:")]
		void InsertObjects (NSObject[] objects, NSIndexSet indexes);

		// -(void)setObject:(ObjectType _Nonnull)obj atIndex:(NSUInteger)idx;
		[Export ("setObject:atIndex:")]
		void SetObject (NSObject obj, nuint idx);

		// -(void)setObject:(ObjectType _Nonnull)obj atIndexedSubscript:(NSUInteger)idx __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("setObject:atIndexedSubscript:")]
		void SetObject (NSObject obj, nuint idx);

		// -(void)replaceObjectsInRange:(NSRange)range withObjects:(ObjectType  _Nonnull const * _Nullable)objects count:(NSUInteger)count;
		[Export ("replaceObjectsInRange:withObjects:count:")]
		void ReplaceObjectsInRange (NSRange range, [NullAllowed] NSObject[] objects, nuint count);

		// -(void)replaceObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes withObjects:(NSArray<ObjectType> * _Nonnull)objects;
		[Export ("replaceObjectsAtIndexes:withObjects:")]
		void ReplaceObjectsAtIndexes (NSIndexSet indexes, NSObject[] objects);

		// -(void)removeObjectsInRange:(NSRange)range;
		[Export ("removeObjectsInRange:")]
		void RemoveObjectsInRange (NSRange range);

		// -(void)removeObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes;
		[Export ("removeObjectsAtIndexes:")]
		void RemoveObjectsAtIndexes (NSIndexSet indexes);

		// -(void)removeAllObjects;
		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		// -(void)removeObject:(ObjectType _Nonnull)object;
		[Export ("removeObject:")]
		void RemoveObject (NSObject @object);

		// -(void)removeObjectsInArray:(NSArray<ObjectType> * _Nonnull)array;
		[Export ("removeObjectsInArray:")]
		void RemoveObjectsInArray (NSObject[] array);

		// -(void)intersectOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
		[Export ("intersectOrderedSet:")]
		void IntersectOrderedSet (NSOrderedSet<NSObject> other);

		// -(void)minusOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
		[Export ("minusOrderedSet:")]
		void MinusOrderedSet (NSOrderedSet<NSObject> other);

		// -(void)unionOrderedSet:(NSOrderedSet<ObjectType> * _Nonnull)other;
		[Export ("unionOrderedSet:")]
		void UnionOrderedSet (NSOrderedSet<NSObject> other);

		// -(void)intersectSet:(NSSet<ObjectType> * _Nonnull)other;
		[Export ("intersectSet:")]
		void IntersectSet (NSSet<NSObject> other);

		// -(void)minusSet:(NSSet<ObjectType> * _Nonnull)other;
		[Export ("minusSet:")]
		void MinusSet (NSSet<NSObject> other);

		// -(void)unionSet:(NSSet<ObjectType> * _Nonnull)other;
		[Export ("unionSet:")]
		void UnionSet (NSSet<NSObject> other);

		// -(void)sortUsingComparator:(NSComparator _Nonnull)cmptr;
		[Export ("sortUsingComparator:")]
		void SortUsingComparator (NSComparator cmptr);

		// -(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
		[Export ("sortWithOptions:usingComparator:")]
		void SortWithOptions (NSSortOptions opts, NSComparator cmptr);

		// -(void)sortRange:(NSRange)range options:(NSSortOptions)opts usingComparator:(NSComparator _Nonnull)cmptr;
		[Export ("sortRange:options:usingComparator:")]
		void SortRange (NSRange range, NSSortOptions opts, NSComparator cmptr);
	}

	// @interface NSMutableOrderedSetCreation (NSMutableOrderedSet)
	[Category]
	[BaseType (typeof(NSMutableOrderedSet))]
	interface NSMutableOrderedSet_NSMutableOrderedSetCreation
	{
		// +(instancetype _Nonnull)orderedSetWithCapacity:(NSUInteger)numItems;
		[Static]
		[Export ("orderedSetWithCapacity:")]
		NSMutableOrderedSet OrderedSetWithCapacity (nuint numItems);
	}

	// @interface NSMutableOrderedSetDiffing (NSMutableOrderedSet)
	[Unavailable (PlatformName.Swift)]
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Category]
	[BaseType (typeof(NSMutableOrderedSet))]
	interface NSMutableOrderedSet_NSMutableOrderedSetDiffing
	{
		// -(void)applyDifference:(NSOrderedCollectionDifference<ObjectType> * _Nonnull)difference;
		[Export ("applyDifference:")]
		void ApplyDifference (NSOrderedCollectionDifference<NSObject> difference);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSExceptionName _Nonnull NSUndefinedKeyException;
		[Field ("NSUndefinedKeyException", "__Internal")]
		NSString NSUndefinedKeyException { get; }

		// extern const NSKeyValueOperator _Nonnull NSAverageKeyValueOperator;
		[Field ("NSAverageKeyValueOperator", "__Internal")]
		NSString NSAverageKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSCountKeyValueOperator;
		[Field ("NSCountKeyValueOperator", "__Internal")]
		NSString NSCountKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSDistinctUnionOfArraysKeyValueOperator;
		[Field ("NSDistinctUnionOfArraysKeyValueOperator", "__Internal")]
		NSString NSDistinctUnionOfArraysKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSDistinctUnionOfObjectsKeyValueOperator;
		[Field ("NSDistinctUnionOfObjectsKeyValueOperator", "__Internal")]
		NSString NSDistinctUnionOfObjectsKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSDistinctUnionOfSetsKeyValueOperator;
		[Field ("NSDistinctUnionOfSetsKeyValueOperator", "__Internal")]
		NSString NSDistinctUnionOfSetsKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSMaximumKeyValueOperator;
		[Field ("NSMaximumKeyValueOperator", "__Internal")]
		NSString NSMaximumKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSMinimumKeyValueOperator;
		[Field ("NSMinimumKeyValueOperator", "__Internal")]
		NSString NSMinimumKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSSumKeyValueOperator;
		[Field ("NSSumKeyValueOperator", "__Internal")]
		NSString NSSumKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSUnionOfArraysKeyValueOperator;
		[Field ("NSUnionOfArraysKeyValueOperator", "__Internal")]
		NSString NSUnionOfArraysKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSUnionOfObjectsKeyValueOperator;
		[Field ("NSUnionOfObjectsKeyValueOperator", "__Internal")]
		NSString NSUnionOfObjectsKeyValueOperator { get; }

		// extern const NSKeyValueOperator _Nonnull NSUnionOfSetsKeyValueOperator;
		[Field ("NSUnionOfSetsKeyValueOperator", "__Internal")]
		NSString NSUnionOfSetsKeyValueOperator { get; }
	}

	// @interface NSKeyValueCoding (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSKeyValueCoding
	{
		// @property (readonly, class) BOOL accessInstanceVariablesDirectly;
		[Static]
		[Export ("accessInstanceVariablesDirectly")]
		bool AccessInstanceVariablesDirectly { get; }

		// -(id _Nullable)valueForKey:(NSString * _Nonnull)key;
		[Export ("valueForKey:")]
		[return: NullAllowed]
		NSObject ValueForKey (string key);

		// -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
		[Export ("setValue:forKey:")]
		void SetValue ([NullAllowed] NSObject value, string key);

		// -(BOOL)validateValue:(id  _Nullable * _Nonnull)ioValue forKey:(NSString * _Nonnull)inKey error:(NSError * _Nullable * _Nullable)outError;
		[Export ("validateValue:forKey:error:")]
		bool ValidateValue ([NullAllowed] out NSObject ioValue, string inKey, [NullAllowed] out NSError outError);

		// -(NSMutableArray * _Nonnull)mutableArrayValueForKey:(NSString * _Nonnull)key;
		[Export ("mutableArrayValueForKey:")]
		NSMutableArray MutableArrayValueForKey (string key);

		// -(NSMutableOrderedSet * _Nonnull)mutableOrderedSetValueForKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("mutableOrderedSetValueForKey:")]
		NSMutableOrderedSet MutableOrderedSetValueForKey (string key);

		// -(NSMutableSet * _Nonnull)mutableSetValueForKey:(NSString * _Nonnull)key;
		[Export ("mutableSetValueForKey:")]
		NSMutableSet MutableSetValueForKey (string key);

		// -(id _Nullable)valueForKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("valueForKeyPath:")]
		[return: NullAllowed]
		NSObject ValueForKeyPath (string keyPath);

		// -(void)setValue:(id _Nullable)value forKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("setValue:forKeyPath:")]
		void SetValue ([NullAllowed] NSObject value, string keyPath);

		// -(BOOL)validateValue:(id  _Nullable * _Nonnull)ioValue forKeyPath:(NSString * _Nonnull)inKeyPath error:(NSError * _Nullable * _Nullable)outError;
		[Export ("validateValue:forKeyPath:error:")]
		bool ValidateValue ([NullAllowed] out NSObject ioValue, string inKeyPath, [NullAllowed] out NSError outError);

		// -(NSMutableArray * _Nonnull)mutableArrayValueForKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("mutableArrayValueForKeyPath:")]
		NSMutableArray MutableArrayValueForKeyPath (string keyPath);

		// -(NSMutableOrderedSet * _Nonnull)mutableOrderedSetValueForKeyPath:(NSString * _Nonnull)keyPath __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("mutableOrderedSetValueForKeyPath:")]
		NSMutableOrderedSet MutableOrderedSetValueForKeyPath (string keyPath);

		// -(NSMutableSet * _Nonnull)mutableSetValueForKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("mutableSetValueForKeyPath:")]
		NSMutableSet MutableSetValueForKeyPath (string keyPath);

		// -(id _Nullable)valueForUndefinedKey:(NSString * _Nonnull)key;
		[Export ("valueForUndefinedKey:")]
		[return: NullAllowed]
		NSObject ValueForUndefinedKey (string key);

		// -(void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
		[Export ("setValue:forUndefinedKey:")]
		void SetValue ([NullAllowed] NSObject value, string key);

		// -(void)setNilValueForKey:(NSString * _Nonnull)key;
		[Export ("setNilValueForKey:")]
		void SetNilValueForKey (string key);

		// -(NSDictionary<NSString *,id> * _Nonnull)dictionaryWithValuesForKeys:(NSArray<NSString *> * _Nonnull)keys;
		[Export ("dictionaryWithValuesForKeys:")]
		NSDictionary<NSString, NSObject> DictionaryWithValuesForKeys (string[] keys);

		// -(void)setValuesForKeysWithDictionary:(NSDictionary<NSString *,id> * _Nonnull)keyedValues;
		[Export ("setValuesForKeysWithDictionary:")]
		void SetValuesForKeysWithDictionary (NSDictionary<NSString, NSObject> keyedValues);
	}

	// @interface NSKeyValueCoding (NSArray)
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSKeyValueCoding
	{
		// -(id _Nonnull)valueForKey:(NSString * _Nonnull)key;
		[Export ("valueForKey:")]
		NSObject ValueForKey (string key);

		// -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
		[Export ("setValue:forKey:")]
		void SetValue ([NullAllowed] NSObject value, string key);
	}

	// @interface NSKeyValueCoding (NSDictionary)
	[Category]
	[BaseType (typeof(NSDictionary))]
	interface NSDictionary_NSKeyValueCoding
	{
		// -(ObjectType _Nullable)valueForKey:(NSString * _Nonnull)key;
		[Export ("valueForKey:")]
		[return: NullAllowed]
		NSObject ValueForKey (string key);
	}

	// @interface NSKeyValueCoding (NSMutableDictionary)
	[Category]
	[BaseType (typeof(NSMutableDictionary))]
	interface NSMutableDictionary_NSKeyValueCoding
	{
		// -(void)setValue:(ObjectType _Nullable)value forKey:(NSString * _Nonnull)key;
		[Export ("setValue:forKey:")]
		void SetValue ([NullAllowed] NSObject value, string key);
	}

	// @interface NSKeyValueCoding (NSOrderedSet)
	[Category]
	[BaseType (typeof(NSOrderedSet))]
	interface NSOrderedSet_NSKeyValueCoding
	{
		// -(id _Nonnull)valueForKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("valueForKey:")]
		NSObject ValueForKey (string key);

		// -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("setValue:forKey:")]
		void SetValue ([NullAllowed] NSObject value, string key);
	}

	// @interface NSKeyValueCoding (NSSet)
	[Category]
	[BaseType (typeof(NSSet))]
	interface NSSet_NSKeyValueCoding
	{
		// -(id _Nonnull)valueForKey:(NSString * _Nonnull)key;
		[Export ("valueForKey:")]
		NSObject ValueForKey (string key);

		// -(void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
		[Export ("setValue:forKey:")]
		void SetValue ([NullAllowed] NSObject value, string key);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeKindKey;
		[Field ("NSKeyValueChangeKindKey", "__Internal")]
		NSString NSKeyValueChangeKindKey { get; }

		// extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeNewKey;
		[Field ("NSKeyValueChangeNewKey", "__Internal")]
		NSString NSKeyValueChangeNewKey { get; }

		// extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeOldKey;
		[Field ("NSKeyValueChangeOldKey", "__Internal")]
		NSString NSKeyValueChangeOldKey { get; }

		// extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeIndexesKey;
		[Field ("NSKeyValueChangeIndexesKey", "__Internal")]
		NSString NSKeyValueChangeIndexesKey { get; }

		// extern const NSKeyValueChangeKey _Nonnull NSKeyValueChangeNotificationIsPriorKey __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSKeyValueChangeNotificationIsPriorKey", "__Internal")]
		NSString NSKeyValueChangeNotificationIsPriorKey { get; }
	}

	// @interface NSKeyValueObserving (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSKeyValueObserving
	{
		// -(void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey,id> * _Nullable)change context:(void * _Nullable)context;
		[Export ("observeValueForKeyPath:ofObject:change:context:")]
		unsafe void ObserveValueForKeyPath ([NullAllowed] string keyPath, [NullAllowed] NSObject @object, [NullAllowed] NSDictionary<NSString, NSObject> change, [NullAllowed] void* context);
	}

	// @interface NSKeyValueObserverRegistration (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSKeyValueObserverRegistration
	{
		// -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
		[Export ("addObserver:forKeyPath:options:context:")]
		unsafe void AddObserver (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("removeObserver:forKeyPath:context:")]
		unsafe void RemoveObserver (NSObject observer, string keyPath, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("removeObserver:forKeyPath:")]
		void RemoveObserver (NSObject observer, string keyPath);
	}

	// @interface NSKeyValueObserverRegistration (NSArray)
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSKeyValueObserverRegistration
	{
		// -(void)addObserver:(NSObject * _Nonnull)observer toObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
		[Export ("addObserver:toObjectsAtIndexes:forKeyPath:options:context:")]
		unsafe void AddObserver (NSObject observer, NSIndexSet indexes, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer fromObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("removeObserver:fromObjectsAtIndexes:forKeyPath:context:")]
		unsafe void RemoveObserver (NSObject observer, NSIndexSet indexes, string keyPath, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer fromObjectsAtIndexes:(NSIndexSet * _Nonnull)indexes forKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("removeObserver:fromObjectsAtIndexes:forKeyPath:")]
		void RemoveObserver (NSObject observer, NSIndexSet indexes, string keyPath);

		// -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
		[Export ("addObserver:forKeyPath:options:context:")]
		unsafe void AddObserver (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("removeObserver:forKeyPath:context:")]
		unsafe void RemoveObserver (NSObject observer, string keyPath, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("removeObserver:forKeyPath:")]
		void RemoveObserver (NSObject observer, string keyPath);
	}

	// @interface NSKeyValueObserverRegistration (NSOrderedSet)
	[Category]
	[BaseType (typeof(NSOrderedSet))]
	interface NSOrderedSet_NSKeyValueObserverRegistration
	{
		// -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
		[Export ("addObserver:forKeyPath:options:context:")]
		unsafe void AddObserver (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("removeObserver:forKeyPath:context:")]
		unsafe void RemoveObserver (NSObject observer, string keyPath, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("removeObserver:forKeyPath:")]
		void RemoveObserver (NSObject observer, string keyPath);
	}

	// @interface NSKeyValueObserverRegistration (NSSet)
	[Category]
	[BaseType (typeof(NSSet))]
	interface NSSet_NSKeyValueObserverRegistration
	{
		// -(void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
		[Export ("addObserver:forKeyPath:options:context:")]
		unsafe void AddObserver (NSObject observer, string keyPath, NSKeyValueObservingOptions options, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("removeObserver:forKeyPath:context:")]
		unsafe void RemoveObserver (NSObject observer, string keyPath, [NullAllowed] void* context);

		// -(void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
		[Export ("removeObserver:forKeyPath:")]
		void RemoveObserver (NSObject observer, string keyPath);
	}

	// @interface NSKeyValueObserverNotification (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSKeyValueObserverNotification
	{
		// -(void)willChangeValueForKey:(NSString * _Nonnull)key __attribute__((swift_attr("@_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")")));
		[Export ("willChangeValueForKey:")]
		void WillChangeValueForKey (string key);

		// -(void)didChangeValueForKey:(NSString * _Nonnull)key __attribute__((swift_attr("@_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")")));
		[Export ("didChangeValueForKey:")]
		void DidChangeValueForKey (string key);

		// -(void)willChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet * _Nonnull)indexes forKey:(NSString * _Nonnull)key __attribute__((swift_attr("@_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")")));
		[Export ("willChange:valuesAtIndexes:forKey:")]
		void WillChange (NSKeyValueChange changeKind, NSIndexSet indexes, string key);

		// -(void)didChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet * _Nonnull)indexes forKey:(NSString * _Nonnull)key __attribute__((swift_attr("@_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")")));
		[Export ("didChange:valuesAtIndexes:forKey:")]
		void DidChange (NSKeyValueChange changeKind, NSIndexSet indexes, string key);

		// -(void)willChangeValueForKey:(NSString * _Nonnull)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet * _Nonnull)objects __attribute__((swift_attr("@_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")")));
		[Export ("willChangeValueForKey:withSetMutation:usingObjects:")]
		void WillChangeValueForKey (string key, NSKeyValueSetMutationKind mutationKind, NSSet objects);

		// -(void)didChangeValueForKey:(NSString * _Nonnull)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet * _Nonnull)objects __attribute__((swift_attr("@_unavailableFromAsync(message: "Only notify of changes to a key in a synchronous context. Notifying changes across suspension points has undefined behavior.")")));
		[Export ("didChangeValueForKey:withSetMutation:usingObjects:")]
		void DidChangeValueForKey (string key, NSKeyValueSetMutationKind mutationKind, NSSet objects);
	}

	// @interface NSKeyValueObservingCustomization (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSKeyValueObservingCustomization
	{
		// +(NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingValueForKey:(NSString * _Nonnull)key __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Static]
		[Export ("keyPathsForValuesAffectingValueForKey:")]
		NSSet<NSString> KeyPathsForValuesAffectingValueForKey (string key);

		// +(BOOL)automaticallyNotifiesObserversForKey:(NSString * _Nonnull)key;
		[Static]
		[Export ("automaticallyNotifiesObserversForKey:")]
		bool AutomaticallyNotifiesObserversForKey (string key);

		// @property NS_RETURNS_INNER_POINTER void * observationInfo __attribute__((objc_returns_inner_pointer));
		[Export ("observationInfo", ArgumentSemantic.Assign)]
		unsafe void* ObservationInfo { get; set; }
	}

	// @interface NSPropertyListSerialization : NSObject
	[BaseType (typeof(NSObject))]
	interface NSPropertyListSerialization
	{
		// +(BOOL)propertyList:(id _Nonnull)plist isValidForFormat:(NSPropertyListFormat)format;
		[Static]
		[Export ("propertyList:isValidForFormat:")]
		bool PropertyList (NSObject plist, NSPropertyListFormat format);

		// +(NSData * _Nullable)dataWithPropertyList:(id _Nonnull)plist format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("dataWithPropertyList:format:options:error:")]
		[return: NullAllowed]
		NSData DataWithPropertyList (NSObject plist, NSPropertyListFormat format, nuint opt, [NullAllowed] out NSError error);

		// +(NSInteger)writePropertyList:(id _Nonnull)plist toStream:(NSOutputStream * _Nonnull)stream format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("writePropertyList:toStream:format:options:error:")]
		nint WritePropertyList (NSObject plist, NSOutputStream stream, NSPropertyListFormat format, nuint opt, [NullAllowed] out NSError error);

		// +(id _Nullable)propertyListWithData:(NSData * _Nonnull)data options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat * _Nullable)format error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("propertyListWithData:options:format:error:")]
		[return: NullAllowed]
		unsafe NSObject PropertyListWithData (NSData data, NSPropertyListReadOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out NSError error);

		// +(id _Nullable)propertyListWithStream:(NSInputStream * _Nonnull)stream options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat * _Nullable)format error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("propertyListWithStream:options:format:error:")]
		[return: NullAllowed]
		unsafe NSObject PropertyListWithStream (NSInputStream stream, NSPropertyListReadOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out NSError error);

		// +(NSData * _Nullable)dataFromPropertyList:(id _Nonnull)plist format:(NSPropertyListFormat)format errorDescription:(NSString * _Nullable * _Nullable)errorString __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use dataWithPropertyList:format:options:error: instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use dataWithPropertyList:format:options:error: instead.")]
		[Static]
		[Export ("dataFromPropertyList:format:errorDescription:")]
		[return: NullAllowed]
		NSData DataFromPropertyList (NSObject plist, NSPropertyListFormat format, [NullAllowed] out string errorString);

		// +(id _Nullable)propertyListFromData:(NSData * _Nonnull)data mutabilityOption:(NSPropertyListMutabilityOptions)opt format:(NSPropertyListFormat * _Nullable)format errorDescription:(NSString * _Nullable * _Nullable)errorString __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use propertyListWithData:options:format:error: instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use propertyListWithData:options:format:error: instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use propertyListWithData:options:format:error: instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use propertyListWithData:options:format:error: instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use propertyListWithData:options:format:error: instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use propertyListWithData:options:format:error: instead.")]
		[Static]
		[Export ("propertyListFromData:mutabilityOption:format:errorDescription:")]
		[return: NullAllowed]
		unsafe NSObject PropertyListFromData (NSData data, NSPropertyListMutabilityOptions opt, [NullAllowed] NSPropertyListFormat* format, [NullAllowed] out string errorString);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSExceptionName _Nonnull NSInvalidArchiveOperationException;
		[Field ("NSInvalidArchiveOperationException", "__Internal")]
		NSString NSInvalidArchiveOperationException { get; }

		// extern const NSExceptionName _Nonnull NSInvalidUnarchiveOperationException;
		[Field ("NSInvalidUnarchiveOperationException", "__Internal")]
		NSString NSInvalidUnarchiveOperationException { get; }

		// extern NSString *const _Nonnull NSKeyedArchiveRootObjectKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSKeyedArchiveRootObjectKey", "__Internal")]
		NSString NSKeyedArchiveRootObjectKey { get; }
	}

	// @interface NSKeyedArchiver : NSCoder
	[BaseType (typeof(NSCoder))]
	interface NSKeyedArchiver
	{
		// -(instancetype _Nonnull)initRequiringSecureCoding:(BOOL)requiresSecureCoding __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("initRequiringSecureCoding:")]
		NativeHandle Constructor (bool requiresSecureCoding);

		// +(NSData * _Nullable)archivedDataWithRootObject:(id _Nonnull)object requiringSecureCoding:(BOOL)requiresSecureCoding error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Static]
		[Export ("archivedDataWithRootObject:requiringSecureCoding:error:")]
		[return: NullAllowed]
		NSData ArchivedDataWithRootObject (NSObject @object, bool requiresSecureCoding, [NullAllowed] out NSError error);

		// -(instancetype _Nonnull)initForWritingWithMutableData:(NSMutableData * _Nonnull)data __attribute__((availability(macos, introduced=10.2, deprecated=10.14))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use -initRequiringSecureCoding: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use -initRequiringSecureCoding: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -initRequiringSecureCoding: instead")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use -initRequiringSecureCoding: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initRequiringSecureCoding: instead")]
		[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use -initRequiringSecureCoding: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initRequiringSecureCoding: instead")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Use -initRequiringSecureCoding: instead")]
		[Export ("initForWritingWithMutableData:")]
		NativeHandle Constructor (NSMutableData data);

		// +(NSData * _Nonnull)archivedDataWithRootObject:(id _Nonnull)rootObject __attribute__((availability(macos, introduced=10.2, deprecated=10.14))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
		[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")]
		[Static]
		[Export ("archivedDataWithRootObject:")]
		NSData ArchivedDataWithRootObject (NSObject rootObject);

		// +(BOOL)archiveRootObject:(id _Nonnull)rootObject toFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.2, deprecated=10.14))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")]
		[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")]
		[Static]
		[Export ("archiveRootObject:toFile:")]
		bool ArchiveRootObject (NSObject rootObject, string path);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSKeyedArchiverDelegate Delegate { get; set; }

		// @property (assign) id<NSKeyedArchiverDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// @property NSPropertyListFormat outputFormat;
		[Export ("outputFormat", ArgumentSemantic.Assign)]
		NSPropertyListFormat OutputFormat { get; set; }

		// @property (readonly, strong) NSData * _Nonnull encodedData __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Export ("encodedData", ArgumentSemantic.Strong)]
		NSData EncodedData { get; }

		// -(void)finishEncoding;
		[Export ("finishEncoding")]
		void FinishEncoding ();

		// +(void)setClassName:(NSString * _Nullable)codedName forClass:(Class _Nonnull)cls;
		[Static]
		[Export ("setClassName:forClass:")]
		void SetClassName ([NullAllowed] string codedName, Class cls);

		// -(void)setClassName:(NSString * _Nullable)codedName forClass:(Class _Nonnull)cls;
		[Export ("setClassName:forClass:")]
		void SetClassName ([NullAllowed] string codedName, Class cls);

		// +(NSString * _Nullable)classNameForClass:(Class _Nonnull)cls;
		[Static]
		[Export ("classNameForClass:")]
		[return: NullAllowed]
		string ClassNameForClass (Class cls);

		// -(NSString * _Nullable)classNameForClass:(Class _Nonnull)cls;
		[Export ("classNameForClass:")]
		[return: NullAllowed]
		string ClassNameForClass (Class cls);

		// -(void)encodeObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
		[Export ("encodeObject:forKey:")]
		void EncodeObject ([NullAllowed] NSObject @object, string key);

		// -(void)encodeConditionalObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
		[Export ("encodeConditionalObject:forKey:")]
		void EncodeConditionalObject ([NullAllowed] NSObject @object, string key);

		// -(void)encodeBool:(BOOL)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeBool:forKey:")]
		void EncodeBool (bool value, string key);

		// -(void)encodeInt:(int)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeInt:forKey:")]
		void EncodeInt (int value, string key);

		// -(void)encodeInt32:(int32_t)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeInt32:forKey:")]
		void EncodeInt32 (int value, string key);

		// -(void)encodeInt64:(int64_t)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeInt64:forKey:")]
		void EncodeInt64 (long value, string key);

		// -(void)encodeFloat:(float)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeFloat:forKey:")]
		void EncodeFloat (float value, string key);

		// -(void)encodeDouble:(double)value forKey:(NSString * _Nonnull)key;
		[Export ("encodeDouble:forKey:")]
		void EncodeDouble (double value, string key);

		// -(void)encodeBytes:(const uint8_t * _Nullable)bytes length:(NSUInteger)length forKey:(NSString * _Nonnull)key;
		[Export ("encodeBytes:length:forKey:")]
		unsafe void EncodeBytes ([NullAllowed] byte* bytes, nuint length, string key);

		// @property (readwrite) BOOL requiresSecureCoding __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Export ("requiresSecureCoding")]
		bool RequiresSecureCoding { get; set; }
	}

	// @interface NSKeyedUnarchiver : NSCoder
	[BaseType (typeof(NSCoder))]
	interface NSKeyedUnarchiver
	{
		// -(instancetype _Nullable)initForReadingFromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("initForReadingFromData:error:")]
		NativeHandle Constructor (NSData data, [NullAllowed] out NSError error);

		// +(id _Nullable)unarchivedObjectOfClass:(Class _Nonnull)cls fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((swift_private));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Static]
		[Export ("unarchivedObjectOfClass:fromData:error:")]
		[return: NullAllowed]
		NSObject UnarchivedObjectOfClass (Class cls, NSData data, [NullAllowed] out NSError error);

		// +(NSArray * _Nullable)unarchivedArrayOfObjectsOfClass:(Class _Nonnull)cls fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0))) __attribute__((swift_private));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Static]
		[Export ("unarchivedArrayOfObjectsOfClass:fromData:error:")]
		[return: NullAllowed]
		NSObject[] UnarchivedArrayOfObjectsOfClass (Class cls, NSData data, [NullAllowed] out NSError error);

		// +(NSDictionary * _Nullable)unarchivedDictionaryWithKeysOfClass:(Class _Nonnull)keyCls objectsOfClass:(Class _Nonnull)valueCls fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0))) __attribute__((swift_private));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Static]
		[Export ("unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:")]
		[return: NullAllowed]
		NSDictionary UnarchivedDictionaryWithKeysOfClass (Class keyCls, Class valueCls, NSData data, [NullAllowed] out NSError error);

		// +(id _Nullable)unarchivedObjectOfClasses:(NSSet<Class> * _Nonnull)classes fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Static]
		[Export ("unarchivedObjectOfClasses:fromData:error:")]
		[return: NullAllowed]
		NSObject UnarchivedObjectOfClasses (NSSet<Class> classes, NSData data, [NullAllowed] out NSError error);

		// +(NSArray * _Nullable)unarchivedArrayOfObjectsOfClasses:(NSSet<Class> * _Nonnull)classes fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0))) __attribute__((swift_private));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Static]
		[Export ("unarchivedArrayOfObjectsOfClasses:fromData:error:")]
		[return: NullAllowed]
		NSObject[] UnarchivedArrayOfObjectsOfClasses (NSSet<Class> classes, NSData data, [NullAllowed] out NSError error);

		// +(NSDictionary * _Nullable)unarchivedDictionaryWithKeysOfClasses:(NSSet<Class> * _Nonnull)keyClasses objectsOfClasses:(NSSet<Class> * _Nonnull)valueClasses fromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0))) __attribute__((swift_private));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Static]
		[Export ("unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:")]
		[return: NullAllowed]
		NSDictionary UnarchivedDictionaryWithKeysOfClasses (NSSet<Class> keyClasses, NSSet<Class> valueClasses, NSData data, [NullAllowed] out NSError error);

		// -(instancetype _Nonnull)initForReadingWithData:(NSData * _Nonnull)data __attribute__((availability(macos, introduced=10.2, deprecated=10.14))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use -initForReadingFromData:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use -initForReadingFromData:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -initForReadingFromData:error: instead")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use -initForReadingFromData:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -initForReadingFromData:error: instead")]
		[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use -initForReadingFromData:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -initForReadingFromData:error: instead")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Use -initForReadingFromData:error: instead")]
		[Export ("initForReadingWithData:")]
		NativeHandle Constructor (NSData data);

		// +(id _Nullable)unarchiveObjectWithData:(NSData * _Nonnull)data __attribute__((availability(macos, introduced=10.2, deprecated=10.14))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Static]
		[Export ("unarchiveObjectWithData:")]
		[return: NullAllowed]
		NSObject UnarchiveObjectWithData (NSData data);

		// +(id _Nullable)unarchiveTopLevelObjectWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.11, deprecated=10.14))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(swift, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 11, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Unavailable (PlatformName.Swift)]
		[Static]
		[Export ("unarchiveTopLevelObjectWithData:error:")]
		[return: NullAllowed]
		NSObject UnarchiveTopLevelObjectWithData (NSData data, [NullAllowed] out NSError error);

		// +(id _Nullable)unarchiveObjectWithFile:(NSString * _Nonnull)path __attribute__((availability(macos, introduced=10.2, deprecated=10.14))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.WatchOS, 5, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")]
		[Static]
		[Export ("unarchiveObjectWithFile:")]
		[return: NullAllowed]
		NSObject UnarchiveObjectWithFile (string path);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSKeyedUnarchiverDelegate Delegate { get; set; }

		// @property (assign) id<NSKeyedUnarchiverDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// -(void)finishDecoding;
		[Export ("finishDecoding")]
		void FinishDecoding ();

		// +(void)setClass:(Class _Nullable)cls forClassName:(NSString * _Nonnull)codedName;
		[Static]
		[Export ("setClass:forClassName:")]
		void SetClass ([NullAllowed] Class cls, string codedName);

		// -(void)setClass:(Class _Nullable)cls forClassName:(NSString * _Nonnull)codedName;
		[Export ("setClass:forClassName:")]
		void SetClass ([NullAllowed] Class cls, string codedName);

		// +(Class _Nullable)classForClassName:(NSString * _Nonnull)codedName;
		[Static]
		[Export ("classForClassName:")]
		[return: NullAllowed]
		Class ClassForClassName (string codedName);

		// -(Class _Nullable)classForClassName:(NSString * _Nonnull)codedName;
		[Export ("classForClassName:")]
		[return: NullAllowed]
		Class ClassForClassName (string codedName);

		// -(BOOL)containsValueForKey:(NSString * _Nonnull)key;
		[Export ("containsValueForKey:")]
		bool ContainsValueForKey (string key);

		// -(id _Nullable)decodeObjectForKey:(NSString * _Nonnull)key;
		[Export ("decodeObjectForKey:")]
		[return: NullAllowed]
		NSObject DecodeObjectForKey (string key);

		// -(BOOL)decodeBoolForKey:(NSString * _Nonnull)key;
		[Export ("decodeBoolForKey:")]
		bool DecodeBoolForKey (string key);

		// -(int)decodeIntForKey:(NSString * _Nonnull)key;
		[Export ("decodeIntForKey:")]
		int DecodeIntForKey (string key);

		// -(int32_t)decodeInt32ForKey:(NSString * _Nonnull)key;
		[Export ("decodeInt32ForKey:")]
		int DecodeInt32ForKey (string key);

		// -(int64_t)decodeInt64ForKey:(NSString * _Nonnull)key;
		[Export ("decodeInt64ForKey:")]
		long DecodeInt64ForKey (string key);

		// -(float)decodeFloatForKey:(NSString * _Nonnull)key;
		[Export ("decodeFloatForKey:")]
		float DecodeFloatForKey (string key);

		// -(double)decodeDoubleForKey:(NSString * _Nonnull)key;
		[Export ("decodeDoubleForKey:")]
		double DecodeDoubleForKey (string key);

		// -(const uint8_t * _Nullable)decodeBytesForKey:(NSString * _Nonnull)key returnedLength:(NSUInteger * _Nullable)lengthp __attribute__((objc_returns_inner_pointer));
		[Export ("decodeBytesForKey:returnedLength:")]
		[return: NullAllowed]
		unsafe byte* DecodeBytesForKey (string key, [NullAllowed] nuint* lengthp);

		// @property (readwrite) BOOL requiresSecureCoding __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Export ("requiresSecureCoding")]
		bool RequiresSecureCoding { get; set; }

		// @property (readwrite) NSDecodingFailurePolicy decodingFailurePolicy __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("decodingFailurePolicy", ArgumentSemantic.Assign)]
		NSDecodingFailurePolicy DecodingFailurePolicy { get; set; }
	}

	// @protocol NSKeyedArchiverDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSKeyedArchiverDelegate
	{
		// @optional -(id _Nullable)archiver:(NSKeyedArchiver * _Nonnull)archiver willEncodeObject:(id _Nonnull)object;
		[Export ("archiver:willEncodeObject:")]
		[return: NullAllowed]
		NSObject Archiver (NSKeyedArchiver archiver, NSObject @object);

		// @optional -(void)archiver:(NSKeyedArchiver * _Nonnull)archiver didEncodeObject:(id _Nullable)object;
		[Export ("archiver:didEncodeObject:")]
		void Archiver (NSKeyedArchiver archiver, [NullAllowed] NSObject @object);

		// @optional -(void)archiver:(NSKeyedArchiver * _Nonnull)archiver willReplaceObject:(id _Nullable)object withObject:(id _Nullable)newObject;
		[Export ("archiver:willReplaceObject:withObject:")]
		void Archiver (NSKeyedArchiver archiver, [NullAllowed] NSObject @object, [NullAllowed] NSObject newObject);

		// @optional -(void)archiverWillFinish:(NSKeyedArchiver * _Nonnull)archiver;
		[Export ("archiverWillFinish:")]
		void ArchiverWillFinish (NSKeyedArchiver archiver);

		// @optional -(void)archiverDidFinish:(NSKeyedArchiver * _Nonnull)archiver;
		[Export ("archiverDidFinish:")]
		void ArchiverDidFinish (NSKeyedArchiver archiver);
	}

	// @protocol NSKeyedUnarchiverDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSKeyedUnarchiverDelegate
	{
		// @optional -(Class _Nullable)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver cannotDecodeObjectOfClassName:(NSString * _Nonnull)name originalClasses:(NSArray<NSString *> * _Nonnull)classNames;
		[Export ("unarchiver:cannotDecodeObjectOfClassName:originalClasses:")]
		[return: NullAllowed]
		Class Unarchiver (NSKeyedUnarchiver unarchiver, string name, string[] classNames);

		// @optional -(id _Nullable)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver didDecodeObject:(id _Nullable)object __attribute__((ns_returns_retained));
		[Export ("unarchiver:didDecodeObject:")]
		[return: NullAllowed]
		NSObject Unarchiver (NSKeyedUnarchiver unarchiver, [NullAllowed] NSObject @object);

		// @optional -(void)unarchiver:(NSKeyedUnarchiver * _Nonnull)unarchiver willReplaceObject:(id _Nonnull)object withObject:(id _Nonnull)newObject;
		[Export ("unarchiver:willReplaceObject:withObject:")]
		void Unarchiver (NSKeyedUnarchiver unarchiver, NSObject @object, NSObject newObject);

		// @optional -(void)unarchiverWillFinish:(NSKeyedUnarchiver * _Nonnull)unarchiver;
		[Export ("unarchiverWillFinish:")]
		void UnarchiverWillFinish (NSKeyedUnarchiver unarchiver);

		// @optional -(void)unarchiverDidFinish:(NSKeyedUnarchiver * _Nonnull)unarchiver;
		[Export ("unarchiverDidFinish:")]
		void UnarchiverDidFinish (NSKeyedUnarchiver unarchiver);
	}

	// @interface NSKeyedArchiverObjectSubstitution (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSKeyedArchiverObjectSubstitution
	{
		// @property (readonly) Class _Nullable classForKeyedArchiver;
		[NullAllowed, Export ("classForKeyedArchiver")]
		Class ClassForKeyedArchiver { get; }

		// -(id _Nullable)replacementObjectForKeyedArchiver:(NSKeyedArchiver * _Nonnull)archiver;
		[Export ("replacementObjectForKeyedArchiver:")]
		[return: NullAllowed]
		NSObject ReplacementObjectForKeyedArchiver (NSKeyedArchiver archiver);

		// +(NSArray<NSString *> * _Nonnull)classFallbacksForKeyedArchiver;
		[Static]
		[Export ("classFallbacksForKeyedArchiver")]
		string[] ClassFallbacksForKeyedArchiver { get; }
	}

	// @interface NSKeyedUnarchiverObjectSubstitution (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSKeyedUnarchiverObjectSubstitution
	{
		// +(Class _Nonnull)classForKeyedUnarchiver;
		[Static]
		[Export ("classForKeyedUnarchiver")]
		Class ClassForKeyedUnarchiver { get; }
	}

	// @protocol NSLocking
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSLocking
	{
		// @required -(void)lock __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Abstract]
		[Export ("lock")]
		void Lock ();

		// @required -(void)unlock __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Abstract]
		[Export ("unlock")]
		void Unlock ();
	}

	// @interface NSLock : NSObject <NSLocking>
	[BaseType (typeof(NSObject))]
	interface NSLock : INSLocking
	{
		// -(BOOL)tryLock __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("tryLock")]
		bool TryLock { get; }

		// -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("lockBeforeDate:")]
		bool LockBeforeDate (NSDate limit);

		// @property (copy) NSString * _Nullable name __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("name")]
		string Name { get; set; }
	}

	// @interface NSConditionLock : NSObject <NSLocking>
	[BaseType (typeof(NSObject))]
	interface NSConditionLock : INSLocking
	{
		// -(instancetype _Nonnull)initWithCondition:(NSInteger)condition __attribute__((objc_designated_initializer));
		[Export ("initWithCondition:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nint condition);

		// @property (readonly) NSInteger condition;
		[Export ("condition")]
		nint Condition { get; }

		// -(void)lockWhenCondition:(NSInteger)condition __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("lockWhenCondition:")]
		void LockWhenCondition (nint condition);

		// -(BOOL)tryLock __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("tryLock")]
		bool TryLock { get; }

		// -(BOOL)tryLockWhenCondition:(NSInteger)condition __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("tryLockWhenCondition:")]
		bool TryLockWhenCondition (nint condition);

		// -(void)unlockWithCondition:(NSInteger)condition __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("unlockWithCondition:")]
		void UnlockWithCondition (nint condition);

		// -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("lockBeforeDate:")]
		bool LockBeforeDate (NSDate limit);

		// -(BOOL)lockWhenCondition:(NSInteger)condition beforeDate:(NSDate * _Nonnull)limit __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("lockWhenCondition:beforeDate:")]
		bool LockWhenCondition (nint condition, NSDate limit);

		// @property (copy) NSString * _Nullable name __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("name")]
		string Name { get; set; }
	}

	// @interface NSRecursiveLock : NSObject <NSLocking>
	[BaseType (typeof(NSObject))]
	interface NSRecursiveLock : INSLocking
	{
		// -(BOOL)tryLock __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("tryLock")]
		bool TryLock { get; }

		// -(BOOL)lockBeforeDate:(NSDate * _Nonnull)limit __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("lockBeforeDate:")]
		bool LockBeforeDate (NSDate limit);

		// @property (copy) NSString * _Nullable name __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("name")]
		string Name { get; set; }
	}

	// @interface NSCondition : NSObject <NSLocking>
	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSCondition : INSLocking
	{
		// -(void)wait __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("wait")]
		void Wait ();

		// -(BOOL)waitUntilDate:(NSDate * _Nonnull)limit __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("waitUntilDate:")]
		bool WaitUntilDate (NSDate limit);

		// -(void)signal __attribute__((swift_attr("@_unavailableFromAsync(message: "Use async-safe scoped locking instead")")));
		[Export ("signal")]
		void Signal ();

		// -(void)broadcast;
		[Export ("broadcast")]
		void Broadcast ();

		// @property (copy) NSString * _Nullable name __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("name")]
		string Name { get; set; }
	}

	// audit-objc-generics: @interface NSMapTable<KeyType, ObjectType> : NSObject <NSCopying, NSSecureCoding, NSFastEnumeration>
	[Watch (2,0), TV (9,0), Mac (10,5), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSMapTable : INSCopying, INSSecureCoding, INSFastEnumeration
	{
		// -(instancetype _Nonnull)initWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
		[Export ("initWithKeyOptions:valueOptions:capacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSPointerFunctionsOptions keyOptions, NSPointerFunctionsOptions valueOptions, nuint initialCapacity);

		// -(instancetype _Nonnull)initWithKeyPointerFunctions:(NSPointerFunctions * _Nonnull)keyFunctions valuePointerFunctions:(NSPointerFunctions * _Nonnull)valueFunctions capacity:(NSUInteger)initialCapacity __attribute__((objc_designated_initializer));
		[Export ("initWithKeyPointerFunctions:valuePointerFunctions:capacity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSPointerFunctions keyFunctions, NSPointerFunctions valueFunctions, nuint initialCapacity);

		// +(NSMapTable<KeyType,ObjectType> * _Nonnull)mapTableWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions;
		[Static]
		[Export ("mapTableWithKeyOptions:valueOptions:")]
		NSMapTable<NSObject, NSObject> MapTableWithKeyOptions (NSPointerFunctionsOptions keyOptions, NSPointerFunctionsOptions valueOptions);

		// +(id _Nonnull)mapTableWithStrongToStrongObjects __attribute__((availability(macos, introduced=10.5, deprecated=10.8))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
		[NoWatch, NoTV, NoiOS]
		[Static]
		[Export ("mapTableWithStrongToStrongObjects")]
		NSObject MapTableWithStrongToStrongObjects { get; }

		// +(id _Nonnull)mapTableWithWeakToStrongObjects __attribute__((availability(macos, introduced=10.5, deprecated=10.8))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
		[NoWatch, NoTV, NoiOS]
		[Static]
		[Export ("mapTableWithWeakToStrongObjects")]
		NSObject MapTableWithWeakToStrongObjects { get; }

		// +(id _Nonnull)mapTableWithStrongToWeakObjects __attribute__((availability(macos, introduced=10.5, deprecated=10.8))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
		[NoWatch, NoTV, NoiOS]
		[Static]
		[Export ("mapTableWithStrongToWeakObjects")]
		NSObject MapTableWithStrongToWeakObjects { get; }

		// +(id _Nonnull)mapTableWithWeakToWeakObjects __attribute__((availability(macos, introduced=10.5, deprecated=10.8))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "GC no longer supported")]
		[Deprecated (PlatformName.MacOSX, 10, 8, message: "GC no longer supported")]
		[NoWatch, NoTV, NoiOS]
		[Static]
		[Export ("mapTableWithWeakToWeakObjects")]
		NSObject MapTableWithWeakToWeakObjects { get; }

		// +(NSMapTable<KeyType,ObjectType> * _Nonnull)strongToStrongObjectsMapTable __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Static]
		[Export ("strongToStrongObjectsMapTable")]
		NSMapTable<NSObject, NSObject> StrongToStrongObjectsMapTable { get; }

		// +(NSMapTable<KeyType,ObjectType> * _Nonnull)weakToStrongObjectsMapTable __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Static]
		[Export ("weakToStrongObjectsMapTable")]
		NSMapTable<NSObject, NSObject> WeakToStrongObjectsMapTable { get; }

		// +(NSMapTable<KeyType,ObjectType> * _Nonnull)strongToWeakObjectsMapTable __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Static]
		[Export ("strongToWeakObjectsMapTable")]
		NSMapTable<NSObject, NSObject> StrongToWeakObjectsMapTable { get; }

		// +(NSMapTable<KeyType,ObjectType> * _Nonnull)weakToWeakObjectsMapTable __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Static]
		[Export ("weakToWeakObjectsMapTable")]
		NSMapTable<NSObject, NSObject> WeakToWeakObjectsMapTable { get; }

		// @property (readonly, copy) NSPointerFunctions * _Nonnull keyPointerFunctions;
		[Export ("keyPointerFunctions", ArgumentSemantic.Copy)]
		NSPointerFunctions KeyPointerFunctions { get; }

		// @property (readonly, copy) NSPointerFunctions * _Nonnull valuePointerFunctions;
		[Export ("valuePointerFunctions", ArgumentSemantic.Copy)]
		NSPointerFunctions ValuePointerFunctions { get; }

		// -(ObjectType _Nullable)objectForKey:(KeyType _Nullable)aKey;
		[Export ("objectForKey:")]
		[return: NullAllowed]
		NSObject ObjectForKey ([NullAllowed] NSObject aKey);

		// -(void)removeObjectForKey:(KeyType _Nullable)aKey;
		[Export ("removeObjectForKey:")]
		void RemoveObjectForKey ([NullAllowed] NSObject aKey);

		// -(void)setObject:(ObjectType _Nullable)anObject forKey:(KeyType _Nullable)aKey;
		[Export ("setObject:forKey:")]
		void SetObject ([NullAllowed] NSObject anObject, [NullAllowed] NSObject aKey);

		// @property (readonly) NSUInteger count;
		[Export ("count")]
		nuint Count { get; }

		// -(NSEnumerator<KeyType> * _Nonnull)keyEnumerator;
		[Export ("keyEnumerator")]
		NSEnumerator<NSObject> KeyEnumerator { get; }

		// -(NSEnumerator<ObjectType> * _Nullable)objectEnumerator;
		[NullAllowed, Export ("objectEnumerator")]
		NSEnumerator<NSObject> ObjectEnumerator { get; }

		// -(void)removeAllObjects;
		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		// -(NSDictionary<KeyType,ObjectType> * _Nonnull)dictionaryRepresentation;
		[Export ("dictionaryRepresentation")]
		NSDictionary<NSObject, NSObject> DictionaryRepresentation { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSMapTableKeyCallBacks NSIntegerMapKeyCallBacks __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 5)]
		[Field ("NSIntegerMapKeyCallBacks", "__Internal")]
		NSMapTableKeyCallBacks NSIntegerMapKeyCallBacks { get; }

		// extern const NSMapTableKeyCallBacks NSNonOwnedPointerMapKeyCallBacks;
		[Field ("NSNonOwnedPointerMapKeyCallBacks", "__Internal")]
		NSMapTableKeyCallBacks NSNonOwnedPointerMapKeyCallBacks { get; }

		// extern const NSMapTableKeyCallBacks NSNonOwnedPointerOrNullMapKeyCallBacks;
		[Field ("NSNonOwnedPointerOrNullMapKeyCallBacks", "__Internal")]
		NSMapTableKeyCallBacks NSNonOwnedPointerOrNullMapKeyCallBacks { get; }

		// extern const NSMapTableKeyCallBacks NSNonRetainedObjectMapKeyCallBacks;
		[Field ("NSNonRetainedObjectMapKeyCallBacks", "__Internal")]
		NSMapTableKeyCallBacks NSNonRetainedObjectMapKeyCallBacks { get; }

		// extern const NSMapTableKeyCallBacks NSObjectMapKeyCallBacks;
		[Field ("NSObjectMapKeyCallBacks", "__Internal")]
		NSMapTableKeyCallBacks NSObjectMapKeyCallBacks { get; }

		// extern const NSMapTableKeyCallBacks NSOwnedPointerMapKeyCallBacks;
		[Field ("NSOwnedPointerMapKeyCallBacks", "__Internal")]
		NSMapTableKeyCallBacks NSOwnedPointerMapKeyCallBacks { get; }

		// extern const NSMapTableKeyCallBacks NSIntMapKeyCallBacks __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Not supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Field ("NSIntMapKeyCallBacks", "__Internal")]
		NSMapTableKeyCallBacks NSIntMapKeyCallBacks { get; }

		// extern const NSMapTableValueCallBacks NSIntegerMapValueCallBacks __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 5)]
		[Field ("NSIntegerMapValueCallBacks", "__Internal")]
		NSMapTableValueCallBacks NSIntegerMapValueCallBacks { get; }

		// extern const NSMapTableValueCallBacks NSNonOwnedPointerMapValueCallBacks;
		[Field ("NSNonOwnedPointerMapValueCallBacks", "__Internal")]
		NSMapTableValueCallBacks NSNonOwnedPointerMapValueCallBacks { get; }

		// extern const NSMapTableValueCallBacks NSObjectMapValueCallBacks;
		[Field ("NSObjectMapValueCallBacks", "__Internal")]
		NSMapTableValueCallBacks NSObjectMapValueCallBacks { get; }

		// extern const NSMapTableValueCallBacks NSNonRetainedObjectMapValueCallBacks;
		[Field ("NSNonRetainedObjectMapValueCallBacks", "__Internal")]
		NSMapTableValueCallBacks NSNonRetainedObjectMapValueCallBacks { get; }

		// extern const NSMapTableValueCallBacks NSOwnedPointerMapValueCallBacks;
		[Field ("NSOwnedPointerMapValueCallBacks", "__Internal")]
		NSMapTableValueCallBacks NSOwnedPointerMapValueCallBacks { get; }

		// extern const NSMapTableValueCallBacks NSIntMapValueCallBacks __attribute__((availability(macos, introduced=10.0, deprecated=10.5))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 5, message: "Not supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Field ("NSIntMapValueCallBacks", "__Internal")]
		NSMapTableValueCallBacks NSIntMapValueCallBacks { get; }
	}

	// @interface NSMethodSignature : NSObject
	[Unavailable (PlatformName.Swift)]
	[BaseType (typeof(NSObject))]
	interface NSMethodSignature
	{
		// +(NSMethodSignature * _Nullable)signatureWithObjCTypes:(const char * _Nonnull)types;
		[Static]
		[Export ("signatureWithObjCTypes:")]
		[return: NullAllowed]
		unsafe NSMethodSignature SignatureWithObjCTypes (sbyte* types);

		// @property (readonly) NSUInteger numberOfArguments;
		[Export ("numberOfArguments")]
		nuint NumberOfArguments { get; }

		// -(const char * _Nonnull)getArgumentTypeAtIndex:(NSUInteger)idx __attribute__((objc_returns_inner_pointer));
		[Export ("getArgumentTypeAtIndex:")]
		unsafe sbyte* GetArgumentTypeAtIndex (nuint idx);

		// @property (readonly) NSUInteger frameLength;
		[Export ("frameLength")]
		nuint FrameLength { get; }

		// -(BOOL)isOneway;
		[Export ("isOneway")]
		bool IsOneway { get; }

		// @property (readonly) NS_RETURNS_INNER_POINTER const char * methodReturnType __attribute__((objc_returns_inner_pointer));
		[Export ("methodReturnType")]
		unsafe sbyte* MethodReturnType { get; }

		// @property (readonly) NSUInteger methodReturnLength;
		[Export ("methodReturnLength")]
		nuint MethodReturnLength { get; }
	}

	// @interface NSMorphology : NSObject <NSCopying, NSSecureCoding>
	[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
	[BaseType (typeof(NSObject))]
	interface NSMorphology : INSCopying, INSSecureCoding
	{
		// @property (nonatomic) NSGrammaticalGender grammaticalGender;
		[Export ("grammaticalGender", ArgumentSemantic.Assign)]
		NSGrammaticalGender GrammaticalGender { get; set; }

		// @property (nonatomic) NSGrammaticalPartOfSpeech partOfSpeech;
		[Export ("partOfSpeech", ArgumentSemantic.Assign)]
		NSGrammaticalPartOfSpeech PartOfSpeech { get; set; }

		// @property (nonatomic) NSGrammaticalNumber number;
		[Export ("number", ArgumentSemantic.Assign)]
		NSGrammaticalNumber Number { get; set; }
	}

	// @interface NSCustomPronouns (NSMorphology)
	[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
	[Category]
	[BaseType (typeof(NSMorphology))]
	interface NSMorphology_NSCustomPronouns
	{
		// -(NSMorphologyCustomPronoun * _Nullable)customPronounForLanguage:(NSString * _Nonnull)language;
		[Export ("customPronounForLanguage:")]
		[return: NullAllowed]
		NSMorphologyCustomPronoun CustomPronounForLanguage (string language);

		// -(BOOL)setCustomPronoun:(NSMorphologyCustomPronoun * _Nullable)features forLanguage:(NSString * _Nonnull)language error:(NSError * _Nullable * _Nullable)error;
		[Export ("setCustomPronoun:forLanguage:error:")]
		bool SetCustomPronoun ([NullAllowed] NSMorphologyCustomPronoun features, string language, [NullAllowed] out NSError error);
	}

	// @interface NSMorphologyCustomPronoun : NSObject <NSCopying, NSSecureCoding>
	[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
	[BaseType (typeof(NSObject))]
	interface NSMorphologyCustomPronoun : INSCopying, INSSecureCoding
	{
		// +(BOOL)isSupportedForLanguage:(NSString * _Nonnull)language;
		[Static]
		[Export ("isSupportedForLanguage:")]
		bool IsSupportedForLanguage (string language);

		// +(NSArray<NSString *> * _Nonnull)requiredKeysForLanguage:(NSString * _Nonnull)language;
		[Static]
		[Export ("requiredKeysForLanguage:")]
		string[] RequiredKeysForLanguage (string language);

		// @property (copy, nonatomic) NSString * _Nullable subjectForm;
		[NullAllowed, Export ("subjectForm")]
		string SubjectForm { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable objectForm;
		[NullAllowed, Export ("objectForm")]
		string ObjectForm { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable possessiveForm;
		[NullAllowed, Export ("possessiveForm")]
		string PossessiveForm { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable possessiveAdjectiveForm;
		[NullAllowed, Export ("possessiveAdjectiveForm")]
		string PossessiveAdjectiveForm { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable reflexiveForm;
		[NullAllowed, Export ("reflexiveForm")]
		string ReflexiveForm { get; set; }
	}

	// @interface NSMorphologyUserSettings (NSMorphology)
	[Category]
	[BaseType (typeof(NSMorphology))]
	interface NSMorphology_NSMorphologyUserSettings
	{
		// @property (readonly, getter = isUnspecified) BOOL unspecified __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Export ("unspecified")]
		bool Unspecified { [Bind ("isUnspecified")] get; }

		// @property (readonly, class) NSMorphology * _Nonnull userMorphology __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Static]
		[Export ("userMorphology")]
		NSMorphology UserMorphology { get; }
	}

	// @interface NSNotificationQueue : NSObject
	[BaseType (typeof(NSObject))]
	interface NSNotificationQueue
	{
		// @property (readonly, strong, class) NSNotificationQueue * _Nonnull defaultQueue;
		[Static]
		[Export ("defaultQueue", ArgumentSemantic.Strong)]
		NSNotificationQueue DefaultQueue { get; }

		// -(instancetype _Nonnull)initWithNotificationCenter:(NSNotificationCenter * _Nonnull)notificationCenter __attribute__((objc_designated_initializer));
		[Export ("initWithNotificationCenter:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSNotificationCenter notificationCenter);

		// -(void)enqueueNotification:(NSNotification * _Nonnull)notification postingStyle:(NSPostingStyle)postingStyle;
		[Export ("enqueueNotification:postingStyle:")]
		void EnqueueNotification (NSNotification notification, NSPostingStyle postingStyle);

		// -(void)enqueueNotification:(NSNotification * _Nonnull)notification postingStyle:(NSPostingStyle)postingStyle coalesceMask:(NSNotificationCoalescing)coalesceMask forModes:(NSArray<NSRunLoopMode> * _Nullable)modes;
		[Export ("enqueueNotification:postingStyle:coalesceMask:forModes:")]
		void EnqueueNotification (NSNotification notification, NSPostingStyle postingStyle, NSNotificationCoalescing coalesceMask, [NullAllowed] string[] modes);

		// -(void)dequeueNotificationsMatching:(NSNotification * _Nonnull)notification coalesceMask:(NSUInteger)coalesceMask;
		[Export ("dequeueNotificationsMatching:coalesceMask:")]
		void DequeueNotificationsMatching (NSNotification notification, nuint coalesceMask);
	}

	// @interface NSNull : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSNull : INSCopying, INSSecureCoding
	{
		// +(NSNull * _Nonnull)null;
		[Static]
		[Export ("null")]
		NSNull Null { get; }
	}

	// @interface NSOperation : NSObject
	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSOperation
	{
		// -(void)start;
		[Export ("start")]
		void Start ();

		// -(void)main;
		[Export ("main")]
		void Main ();

		// @property (readonly, getter = isCancelled) BOOL cancelled;
		[Export ("cancelled")]
		bool Cancelled { [Bind ("isCancelled")] get; }

		// -(void)cancel;
		[Export ("cancel")]
		void Cancel ();

		// @property (readonly, getter = isExecuting) BOOL executing;
		[Export ("executing")]
		bool Executing { [Bind ("isExecuting")] get; }

		// @property (readonly, getter = isFinished) BOOL finished;
		[Export ("finished")]
		bool Finished { [Bind ("isFinished")] get; }

		// @property (readonly, getter = isConcurrent) BOOL concurrent;
		[Export ("concurrent")]
		bool Concurrent { [Bind ("isConcurrent")] get; }

		// @property (readonly, getter = isAsynchronous) BOOL asynchronous __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (7, 0)]
		[Export ("asynchronous")]
		bool Asynchronous { [Bind ("isAsynchronous")] get; }

		// @property (readonly, getter = isReady) BOOL ready;
		[Export ("ready")]
		bool Ready { [Bind ("isReady")] get; }

		// -(void)addDependency:(NSOperation * _Nonnull)op;
		[Export ("addDependency:")]
		void AddDependency (NSOperation op);

		// -(void)removeDependency:(NSOperation * _Nonnull)op;
		[Export ("removeDependency:")]
		void RemoveDependency (NSOperation op);

		// @property (readonly, copy) NSArray<NSOperation *> * _Nonnull dependencies;
		[Export ("dependencies", ArgumentSemantic.Copy)]
		NSOperation[] Dependencies { get; }

		// @property NSOperationQueuePriority queuePriority;
		[Export ("queuePriority", ArgumentSemantic.Assign)]
		NSOperationQueuePriority QueuePriority { get; set; }

		// @property (copy) void (^ _Nullable)(void) completionBlock __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("completionBlock", ArgumentSemantic.Copy)]
		Action CompletionBlock { get; set; }

		// -(void)waitUntilFinished __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_attr("@_unavailableFromAsync(message: "Use completionBlock or a dependent Operation instead")")));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("waitUntilFinished")]
		void WaitUntilFinished ();

		// @property double threadPriority __attribute__((availability(macos, introduced=10.6, deprecated=10.10))) __attribute__((availability(ios, introduced=4.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Not supported")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Export ("threadPriority")]
		double ThreadPriority { get; set; }

		// @property NSQualityOfService qualityOfService __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("qualityOfService", ArgumentSemantic.Assign)]
		NSQualityOfService QualityOfService { get; set; }

		// @property (copy) NSString * _Nullable name __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[NullAllowed, Export ("name")]
		string Name { get; set; }
	}

	// @interface NSBlockOperation : NSOperation
	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	[BaseType (typeof(NSOperation))]
	interface NSBlockOperation
	{
		// +(instancetype _Nonnull)blockOperationWithBlock:(void (^ _Nonnull)(void))block;
		[Static]
		[Export ("blockOperationWithBlock:")]
		NSBlockOperation BlockOperationWithBlock (Action block);

		// -(void)addExecutionBlock:(void (^ _Nonnull)(void))block;
		[Export ("addExecutionBlock:")]
		void AddExecutionBlock (Action block);

		// @property (readonly, copy) NSArray<void (^)(void)> * _Nonnull executionBlocks;
		[Export ("executionBlocks", ArgumentSemantic.Copy)]
		Action[] ExecutionBlocks { get; }
	}

	// @interface NSInvocationOperation : NSOperation
	[Unavailable (PlatformName.Swift)]
	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	[BaseType (typeof(NSOperation))]
	interface NSInvocationOperation
	{
		// -(instancetype _Nullable)initWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel object:(id _Nullable)arg;
		[Export ("initWithTarget:selector:object:")]
		NativeHandle Constructor (NSObject target, Selector sel, [NullAllowed] NSObject arg);

		// -(instancetype _Nonnull)initWithInvocation:(NSInvocation * _Nonnull)inv __attribute__((objc_designated_initializer));
		[Export ("initWithInvocation:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSInvocation inv);

		// @property (readonly, retain) NSInvocation * _Nonnull invocation;
		[Export ("invocation", ArgumentSemantic.Retain)]
		NSInvocation Invocation { get; }

		// @property (readonly, retain) id _Nullable result;
		[NullAllowed, Export ("result", ArgumentSemantic.Retain)]
		NSObject Result { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSExceptionName _Nonnull NSInvocationOperationVoidResultException __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSInvocationOperationVoidResultException", "__Internal")]
		NSString NSInvocationOperationVoidResultException { get; }

		// extern const NSExceptionName _Nonnull NSInvocationOperationCancelledException __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSInvocationOperationCancelledException", "__Internal")]
		NSString NSInvocationOperationCancelledException { get; }
	}

	// @interface NSOperationQueue : NSObject <NSProgressReporting>
	[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSOperationQueue : INSProgressReporting
	{
		// @property (readonly, strong) NSProgress * _Nonnull progress __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("progress", ArgumentSemantic.Strong)]
		NSProgress Progress { get; }

		// -(void)addOperation:(NSOperation * _Nonnull)op;
		[Export ("addOperation:")]
		void AddOperation (NSOperation op);

		// -(void)addOperations:(NSArray<NSOperation *> * _Nonnull)ops waitUntilFinished:(BOOL)wait __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_attr("@_unavailableFromAsync(message: "Use addBarrierBlock or a dependent Operations instead")")));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("addOperations:waitUntilFinished:")]
		void AddOperations (NSOperation[] ops, bool wait);

		// -(void)addOperationWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_async("none")));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("addOperationWithBlock:")]
		void AddOperationWithBlock (Action block);

		// -(void)addBarrierBlock:(void (^ _Nonnull)(void))barrier __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("addBarrierBlock:")]
		void AddBarrierBlock (Action barrier);

		// @property NSInteger maxConcurrentOperationCount;
		[Export ("maxConcurrentOperationCount")]
		nint MaxConcurrentOperationCount { get; set; }

		// @property (getter = isSuspended) BOOL suspended;
		[Export ("suspended")]
		bool Suspended { [Bind ("isSuspended")] get; set; }

		// @property (copy) NSString * _Nullable name __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("name")]
		string Name { get; set; }

		// @property NSQualityOfService qualityOfService __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("qualityOfService", ArgumentSemantic.Assign)]
		NSQualityOfService QualityOfService { get; set; }

		// @property (assign) dispatch_queue_t _Nullable underlyingQueue __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[NullAllowed, Export ("underlyingQueue", ArgumentSemantic.Assign)]
		DispatchQueue UnderlyingQueue { get; set; }

		// -(void)cancelAllOperations;
		[Export ("cancelAllOperations")]
		void CancelAllOperations ();

		// -(void)waitUntilAllOperationsAreFinished __attribute__((swift_attr("@_unavailableFromAsync(message: "Use addBarrierBlock or a dependent Operations instead")")));
		[Export ("waitUntilAllOperationsAreFinished")]
		void WaitUntilAllOperationsAreFinished ();

		// @property (readonly, strong, class) NSOperationQueue * _Nullable currentQueue __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Static]
		[NullAllowed, Export ("currentQueue", ArgumentSemantic.Strong)]
		NSOperationQueue CurrentQueue { get; }

		// @property (readonly, strong, class) NSOperationQueue * _Nonnull mainQueue __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Static]
		[Export ("mainQueue", ArgumentSemantic.Strong)]
		NSOperationQueue MainQueue { get; }
	}

	// @interface NSDeprecated (NSOperationQueue)
	[Category]
	[BaseType (typeof(NSOperationQueue))]
	interface NSOperationQueue_NSDeprecated
	{
		// @property (readonly, copy) NSArray<__kindof NSOperation *> * _Nonnull operations __attribute__((availability(macos, introduced=10.5, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")]
		[Export ("operations", ArgumentSemantic.Copy)]
		NSOperation[] Operations { get; }

		// @property (readonly) NSUInteger operationCount __attribute__((availability(macos, introduced=10.6, deprecated=100000))) __attribute__((availability(ios, introduced=4.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 6)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 4, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("operationCount")]
		nuint OperationCount { get; }
	}

	// @interface NSOrthography : NSObject <NSCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	[BaseType (typeof(NSObject))]
	interface NSOrthography : INSCopying, INSSecureCoding
	{
		// @property (readonly, copy) NSString * _Nonnull dominantScript;
		[Export ("dominantScript")]
		string DominantScript { get; }

		// @property (readonly, copy) NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull languageMap;
		[Export ("languageMap", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSArray<NSString>> LanguageMap { get; }

		// -(instancetype _Nonnull)initWithDominantScript:(NSString * _Nonnull)script languageMap:(NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull)map __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initWithDominantScript:languageMap:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string script, NSDictionary<NSString, NSArray<NSString>> map);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);
	}

	// @interface NSOrthographyExtended (NSOrthography)
	[Category]
	[BaseType (typeof(NSOrthography))]
	interface NSOrthography_NSOrthographyExtended
	{
		// -(NSArray<NSString *> * _Nullable)languagesForScript:(NSString * _Nonnull)script __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("languagesForScript:")]
		[return: NullAllowed]
		string[] LanguagesForScript (string script);

		// -(NSString * _Nullable)dominantLanguageForScript:(NSString * _Nonnull)script __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("dominantLanguageForScript:")]
		[return: NullAllowed]
		string DominantLanguageForScript (string script);

		// @property (readonly, copy) NSString * _Nonnull dominantLanguage __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("dominantLanguage")]
		string DominantLanguage { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull allScripts __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("allScripts", ArgumentSemantic.Copy)]
		string[] AllScripts { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull allLanguages __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("allLanguages", ArgumentSemantic.Copy)]
		string[] AllLanguages { get; }

		// +(instancetype _Nonnull)defaultOrthographyForLanguage:(NSString * _Nonnull)language __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Static]
		[Export ("defaultOrthographyForLanguage:")]
		NSOrthography DefaultOrthographyForLanguage (string language);
	}

	// @interface NSOrthographyCreation (NSOrthography)
	[Category]
	[BaseType (typeof(NSOrthography))]
	interface NSOrthography_NSOrthographyCreation
	{
		// +(instancetype _Nonnull)orthographyWithDominantScript:(NSString * _Nonnull)script languageMap:(NSDictionary<NSString *,NSArray<NSString *> *> * _Nonnull)map __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("orthographyWithDominantScript:languageMap:")]
		NSOrthography OrthographyWithDominantScript (string script, NSDictionary<NSString, NSArray<NSString>> map);
	}

	// @interface NSPointerArray : NSObject <NSFastEnumeration, NSCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,5), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSPointerArray : INSFastEnumeration, INSCopying, INSSecureCoding
	{
		// -(instancetype _Nonnull)initWithOptions:(NSPointerFunctionsOptions)options __attribute__((objc_designated_initializer));
		[Export ("initWithOptions:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSPointerFunctionsOptions options);

		// -(instancetype _Nonnull)initWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions __attribute__((objc_designated_initializer));
		[Export ("initWithPointerFunctions:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSPointerFunctions functions);

		// +(NSPointerArray * _Nonnull)pointerArrayWithOptions:(NSPointerFunctionsOptions)options;
		[Static]
		[Export ("pointerArrayWithOptions:")]
		NSPointerArray PointerArrayWithOptions (NSPointerFunctionsOptions options);

		// +(NSPointerArray * _Nonnull)pointerArrayWithPointerFunctions:(NSPointerFunctions * _Nonnull)functions;
		[Static]
		[Export ("pointerArrayWithPointerFunctions:")]
		NSPointerArray PointerArrayWithPointerFunctions (NSPointerFunctions functions);

		// @property (readonly, copy) NSPointerFunctions * _Nonnull pointerFunctions;
		[Export ("pointerFunctions", ArgumentSemantic.Copy)]
		NSPointerFunctions PointerFunctions { get; }

		// -(void * _Nullable)pointerAtIndex:(NSUInteger)index;
		[Export ("pointerAtIndex:")]
		[return: NullAllowed]
		unsafe void* PointerAtIndex (nuint index);

		// -(void)addPointer:(void * _Nullable)pointer;
		[Export ("addPointer:")]
		unsafe void AddPointer ([NullAllowed] void* pointer);

		// -(void)removePointerAtIndex:(NSUInteger)index;
		[Export ("removePointerAtIndex:")]
		void RemovePointerAtIndex (nuint index);

		// -(void)insertPointer:(void * _Nullable)item atIndex:(NSUInteger)index;
		[Export ("insertPointer:atIndex:")]
		unsafe void InsertPointer ([NullAllowed] void* item, nuint index);

		// -(void)replacePointerAtIndex:(NSUInteger)index withPointer:(void * _Nullable)item;
		[Export ("replacePointerAtIndex:withPointer:")]
		unsafe void ReplacePointerAtIndex (nuint index, [NullAllowed] void* item);

		// -(void)compact;
		[Export ("compact")]
		void Compact ();

		// @property NSUInteger count;
		[Export ("count")]
		nuint Count { get; set; }
	}

	// @interface NSPointerArrayConveniences (NSPointerArray)
	[Category]
	[BaseType (typeof(NSPointerArray))]
	interface NSPointerArray_NSPointerArrayConveniences
	{
		// +(NSPointerArray * _Nonnull)strongObjectsPointerArray __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Static]
		[Export ("strongObjectsPointerArray")]
		NSPointerArray StrongObjectsPointerArray { get; }

		// +(NSPointerArray * _Nonnull)weakObjectsPointerArray __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Static]
		[Export ("weakObjectsPointerArray")]
		NSPointerArray WeakObjectsPointerArray { get; }

		// @property (readonly, copy) NSArray * _Nonnull allObjects;
		[Export ("allObjects", ArgumentSemantic.Copy)]
		NSObject[] AllObjects { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSPortDidBecomeInvalidNotification;
		[Field ("NSPortDidBecomeInvalidNotification", "__Internal")]
		NSString NSPortDidBecomeInvalidNotification { get; }
	}

	// @interface NSPort : NSObject <NSCopying, NSCoding>
	[BaseType (typeof(NSObject))]
	interface NSPort : INSCopying, INSCoding
	{
		// +(NSPort * _Nonnull)port;
		[Static]
		[Export ("port")]
		NSPort Port { get; }

		// -(void)invalidate;
		[Export ("invalidate")]
		void Invalidate ();

		// @property (readonly, getter = isValid) BOOL valid;
		[Export ("valid")]
		bool Valid { [Bind ("isValid")] get; }

		// -(id<NSPortDelegate> _Nullable)delegate;
		// -(void)setDelegate:(id<NSPortDelegate> _Nullable)anObject;
		[NullAllowed, Export ("delegate")]
		NSPortDelegate Delegate { get; set; }

		// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("scheduleInRunLoop:forMode:")]
		void ScheduleInRunLoop (NSRunLoop runLoop, string mode);

		// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("removeFromRunLoop:forMode:")]
		void RemoveFromRunLoop (NSRunLoop runLoop, string mode);

		// @property (readonly) NSUInteger reservedSpaceLength;
		[Export ("reservedSpaceLength")]
		nuint ReservedSpaceLength { get; }

		// -(BOOL)sendBeforeDate:(NSDate * _Nonnull)limitDate components:(NSMutableArray * _Nullable)components from:(NSPort * _Nullable)receivePort reserved:(NSUInteger)headerSpaceReserved;
		[Export ("sendBeforeDate:components:from:reserved:")]
		bool SendBeforeDate (NSDate limitDate, [NullAllowed] NSMutableArray components, [NullAllowed] NSPort receivePort, nuint headerSpaceReserved);

		// -(BOOL)sendBeforeDate:(NSDate * _Nonnull)limitDate msgid:(NSUInteger)msgID components:(NSMutableArray * _Nullable)components from:(NSPort * _Nullable)receivePort reserved:(NSUInteger)headerSpaceReserved;
		[Export ("sendBeforeDate:msgid:components:from:reserved:")]
		bool SendBeforeDate (NSDate limitDate, nuint msgID, [NullAllowed] NSMutableArray components, [NullAllowed] NSPort receivePort, nuint headerSpaceReserved);
	}

	// @protocol NSPortDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSPortDelegate
	{
		// @optional -(void)handlePortMessage:(NSPortMessage * _Nonnull)message;
		[Export ("handlePortMessage:")]
		void HandlePortMessage (NSPortMessage message);
	}

	// @interface NSMachPort : NSPort
	[BaseType (typeof(NSPort))]
	interface NSMachPort
	{
		// +(NSPort * _Nonnull)portWithMachPort:(uint32_t)machPort;
		[Static]
		[Export ("portWithMachPort:")]
		NSPort PortWithMachPort (uint machPort);

		// -(instancetype _Nonnull)initWithMachPort:(uint32_t)machPort __attribute__((objc_designated_initializer));
		[Export ("initWithMachPort:")]
		[DesignatedInitializer]
		NativeHandle Constructor (uint machPort);

		// -(id<NSMachPortDelegate> _Nullable)delegate;
		// -(void)setDelegate:(id<NSMachPortDelegate> _Nullable)anObject;
		[NullAllowed, Export ("delegate")]
		NSMachPortDelegate Delegate { get; set; }

		// +(NSPort * _Nonnull)portWithMachPort:(uint32_t)machPort options:(NSMachPortOptions)f __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Static]
		[Export ("portWithMachPort:options:")]
		NSPort PortWithMachPort (uint machPort, NSMachPortOptions f);

		// -(instancetype _Nonnull)initWithMachPort:(uint32_t)machPort options:(NSMachPortOptions)f __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("initWithMachPort:options:")]
		[DesignatedInitializer]
		NativeHandle Constructor (uint machPort, NSMachPortOptions f);

		// @property (readonly) uint32_t machPort;
		[Export ("machPort")]
		uint MachPort { get; }

		// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("scheduleInRunLoop:forMode:")]
		void ScheduleInRunLoop (NSRunLoop runLoop, string mode);

		// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)runLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("removeFromRunLoop:forMode:")]
		void RemoveFromRunLoop (NSRunLoop runLoop, string mode);
	}

	// @protocol NSMachPortDelegate <NSPortDelegate>
	[Protocol, Model (AutoGeneratedName = true)]
	interface NSMachPortDelegate : INSPortDelegate
	{
		// @optional -(void)handleMachMessage:(void * _Nonnull)msg;
		[Export ("handleMachMessage:")]
		unsafe void HandleMachMessage (void* msg);
	}

	// @interface NSMessagePort : NSPort
	[BaseType (typeof(NSPort))]
	interface NSMessagePort
	{
	}

	// @interface NSProcessInfo : NSObject
	[BaseType (typeof(NSObject))]
	interface NSProcessInfo
	{
		// @property (readonly, strong, class) NSProcessInfo * _Nonnull processInfo;
		[Static]
		[Export ("processInfo", ArgumentSemantic.Strong)]
		NSProcessInfo ProcessInfo { get; }

		// @property (readonly, copy) NSDictionary<NSString *,NSString *> * _Nonnull environment;
		[Export ("environment", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSString> Environment { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull arguments;
		[Export ("arguments", ArgumentSemantic.Copy)]
		string[] Arguments { get; }

		// @property (readonly, copy) NSString * _Nonnull hostName;
		[Export ("hostName")]
		string HostName { get; }

		// @property (copy) NSString * _Nonnull processName;
		[Export ("processName")]
		string ProcessName { get; set; }

		// @property (readonly) int processIdentifier;
		[Export ("processIdentifier")]
		int ProcessIdentifier { get; }

		// @property (readonly, copy) NSString * _Nonnull globallyUniqueString;
		[Export ("globallyUniqueString")]
		string GloballyUniqueString { get; }

		// -(NSUInteger)operatingSystem __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead")]
		[Export ("operatingSystem")]
		nuint OperatingSystem { get; }

		// -(NSString * _Nonnull)operatingSystemName __attribute__((availability(macos, introduced=10.0, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead")]
		[Export ("operatingSystemName")]
		string OperatingSystemName { get; }

		// @property (readonly, copy) NSString * _Nonnull operatingSystemVersionString;
		[Export ("operatingSystemVersionString")]
		string OperatingSystemVersionString { get; }

		// @property (readonly) NSOperatingSystemVersion operatingSystemVersion __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("operatingSystemVersion")]
		NSOperatingSystemVersion OperatingSystemVersion { get; }

		// @property (readonly) NSUInteger processorCount __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("processorCount")]
		nuint ProcessorCount { get; }

		// @property (readonly) NSUInteger activeProcessorCount __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("activeProcessorCount")]
		nuint ActiveProcessorCount { get; }

		// @property (readonly) unsigned long long physicalMemory __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("physicalMemory")]
		ulong PhysicalMemory { get; }

		// -(BOOL)isOperatingSystemAtLeastVersion:(NSOperatingSystemVersion)version __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("isOperatingSystemAtLeastVersion:")]
		bool IsOperatingSystemAtLeastVersion (NSOperatingSystemVersion version);

		// @property (readonly) NSTimeInterval systemUptime __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("systemUptime")]
		double SystemUptime { get; }

		// -(void)disableSuddenTermination __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,6)]
		[Export ("disableSuddenTermination")]
		void DisableSuddenTermination ();

		// -(void)enableSuddenTermination __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,6)]
		[Export ("enableSuddenTermination")]
		void EnableSuddenTermination ();

		// -(void)disableAutomaticTermination:(NSString * _Nonnull)reason __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,7)]
		[Export ("disableAutomaticTermination:")]
		void DisableAutomaticTermination (string reason);

		// -(void)enableAutomaticTermination:(NSString * _Nonnull)reason __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,7)]
		[Export ("enableAutomaticTermination:")]
		void EnableAutomaticTermination (string reason);

		// @property BOOL automaticTerminationSupportEnabled __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 7)]
		[Export ("automaticTerminationSupportEnabled")]
		bool AutomaticTerminationSupportEnabled { get; set; }
	}

	// @interface NSProcessInfoActivity (NSProcessInfo)
	[Category]
	[BaseType (typeof(NSProcessInfo))]
	interface NSProcessInfo_NSProcessInfoActivity
	{
		// -(id<NSObject> _Nonnull)beginActivityWithOptions:(NSActivityOptions)options reason:(NSString * _Nonnull)reason __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("beginActivityWithOptions:reason:")]
		NSObject BeginActivityWithOptions (NSActivityOptions options, string reason);

		// -(void)endActivity:(id<NSObject> _Nonnull)activity __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("endActivity:")]
		void EndActivity (NSObject activity);

		// -(void)performActivityWithOptions:(NSActivityOptions)options reason:(NSString * _Nonnull)reason usingBlock:(void (^ _Nonnull)(void))block __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("performActivityWithOptions:reason:usingBlock:")]
		void PerformActivityWithOptions (NSActivityOptions options, string reason, Action block);

		// -(void)performExpiringActivityWithReason:(NSString * _Nonnull)reason usingBlock:(void (^ _Nonnull)(BOOL))block __attribute__((availability(ios, introduced=8.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2,0), TV (9,0), NoMac, iOS (8,2)]
		[Export ("performExpiringActivityWithReason:usingBlock:")]
		void PerformExpiringActivityWithReason (string reason, Action<bool> block);
	}

	// @interface NSUserInformation (NSProcessInfo)
	[Category]
	[BaseType (typeof(NSProcessInfo))]
	interface NSProcessInfo_NSUserInformation
	{
		// @property (readonly, copy) API_AVAILABLE(macosx(10.12)) NSString * userName __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 12)]
		[Export ("userName")]
		string UserName { get; }

		// @property (readonly, copy) API_AVAILABLE(macosx(10.12)) NSString * fullUserName __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 12)]
		[Export ("fullUserName")]
		string FullUserName { get; }
	}

	// @interface NSProcessInfoThermalState (NSProcessInfo)
	[Category]
	[BaseType (typeof(NSProcessInfo))]
	interface NSProcessInfo_NSProcessInfoThermalState
	{
		// @property (readonly) NSProcessInfoThermalState thermalState __attribute__((availability(macos, introduced=10.10.3))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 10, 3), iOS (11, 0)]
		[Export ("thermalState")]
		NSProcessInfoThermalState ThermalState { get; }
	}

	// @interface NSProcessInfoPowerState (NSProcessInfo)
	[Category]
	[BaseType (typeof(NSProcessInfo))]
	interface NSProcessInfo_NSProcessInfoPowerState
	{
		// @property (readonly, getter = isLowPowerModeEnabled) BOOL lowPowerModeEnabled __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (12, 0), iOS (9, 0)]
		[Export ("lowPowerModeEnabled")]
		bool LowPowerModeEnabled { [Bind ("isLowPowerModeEnabled")] get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSProcessInfoThermalStateDidChangeNotification __attribute__((availability(macos, introduced=10.10.3))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 10, 3), iOS (11, 0)]
		[Field ("NSProcessInfoThermalStateDidChangeNotification", "__Internal")]
		NSString NSProcessInfoThermalStateDidChangeNotification { get; }

		// extern const NSNotificationName _Nonnull NSProcessInfoPowerStateDidChangeNotification __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (12, 0), iOS (9, 0)]
		[Field ("NSProcessInfoPowerStateDidChangeNotification", "__Internal")]
		NSString NSProcessInfoPowerStateDidChangeNotification { get; }
	}

	// @interface NSProcessInfoPlatform (NSProcessInfo)
	[Category]
	[BaseType (typeof(NSProcessInfo))]
	interface NSProcessInfo_NSProcessInfoPlatform
	{
		// @property (readonly, getter = isMacCatalystApp) BOOL macCatalystApp __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("macCatalystApp")]
		bool MacCatalystApp { [Bind ("isMacCatalystApp")] get; }

		// @property (readonly, getter = isiOSAppOnMac) BOOL iOSAppOnMac __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Export ("iOSAppOnMac")]
		bool IOSAppOnMac { [Bind ("isiOSAppOnMac")] get; }
	}

	// @interface NSProxy <NSObject>
	[BaseType (typeof(NSObject))]
	interface NSProxy
	{
		// +(id _Nonnull)alloc;
		[Static]
		[Export ("alloc")]
		NSObject Alloc { get; }

		// +(id _Nonnull)allocWithZone:(NSZone * _Nullable)zone;
		[Static]
		[Export ("allocWithZone:")]
		unsafe NSObject AllocWithZone ([NullAllowed] NSZone* zone);

		// +(Class _Nonnull)class;
		[Static]
		[Export ("class")]
		Class Class { get; }

		// -(void)forwardInvocation:(NSInvocation * _Nonnull)invocation;
		[Export ("forwardInvocation:")]
		void ForwardInvocation (NSInvocation invocation);

		// -(NSMethodSignature * _Nullable)methodSignatureForSelector:(SEL _Nonnull)sel __attribute__((availability(swift, unavailable)));
		[Unavailable (PlatformName.Swift)]
		[Export ("methodSignatureForSelector:")]
		[return: NullAllowed]
		NSMethodSignature MethodSignatureForSelector (Selector sel);

		// -(void)dealloc;
		[Export ("dealloc")]
		void Dealloc ();

		// -(void)finalize;
		[Export ("finalize")]
		void Finalize ();

		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// @property (readonly, copy) NSString * _Nonnull debugDescription;
		[Export ("debugDescription")]
		string DebugDescription { get; }

		// +(BOOL)respondsToSelector:(SEL _Nonnull)aSelector;
		[Static]
		[Export ("respondsToSelector:")]
		bool RespondsToSelector (Selector aSelector);

		// -(BOOL)allowsWeakReference __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoMac, NoiOS]
		[Export ("allowsWeakReference")]
		bool AllowsWeakReference { get; }

		// -(BOOL)retainWeakReference __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoMac, NoiOS]
		[Export ("retainWeakReference")]
		bool RetainWeakReference { get; }
	}

	// @interface NSTextCheckingResult : NSObject <NSCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	[BaseType (typeof(NSObject))]
	interface NSTextCheckingResult : INSCopying, INSSecureCoding
	{
		// @property (readonly) NSTextCheckingType resultType;
		[Export ("resultType")]
		NSTextCheckingType ResultType { get; }

		// @property (readonly) NSRange range;
		[Export ("range")]
		NSRange Range { get; }
	}

	// @interface NSTextCheckingResultOptional (NSTextCheckingResult)
	[Category]
	[BaseType (typeof(NSTextCheckingResult))]
	interface NSTextCheckingResult_NSTextCheckingResultOptional
	{
		// @property (readonly, copy) NSOrthography * _Nullable orthography;
		[NullAllowed, Export ("orthography", ArgumentSemantic.Copy)]
		NSOrthography Orthography { get; }

		// @property (readonly, copy) NSArray<NSDictionary<NSString *,id> *> * _Nullable grammarDetails;
		[NullAllowed, Export ("grammarDetails", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject>[] GrammarDetails { get; }

		// @property (readonly, copy) NSDate * _Nullable date;
		[NullAllowed, Export ("date", ArgumentSemantic.Copy)]
		NSDate Date { get; }

		// @property (readonly, copy) NSTimeZone * _Nullable timeZone;
		[NullAllowed, Export ("timeZone", ArgumentSemantic.Copy)]
		NSTimeZone TimeZone { get; }

		// @property (readonly) NSTimeInterval duration;
		[Export ("duration")]
		double Duration { get; }

		// @property (readonly, copy) NSDictionary<NSTextCheckingKey,NSString *> * _Nullable components __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[NullAllowed, Export ("components", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSString> Components { get; }

		// @property (readonly, copy) NSURL * _Nullable URL;
		[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
		NSURL URL { get; }

		// @property (readonly, copy) NSString * _Nullable replacementString;
		[NullAllowed, Export ("replacementString")]
		string ReplacementString { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nullable alternativeStrings __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[NullAllowed, Export ("alternativeStrings", ArgumentSemantic.Copy)]
		string[] AlternativeStrings { get; }

		// @property (readonly, copy) NSRegularExpression * _Nullable regularExpression __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[NullAllowed, Export ("regularExpression", ArgumentSemantic.Copy)]
		NSRegularExpression RegularExpression { get; }

		// @property (readonly, copy) NSString * _Nullable phoneNumber __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[NullAllowed, Export ("phoneNumber")]
		string PhoneNumber { get; }

		// @property (readonly) NSUInteger numberOfRanges __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Export ("numberOfRanges")]
		nuint NumberOfRanges { get; }

		// -(NSRange)rangeAtIndex:(NSUInteger)idx __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
		[Export ("rangeAtIndex:")]
		NSRange RangeAtIndex (nuint idx);

		// -(NSRange)rangeWithName:(NSString * _Nonnull)name __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("rangeWithName:")]
		NSRange RangeWithName (string name);

		// -(NSTextCheckingResult * _Nonnull)resultByAdjustingRangesWithOffset:(NSInteger)offset __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("resultByAdjustingRangesWithOffset:")]
		NSTextCheckingResult ResultByAdjustingRangesWithOffset (nint offset);

		// @property (readonly, copy) NSDictionary<NSTextCheckingKey,NSString *> * _Nullable addressComponents;
		[NullAllowed, Export ("addressComponents", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSString> AddressComponents { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSTextCheckingKey _Nonnull NSTextCheckingNameKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingNameKey", "__Internal")]
		NSString NSTextCheckingNameKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingJobTitleKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingJobTitleKey", "__Internal")]
		NSString NSTextCheckingJobTitleKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingOrganizationKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingOrganizationKey", "__Internal")]
		NSString NSTextCheckingOrganizationKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingStreetKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingStreetKey", "__Internal")]
		NSString NSTextCheckingStreetKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingCityKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingCityKey", "__Internal")]
		NSString NSTextCheckingCityKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingStateKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingStateKey", "__Internal")]
		NSString NSTextCheckingStateKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingZIPKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingZIPKey", "__Internal")]
		NSString NSTextCheckingZIPKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingCountryKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingCountryKey", "__Internal")]
		NSString NSTextCheckingCountryKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingPhoneKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSTextCheckingPhoneKey", "__Internal")]
		NSString NSTextCheckingPhoneKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingAirlineKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Field ("NSTextCheckingAirlineKey", "__Internal")]
		NSString NSTextCheckingAirlineKey { get; }

		// extern const NSTextCheckingKey _Nonnull NSTextCheckingFlightKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Field ("NSTextCheckingFlightKey", "__Internal")]
		NSString NSTextCheckingFlightKey { get; }
	}

	// @interface NSTextCheckingResultCreation (NSTextCheckingResult)
	[Category]
	[BaseType (typeof(NSTextCheckingResult))]
	interface NSTextCheckingResult_NSTextCheckingResultCreation
	{
		// +(NSTextCheckingResult * _Nonnull)orthographyCheckingResultWithRange:(NSRange)range orthography:(NSOrthography * _Nonnull)orthography;
		[Static]
		[Export ("orthographyCheckingResultWithRange:orthography:")]
		NSTextCheckingResult OrthographyCheckingResultWithRange (NSRange range, NSOrthography orthography);

		// +(NSTextCheckingResult * _Nonnull)spellCheckingResultWithRange:(NSRange)range;
		[Static]
		[Export ("spellCheckingResultWithRange:")]
		NSTextCheckingResult SpellCheckingResultWithRange (NSRange range);

		// +(NSTextCheckingResult * _Nonnull)grammarCheckingResultWithRange:(NSRange)range details:(NSArray<NSDictionary<NSString *,id> *> * _Nonnull)details;
		[Static]
		[Export ("grammarCheckingResultWithRange:details:")]
		NSTextCheckingResult GrammarCheckingResultWithRange (NSRange range, NSDictionary<NSString, NSObject>[] details);

		// +(NSTextCheckingResult * _Nonnull)dateCheckingResultWithRange:(NSRange)range date:(NSDate * _Nonnull)date;
		[Static]
		[Export ("dateCheckingResultWithRange:date:")]
		NSTextCheckingResult DateCheckingResultWithRange (NSRange range, NSDate date);

		// +(NSTextCheckingResult * _Nonnull)dateCheckingResultWithRange:(NSRange)range date:(NSDate * _Nonnull)date timeZone:(NSTimeZone * _Nonnull)timeZone duration:(NSTimeInterval)duration;
		[Static]
		[Export ("dateCheckingResultWithRange:date:timeZone:duration:")]
		NSTextCheckingResult DateCheckingResultWithRange (NSRange range, NSDate date, NSTimeZone timeZone, double duration);

		// +(NSTextCheckingResult * _Nonnull)addressCheckingResultWithRange:(NSRange)range components:(NSDictionary<NSTextCheckingKey,NSString *> * _Nonnull)components;
		[Static]
		[Export ("addressCheckingResultWithRange:components:")]
		NSTextCheckingResult AddressCheckingResultWithRange (NSRange range, NSDictionary<NSString, NSString> components);

		// +(NSTextCheckingResult * _Nonnull)linkCheckingResultWithRange:(NSRange)range URL:(NSURL * _Nonnull)url;
		[Static]
		[Export ("linkCheckingResultWithRange:URL:")]
		NSTextCheckingResult LinkCheckingResultWithRange (NSRange range, NSURL url);

		// +(NSTextCheckingResult * _Nonnull)quoteCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
		[Static]
		[Export ("quoteCheckingResultWithRange:replacementString:")]
		NSTextCheckingResult QuoteCheckingResultWithRange (NSRange range, string replacementString);

		// +(NSTextCheckingResult * _Nonnull)dashCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
		[Static]
		[Export ("dashCheckingResultWithRange:replacementString:")]
		NSTextCheckingResult DashCheckingResultWithRange (NSRange range, string replacementString);

		// +(NSTextCheckingResult * _Nonnull)replacementCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
		[Static]
		[Export ("replacementCheckingResultWithRange:replacementString:")]
		NSTextCheckingResult ReplacementCheckingResultWithRange (NSRange range, string replacementString);

		// +(NSTextCheckingResult * _Nonnull)correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
		[Static]
		[Export ("correctionCheckingResultWithRange:replacementString:")]
		NSTextCheckingResult CorrectionCheckingResultWithRange (NSRange range, string replacementString);

		// +(NSTextCheckingResult * _Nonnull)correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString * _Nonnull)replacementString alternativeStrings:(NSArray<NSString *> * _Nonnull)alternativeStrings __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Static]
		[Export ("correctionCheckingResultWithRange:replacementString:alternativeStrings:")]
		NSTextCheckingResult CorrectionCheckingResultWithRange (NSRange range, string replacementString, string[] alternativeStrings);

		// +(NSTextCheckingResult * _Nonnull)regularExpressionCheckingResultWithRanges:(NSRangePointer _Nonnull)ranges count:(NSUInteger)count regularExpression:(NSRegularExpression * _Nonnull)regularExpression __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
		[Static]
		[Export ("regularExpressionCheckingResultWithRanges:count:regularExpression:")]
		unsafe NSTextCheckingResult RegularExpressionCheckingResultWithRanges (NSRangePointer* ranges, nuint count, NSRegularExpression regularExpression);

		// +(NSTextCheckingResult * _Nonnull)phoneNumberCheckingResultWithRange:(NSRange)range phoneNumber:(NSString * _Nonnull)phoneNumber __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
		[Static]
		[Export ("phoneNumberCheckingResultWithRange:phoneNumber:")]
		NSTextCheckingResult PhoneNumberCheckingResultWithRange (NSRange range, string phoneNumber);

		// +(NSTextCheckingResult * _Nonnull)transitInformationCheckingResultWithRange:(NSRange)range components:(NSDictionary<NSTextCheckingKey,NSString *> * _Nonnull)components __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
		[Static]
		[Export ("transitInformationCheckingResultWithRange:components:")]
		NSTextCheckingResult TransitInformationCheckingResultWithRange (NSRange range, NSDictionary<NSString, NSString> components);
	}

	// @interface NSRegularExpression : NSObject <NSCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
	[BaseType (typeof(NSObject))]
	interface NSRegularExpression : INSCopying, INSSecureCoding
	{
		// +(NSRegularExpression * _Nullable)regularExpressionWithPattern:(NSString * _Nonnull)pattern options:(NSRegularExpressionOptions)options error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("regularExpressionWithPattern:options:error:")]
		[return: NullAllowed]
		NSRegularExpression RegularExpressionWithPattern (string pattern, NSRegularExpressionOptions options, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithPattern:(NSString * _Nonnull)pattern options:(NSRegularExpressionOptions)options error:(NSError * _Nullable * _Nullable)error __attribute__((objc_designated_initializer));
		[Export ("initWithPattern:options:error:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string pattern, NSRegularExpressionOptions options, [NullAllowed] out NSError error);

		// @property (readonly, copy) NSString * _Nonnull pattern;
		[Export ("pattern")]
		string Pattern { get; }

		// @property (readonly) NSRegularExpressionOptions options;
		[Export ("options")]
		NSRegularExpressionOptions Options { get; }

		// @property (readonly) NSUInteger numberOfCaptureGroups;
		[Export ("numberOfCaptureGroups")]
		nuint NumberOfCaptureGroups { get; }

		// +(NSString * _Nonnull)escapedPatternForString:(NSString * _Nonnull)string;
		[Static]
		[Export ("escapedPatternForString:")]
		string EscapedPatternForString (string @string);
	}

	// @interface NSMatching (NSRegularExpression)
	[Category]
	[BaseType (typeof(NSRegularExpression))]
	interface NSRegularExpression_NSMatching
	{
		// -(void)enumerateMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range usingBlock:(void (^ _Nonnull)(NSTextCheckingResult * _Nullable, NSMatchingFlags, BOOL * _Nonnull))block;
		[Export ("enumerateMatchesInString:options:range:usingBlock:")]
		unsafe void EnumerateMatchesInString (string @string, NSMatchingOptions options, NSRange range, Action<NSTextCheckingResult, NSMatchingFlags, bool*> block);

		// -(NSArray<NSTextCheckingResult *> * _Nonnull)matchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
		[Export ("matchesInString:options:range:")]
		NSTextCheckingResult[] MatchesInString (string @string, NSMatchingOptions options, NSRange range);

		// -(NSUInteger)numberOfMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
		[Export ("numberOfMatchesInString:options:range:")]
		nuint NumberOfMatchesInString (string @string, NSMatchingOptions options, NSRange range);

		// -(NSTextCheckingResult * _Nullable)firstMatchInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
		[Export ("firstMatchInString:options:range:")]
		[return: NullAllowed]
		NSTextCheckingResult FirstMatchInString (string @string, NSMatchingOptions options, NSRange range);

		// -(NSRange)rangeOfFirstMatchInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range;
		[Export ("rangeOfFirstMatchInString:options:range:")]
		NSRange RangeOfFirstMatchInString (string @string, NSMatchingOptions options, NSRange range);
	}

	// @interface NSReplacement (NSRegularExpression)
	[Category]
	[BaseType (typeof(NSRegularExpression))]
	interface NSRegularExpression_NSReplacement
	{
		// -(NSString * _Nonnull)stringByReplacingMatchesInString:(NSString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString * _Nonnull)templ;
		[Export ("stringByReplacingMatchesInString:options:range:withTemplate:")]
		string StringByReplacingMatchesInString (string @string, NSMatchingOptions options, NSRange range, string templ);

		// -(NSUInteger)replaceMatchesInString:(NSMutableString * _Nonnull)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString * _Nonnull)templ;
		[Export ("replaceMatchesInString:options:range:withTemplate:")]
		nuint ReplaceMatchesInString (NSMutableString @string, NSMatchingOptions options, NSRange range, string templ);

		// -(NSString * _Nonnull)replacementStringForResult:(NSTextCheckingResult * _Nonnull)result inString:(NSString * _Nonnull)string offset:(NSInteger)offset template:(NSString * _Nonnull)templ;
		[Export ("replacementStringForResult:inString:offset:template:")]
		string ReplacementStringForResult (NSTextCheckingResult result, string @string, nint offset, string templ);

		// +(NSString * _Nonnull)escapedTemplateForString:(NSString * _Nonnull)string;
		[Static]
		[Export ("escapedTemplateForString:")]
		string EscapedTemplateForString (string @string);
	}

	// @interface NSDataDetector : NSRegularExpression
	[Watch (2,0), TV (9,0), Mac (10,7), iOS (4,0)]
	[BaseType (typeof(NSRegularExpression))]
	interface NSDataDetector
	{
		// +(NSDataDetector * _Nullable)dataDetectorWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError * _Nullable * _Nullable)error;
		[Static]
		[Export ("dataDetectorWithTypes:error:")]
		[return: NullAllowed]
		NSDataDetector DataDetectorWithTypes (ulong checkingTypes, [NullAllowed] out NSError error);

		// -(instancetype _Nullable)initWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError * _Nullable * _Nullable)error __attribute__((objc_designated_initializer));
		[Export ("initWithTypes:error:")]
		[DesignatedInitializer]
		NativeHandle Constructor (ulong checkingTypes, [NullAllowed] out NSError error);

		// @property (readonly) NSTextCheckingTypes checkingTypes;
		[Export ("checkingTypes")]
		ulong CheckingTypes { get; }
	}

	// @interface NSSortDescriptor : NSObject <NSSecureCoding, NSCopying>
	[BaseType (typeof(NSObject))]
	interface NSSortDescriptor : INSSecureCoding, INSCopying
	{
		// +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("sortDescriptorWithKey:ascending:")]
		NSSortDescriptor SortDescriptorWithKey ([NullAllowed] string key, bool ascending);

		// +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending selector:(SEL _Nullable)selector __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("sortDescriptorWithKey:ascending:selector:")]
		NSSortDescriptor SortDescriptorWithKey ([NullAllowed] string key, bool ascending, [NullAllowed] Selector selector);

		// -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending;
		[Export ("initWithKey:ascending:")]
		NativeHandle Constructor ([NullAllowed] string key, bool ascending);

		// -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending selector:(SEL _Nullable)selector;
		[Export ("initWithKey:ascending:selector:")]
		NativeHandle Constructor ([NullAllowed] string key, bool ascending, [NullAllowed] Selector selector);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder;
		[Export ("initWithCoder:")]
		NativeHandle Constructor (NSCoder coder);

		// @property (readonly, copy) NSString * _Nullable key;
		[NullAllowed, Export ("key")]
		string Key { get; }

		// @property (readonly) BOOL ascending;
		[Export ("ascending")]
		bool Ascending { get; }

		// @property (readonly) SEL _Nullable selector;
		[NullAllowed, Export ("selector")]
		Selector Selector { get; }

		// -(void)allowEvaluation __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("allowEvaluation")]
		void AllowEvaluation ();

		// +(instancetype _Nonnull)sortDescriptorWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending comparator:(NSComparator _Nonnull)cmptr __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("sortDescriptorWithKey:ascending:comparator:")]
		NSSortDescriptor SortDescriptorWithKey ([NullAllowed] string key, bool ascending, NSComparator cmptr);

		// -(instancetype _Nonnull)initWithKey:(NSString * _Nullable)key ascending:(BOOL)ascending comparator:(NSComparator _Nonnull)cmptr __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initWithKey:ascending:comparator:")]
		NativeHandle Constructor ([NullAllowed] string key, bool ascending, NSComparator cmptr);

		// @property (readonly) NSComparator _Nonnull comparator __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("comparator")]
		NSComparator Comparator { get; }

		// -(NSComparisonResult)compareObject:(id _Nonnull)object1 toObject:(id _Nonnull)object2;
		[Export ("compareObject:toObject:")]
		NSComparisonResult CompareObject (NSObject object1, NSObject object2);

		// @property (readonly, retain) id _Nonnull reversedSortDescriptor;
		[Export ("reversedSortDescriptor", ArgumentSemantic.Retain)]
		NSObject ReversedSortDescriptor { get; }
	}

	// @interface NSSortDescriptorSorting (NSSet)
	[Category]
	[BaseType (typeof(NSSet))]
	interface NSSet_NSSortDescriptorSorting
	{
		// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("sortedArrayUsingDescriptors:")]
		NSObject[] SortedArrayUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	}

	// @interface NSSortDescriptorSorting (NSArray)
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSSortDescriptorSorting
	{
		// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors;
		[Export ("sortedArrayUsingDescriptors:")]
		NSObject[] SortedArrayUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	}

	// @interface NSSortDescriptorSorting (NSMutableArray)
	[Category]
	[BaseType (typeof(NSMutableArray))]
	interface NSMutableArray_NSSortDescriptorSorting
	{
		// -(void)sortUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors;
		[Export ("sortUsingDescriptors:")]
		void SortUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	}

	// @interface NSKeyValueSorting (NSOrderedSet)
	[Category]
	[BaseType (typeof(NSOrderedSet))]
	interface NSOrderedSet_NSKeyValueSorting
	{
		// -(NSArray<ObjectType> * _Nonnull)sortedArrayUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("sortedArrayUsingDescriptors:")]
		NSObject[] SortedArrayUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	}

	// @interface NSKeyValueSorting (NSMutableOrderedSet)
	[Category]
	[BaseType (typeof(NSMutableOrderedSet))]
	interface NSMutableOrderedSet_NSKeyValueSorting
	{
		// -(void)sortUsingDescriptors:(NSArray<NSSortDescriptor *> * _Nonnull)sortDescriptors __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("sortUsingDescriptors:")]
		void SortUsingDescriptors (NSSortDescriptor[] sortDescriptors);
	}

	// @interface NSStream : NSObject
	[BaseType (typeof(NSObject))]
	interface NSStream
	{
		// -(void)open;
		[Export ("open")]
		void Open ();

		// -(void)close;
		[Export ("close")]
		void Close ();

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSStreamDelegate Delegate { get; set; }

		// @property (assign) id<NSStreamDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// -(id _Nullable)propertyForKey:(NSStreamPropertyKey _Nonnull)key;
		[Export ("propertyForKey:")]
		[return: NullAllowed]
		NSObject PropertyForKey (string key);

		// -(BOOL)setProperty:(id _Nullable)property forKey:(NSStreamPropertyKey _Nonnull)key;
		[Export ("setProperty:forKey:")]
		bool SetProperty ([NullAllowed] NSObject property, string key);

		// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("scheduleInRunLoop:forMode:")]
		void ScheduleInRunLoop (NSRunLoop aRunLoop, string mode);

		// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("removeFromRunLoop:forMode:")]
		void RemoveFromRunLoop (NSRunLoop aRunLoop, string mode);

		// @property (readonly) NSStreamStatus streamStatus;
		[Export ("streamStatus")]
		NSStreamStatus StreamStatus { get; }

		// @property (readonly, copy) NSError * _Nullable streamError;
		[NullAllowed, Export ("streamError", ArgumentSemantic.Copy)]
		NSError StreamError { get; }
	}

	// @interface NSInputStream : NSStream
	[BaseType (typeof(NSStream))]
	interface NSInputStream
	{
		// -(NSInteger)read:(uint8_t * _Nonnull)buffer maxLength:(NSUInteger)len;
		[Export ("read:maxLength:")]
		unsafe nint Read (byte* buffer, nuint len);

		// -(BOOL)getBuffer:(uint8_t * _Nullable * _Nonnull)buffer length:(NSUInteger * _Nonnull)len;
		[Export ("getBuffer:length:")]
		unsafe bool GetBuffer ([NullAllowed] byte** buffer, nuint* len);

		// @property (readonly) BOOL hasBytesAvailable;
		[Export ("hasBytesAvailable")]
		bool HasBytesAvailable { get; }

		// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
		[Export ("initWithData:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSData data);

		// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initWithURL:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSURL url);
	}

	// @interface NSOutputStream : NSStream
	[BaseType (typeof(NSStream))]
	interface NSOutputStream
	{
		// -(NSInteger)write:(const uint8_t * _Nonnull)buffer maxLength:(NSUInteger)len;
		[Export ("write:maxLength:")]
		unsafe nint Write (byte* buffer, nuint len);

		// @property (readonly) BOOL hasSpaceAvailable;
		[Export ("hasSpaceAvailable")]
		bool HasSpaceAvailable { get; }

		// -(instancetype _Nonnull)initToBuffer:(uint8_t * _Nonnull)buffer capacity:(NSUInteger)capacity __attribute__((objc_designated_initializer));
		[Export ("initToBuffer:capacity:")]
		[DesignatedInitializer]
		unsafe NativeHandle Constructor (byte* buffer, nuint capacity);

		// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url append:(BOOL)shouldAppend __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initWithURL:append:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSURL url, bool shouldAppend);
	}

	// @interface NSSocketStreamCreationExtensions (NSStream)
	[Category]
	[BaseType (typeof(NSStream))]
	interface NSStream_NSSocketStreamCreationExtensions
	{
		// +(void)getStreamsToHostWithName:(NSString * _Nonnull)hostname port:(NSInteger)port inputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream __attribute__((availability(macos, introduced=10.10, deprecated=100000))) __attribute__((availability(ios, introduced=8.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 10, message: "Use nw_connection_t in Network framework instead")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "Use nw_connection_t in Network framework instead")]
		[Introduced (PlatformName.iOS, 8, 0, message: "Use nw_connection_t in Network framework instead")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "Use nw_connection_t in Network framework instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use nw_connection_t in Network framework instead")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "Use nw_connection_t in Network framework instead")]
		[NoWatch]
		[Static]
		[Export ("getStreamsToHostWithName:port:inputStream:outputStream:")]
		void GetStreamsToHostWithName (string hostname, nint port, [NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);
	}

	// @interface NSStreamBoundPairCreationExtensions (NSStream)
	[Category]
	[BaseType (typeof(NSStream))]
	interface NSStream_NSStreamBoundPairCreationExtensions
	{
		// +(void)getBoundStreamsWithBufferSize:(NSUInteger)bufferSize inputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Static]
		[Export ("getBoundStreamsWithBufferSize:inputStream:outputStream:")]
		void GetBoundStreamsWithBufferSize (nuint bufferSize, [NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);
	}

	// @interface NSInputStreamExtensions (NSInputStream)
	[Category]
	[BaseType (typeof(NSInputStream))]
	interface NSInputStream_NSInputStreamExtensions
	{
		// -(instancetype _Nullable)initWithFileAtPath:(NSString * _Nonnull)path;
		[Export ("initWithFileAtPath:")]
		NativeHandle Constructor (string path);

		// +(instancetype _Nullable)inputStreamWithData:(NSData * _Nonnull)data;
		[Static]
		[Export ("inputStreamWithData:")]
		[return: NullAllowed]
		NSInputStream InputStreamWithData (NSData data);

		// +(instancetype _Nullable)inputStreamWithFileAtPath:(NSString * _Nonnull)path;
		[Static]
		[Export ("inputStreamWithFileAtPath:")]
		[return: NullAllowed]
		NSInputStream InputStreamWithFileAtPath (string path);

		// +(instancetype _Nullable)inputStreamWithURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("inputStreamWithURL:")]
		[return: NullAllowed]
		NSInputStream InputStreamWithURL (NSURL url);
	}

	// @interface NSOutputStreamExtensions (NSOutputStream)
	[Category]
	[BaseType (typeof(NSOutputStream))]
	interface NSOutputStream_NSOutputStreamExtensions
	{
		// -(instancetype _Nullable)initToFileAtPath:(NSString * _Nonnull)path append:(BOOL)shouldAppend;
		[Export ("initToFileAtPath:append:")]
		NativeHandle Constructor (string path, bool shouldAppend);

		// +(instancetype _Nonnull)outputStreamToMemory;
		[Static]
		[Export ("outputStreamToMemory")]
		NSOutputStream OutputStreamToMemory ();

		// +(instancetype _Nonnull)outputStreamToBuffer:(uint8_t * _Nonnull)buffer capacity:(NSUInteger)capacity;
		[Static]
		[Export ("outputStreamToBuffer:capacity:")]
		unsafe NSOutputStream OutputStreamToBuffer (byte* buffer, nuint capacity);

		// +(instancetype _Nonnull)outputStreamToFileAtPath:(NSString * _Nonnull)path append:(BOOL)shouldAppend;
		[Static]
		[Export ("outputStreamToFileAtPath:append:")]
		NSOutputStream OutputStreamToFileAtPath (string path, bool shouldAppend);

		// +(instancetype _Nullable)outputStreamWithURL:(NSURL * _Nonnull)url append:(BOOL)shouldAppend __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("outputStreamWithURL:append:")]
		[return: NullAllowed]
		NSOutputStream OutputStreamWithURL (NSURL url, bool shouldAppend);
	}

	// @protocol NSStreamDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSStreamDelegate
	{
		// @optional -(void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
		[Export ("stream:handleEvent:")]
		void HandleEvent (NSStream aStream, NSStreamEvent eventCode);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSStreamPropertyKey _Nonnull NSStreamSocketSecurityLevelKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSocketSecurityLevelKey", "__Internal")]
		NSString NSStreamSocketSecurityLevelKey { get; }

		// extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelNone __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSocketSecurityLevelNone", "__Internal")]
		NSString NSStreamSocketSecurityLevelNone { get; }

		// extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelSSLv2 __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSocketSecurityLevelSSLv2", "__Internal")]
		NSString NSStreamSocketSecurityLevelSSLv2 { get; }

		// extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelSSLv3 __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSocketSecurityLevelSSLv3", "__Internal")]
		NSString NSStreamSocketSecurityLevelSSLv3 { get; }

		// extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelTLSv1 __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSocketSecurityLevelTLSv1", "__Internal")]
		NSString NSStreamSocketSecurityLevelTLSv1 { get; }

		// extern const NSStreamSocketSecurityLevel _Nonnull NSStreamSocketSecurityLevelNegotiatedSSL __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSocketSecurityLevelNegotiatedSSL", "__Internal")]
		NSString NSStreamSocketSecurityLevelNegotiatedSSL { get; }

		// extern const NSStreamPropertyKey _Nonnull NSStreamSOCKSProxyConfigurationKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSProxyConfigurationKey", "__Internal")]
		NSString NSStreamSOCKSProxyConfigurationKey { get; }

		// extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyHostKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSProxyHostKey", "__Internal")]
		NSString NSStreamSOCKSProxyHostKey { get; }

		// extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyPortKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSProxyPortKey", "__Internal")]
		NSString NSStreamSOCKSProxyPortKey { get; }

		// extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyVersionKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSProxyVersionKey", "__Internal")]
		NSString NSStreamSOCKSProxyVersionKey { get; }

		// extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyUserKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSProxyUserKey", "__Internal")]
		NSString NSStreamSOCKSProxyUserKey { get; }

		// extern const NSStreamSOCKSProxyConfiguration _Nonnull NSStreamSOCKSProxyPasswordKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSProxyPasswordKey", "__Internal")]
		NSString NSStreamSOCKSProxyPasswordKey { get; }

		// extern const NSStreamSOCKSProxyVersion _Nonnull NSStreamSOCKSProxyVersion4 __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSProxyVersion4", "__Internal")]
		NSString NSStreamSOCKSProxyVersion4 { get; }

		// extern const NSStreamSOCKSProxyVersion _Nonnull NSStreamSOCKSProxyVersion5 __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSProxyVersion5", "__Internal")]
		NSString NSStreamSOCKSProxyVersion5 { get; }

		// extern const NSStreamPropertyKey _Nonnull NSStreamDataWrittenToMemoryStreamKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamDataWrittenToMemoryStreamKey", "__Internal")]
		NSString NSStreamDataWrittenToMemoryStreamKey { get; }

		// extern const NSStreamPropertyKey _Nonnull NSStreamFileCurrentOffsetKey __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamFileCurrentOffsetKey", "__Internal")]
		NSString NSStreamFileCurrentOffsetKey { get; }

		// extern const NSErrorDomain _Nonnull NSStreamSocketSSLErrorDomain __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSocketSSLErrorDomain", "__Internal")]
		NSString NSStreamSocketSSLErrorDomain { get; }

		// extern const NSErrorDomain _Nonnull NSStreamSOCKSErrorDomain __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSStreamSOCKSErrorDomain", "__Internal")]
		NSString NSStreamSOCKSErrorDomain { get; }

		// extern const NSStreamPropertyKey _Nonnull NSStreamNetworkServiceType __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Field ("NSStreamNetworkServiceType", "__Internal")]
		NSString NSStreamNetworkServiceType { get; }

		// extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeVoIP __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Field ("NSStreamNetworkServiceTypeVoIP", "__Internal")]
		NSString NSStreamNetworkServiceTypeVoIP { get; }

		// extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeVideo __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSStreamNetworkServiceTypeVideo", "__Internal")]
		NSString NSStreamNetworkServiceTypeVideo { get; }

		// extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeBackground __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSStreamNetworkServiceTypeBackground", "__Internal")]
		NSString NSStreamNetworkServiceTypeBackground { get; }

		// extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeVoice __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSStreamNetworkServiceTypeVoice", "__Internal")]
		NSString NSStreamNetworkServiceTypeVoice { get; }

		// extern const NSStreamNetworkServiceTypeValue _Nonnull NSStreamNetworkServiceTypeCallSignaling __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("NSStreamNetworkServiceTypeCallSignaling", "__Internal")]
		NSString NSStreamNetworkServiceTypeCallSignaling { get; }
	}

	// @interface NSThread : NSObject
	[BaseType (typeof(NSObject))]
	interface NSThread
	{
		// @property (readonly, strong, class) NS_SWIFT_UNAVAILABLE_FROM_ASYNC("Thread.current cannot be used from async contexts.") NSThread * currentThread __attribute__((swift_attr("@_unavailableFromAsync(message: "Thread.current cannot be used from async contexts.")")));
		[Static]
		[Export ("currentThread", ArgumentSemantic.Strong)]
		NSThread CurrentThread { get; }

		// +(void)detachNewThreadWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((swift_async("none")));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Static]
		[Export ("detachNewThreadWithBlock:")]
		void DetachNewThreadWithBlock (Action block);

		// +(void)detachNewThreadSelector:(SEL _Nonnull)selector toTarget:(id _Nonnull)target withObject:(id _Nullable)argument;
		[Static]
		[Export ("detachNewThreadSelector:toTarget:withObject:")]
		void DetachNewThreadSelector (Selector selector, NSObject target, [NullAllowed] NSObject argument);

		// +(BOOL)isMultiThreaded;
		[Static]
		[Export ("isMultiThreaded")]
		bool IsMultiThreaded { get; }

		// @property (readonly, retain) NSMutableDictionary * _Nonnull threadDictionary;
		[Export ("threadDictionary", ArgumentSemantic.Retain)]
		NSMutableDictionary ThreadDictionary { get; }

		// +(void)sleepUntilDate:(NSDate * _Nonnull)date __attribute__((swift_attr("@_unavailableFromAsync(message: "Use Task.sleep(until:clock:) instead.")")));
		[Static]
		[Export ("sleepUntilDate:")]
		void SleepUntilDate (NSDate date);

		// +(void)sleepForTimeInterval:(NSTimeInterval)ti __attribute__((swift_attr("@_unavailableFromAsync(message: "Use Task.sleep(until:clock:) instead.")")));
		[Static]
		[Export ("sleepForTimeInterval:")]
		void SleepForTimeInterval (double ti);

		// +(void)exit __attribute__((swift_attr("@_unavailableFromAsync(message: "Threads used in asynchronous contexts cannot be explicitly exited.")")));
		[Static]
		[Export ("exit")]
		void Exit ();

		// +(double)threadPriority __attribute__((swift_attr("@_unavailableFromAsync(message: "Threads used in asynchronous context cannot get priorities.")")));
		[Static]
		[Export ("threadPriority")]
		double ThreadPriority { get; }

		// +(BOOL)setThreadPriority:(double)p __attribute__((swift_attr("@_unavailableFromAsync(message: "Threads used in asynchronous context cannot set priorities.")")));
		[Static]
		[Export ("setThreadPriority:")]
		bool SetThreadPriority (double p);

		// @property double threadPriority __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("threadPriority")]
		double ThreadPriority { get; set; }

		// @property NSQualityOfService qualityOfService __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("qualityOfService", ArgumentSemantic.Assign)]
		NSQualityOfService QualityOfService { get; set; }

		// @property (readonly, copy, class) NSArray<NSNumber *> * _Nonnull callStackReturnAddresses __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("callStackReturnAddresses", ArgumentSemantic.Copy)]
		NSNumber[] CallStackReturnAddresses { get; }

		// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull callStackSymbols __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Static]
		[Export ("callStackSymbols", ArgumentSemantic.Copy)]
		string[] CallStackSymbols { get; }

		// @property (copy) NSString * _Nullable name __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("name")]
		string Name { get; set; }

		// @property NSUInteger stackSize __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("stackSize")]
		nuint StackSize { get; set; }

		// @property (readonly) BOOL isMainThread __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("isMainThread")]
		bool IsMainThread { get; }

		// @property (readonly, class) BOOL isMainThread __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_attr("@_unavailableFromAsync(message: "Work intended for the main actor should be marked with @MainActor")")));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("isMainThread")]
		bool IsMainThread { get; }

		// @property (readonly, strong, class) NSThread * _Nonnull mainThread __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Static]
		[Export ("mainThread", ArgumentSemantic.Strong)]
		NSThread MainThread { get; }

		// -(instancetype _Nonnull)initWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)selector object:(id _Nullable)argument __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("initWithTarget:selector:object:")]
		NativeHandle Constructor (NSObject target, Selector selector, [NullAllowed] NSObject argument);

		// -(instancetype _Nonnull)initWithBlock:(void (^ _Nonnull)(void))block __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("initWithBlock:")]
		NativeHandle Constructor (Action block);

		// @property (readonly, getter = isExecuting) BOOL executing __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("executing")]
		bool Executing { [Bind ("isExecuting")] get; }

		// @property (readonly, getter = isFinished) BOOL finished __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("finished")]
		bool Finished { [Bind ("isFinished")] get; }

		// @property (readonly, getter = isCancelled) BOOL cancelled __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("cancelled")]
		bool Cancelled { [Bind ("isCancelled")] get; }

		// -(void)cancel __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("cancel")]
		void Cancel ();

		// -(void)start __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("start")]
		void Start ();

		// -(void)main __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("main")]
		void Main ();
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSWillBecomeMultiThreadedNotification;
		[Field ("NSWillBecomeMultiThreadedNotification", "__Internal")]
		NSString NSWillBecomeMultiThreadedNotification { get; }

		// extern const NSNotificationName _Nonnull NSDidBecomeSingleThreadedNotification;
		[Field ("NSDidBecomeSingleThreadedNotification", "__Internal")]
		NSString NSDidBecomeSingleThreadedNotification { get; }

		// extern const NSNotificationName _Nonnull NSThreadWillExitNotification;
		[Field ("NSThreadWillExitNotification", "__Internal")]
		NSString NSThreadWillExitNotification { get; }
	}

	// @interface NSThreadPerformAdditions (NSObject)
	[Category]
	[BaseType (typeof(NSObject))]
	interface NSObject_NSThreadPerformAdditions
	{
		// -(void)performSelectorOnMainThread:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait modes:(NSArray<NSString *> * _Nullable)array __attribute__((swift_attr("@_unavailableFromAsync(message: "Work intended for the main actor should be marked with @MainActor")")));
		[Export ("performSelectorOnMainThread:withObject:waitUntilDone:modes:")]
		void PerformSelectorOnMainThread (Selector aSelector, [NullAllowed] NSObject arg, bool wait, [NullAllowed] string[] array);

		// -(void)performSelectorOnMainThread:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait __attribute__((swift_attr("@_unavailableFromAsync(message: "Work intended for the main actor should be marked with @MainActor")")));
		[Export ("performSelectorOnMainThread:withObject:waitUntilDone:")]
		void PerformSelectorOnMainThread (Selector aSelector, [NullAllowed] NSObject arg, bool wait);

		// -(void)performSelector:(SEL _Nonnull)aSelector onThread:(NSThread * _Nonnull)thr withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait modes:(NSArray<NSString *> * _Nullable)array __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_attr("@_unavailableFromAsync(message: "Asynchronous work should be called from isolation from an actor")")));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("performSelector:onThread:withObject:waitUntilDone:modes:")]
		void PerformSelector (Selector aSelector, NSThread thr, [NullAllowed] NSObject arg, bool wait, [NullAllowed] string[] array);

		// -(void)performSelector:(SEL _Nonnull)aSelector onThread:(NSThread * _Nonnull)thr withObject:(id _Nullable)arg waitUntilDone:(BOOL)wait __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_attr("@_unavailableFromAsync(message: "Asynchronous work should be called from isolation from an actor")")));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("performSelector:onThread:withObject:waitUntilDone:")]
		void PerformSelector (Selector aSelector, NSThread thr, [NullAllowed] NSObject arg, bool wait);

		// -(void)performSelectorInBackground:(SEL _Nonnull)aSelector withObject:(id _Nullable)arg __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("performSelectorInBackground:withObject:")]
		void PerformSelectorInBackground (Selector aSelector, [NullAllowed] NSObject arg);
	}

	// @interface NSTimeZone : NSObject <NSCopying, NSSecureCoding>
	[BaseType (typeof(NSObject))]
	interface NSTimeZone : INSCopying, INSSecureCoding
	{
		// @property (readonly, copy) NSString * _Nonnull name;
		[Export ("name")]
		string Name { get; }

		// @property (readonly, copy) NSData * _Nonnull data;
		[Export ("data", ArgumentSemantic.Copy)]
		NSData Data { get; }

		// -(NSInteger)secondsFromGMTForDate:(NSDate * _Nonnull)aDate;
		[Export ("secondsFromGMTForDate:")]
		nint SecondsFromGMTForDate (NSDate aDate);

		// -(NSString * _Nullable)abbreviationForDate:(NSDate * _Nonnull)aDate;
		[Export ("abbreviationForDate:")]
		[return: NullAllowed]
		string AbbreviationForDate (NSDate aDate);

		// -(BOOL)isDaylightSavingTimeForDate:(NSDate * _Nonnull)aDate;
		[Export ("isDaylightSavingTimeForDate:")]
		bool IsDaylightSavingTimeForDate (NSDate aDate);

		// -(NSTimeInterval)daylightSavingTimeOffsetForDate:(NSDate * _Nonnull)aDate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("daylightSavingTimeOffsetForDate:")]
		double DaylightSavingTimeOffsetForDate (NSDate aDate);

		// -(NSDate * _Nullable)nextDaylightSavingTimeTransitionAfterDate:(NSDate * _Nonnull)aDate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("nextDaylightSavingTimeTransitionAfterDate:")]
		[return: NullAllowed]
		NSDate NextDaylightSavingTimeTransitionAfterDate (NSDate aDate);
	}

	// @interface NSExtendedTimeZone (NSTimeZone)
	[Category]
	[BaseType (typeof(NSTimeZone))]
	interface NSTimeZone_NSExtendedTimeZone
	{
		// @property (readonly, copy, class) NSTimeZone * _Nonnull systemTimeZone;
		[Static]
		[Export ("systemTimeZone", ArgumentSemantic.Copy)]
		NSTimeZone SystemTimeZone { get; }

		// +(void)resetSystemTimeZone;
		[Static]
		[Export ("resetSystemTimeZone")]
		void ResetSystemTimeZone ();

		// @property (copy, class) NSTimeZone * _Nonnull defaultTimeZone;
		[Static]
		[Export ("defaultTimeZone", ArgumentSemantic.Copy)]
		NSTimeZone DefaultTimeZone { get; set; }

		// @property (readonly, copy, class) NSTimeZone * _Nonnull localTimeZone;
		[Static]
		[Export ("localTimeZone", ArgumentSemantic.Copy)]
		NSTimeZone LocalTimeZone { get; }

		// @property (readonly, copy, class) NSArray<NSString *> * _Nonnull knownTimeZoneNames;
		[Static]
		[Export ("knownTimeZoneNames", ArgumentSemantic.Copy)]
		string[] KnownTimeZoneNames { get; }

		// @property (copy, class) NSDictionary<NSString *,NSString *> * _Nonnull abbreviationDictionary __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Static]
		[Export ("abbreviationDictionary", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSString> AbbreviationDictionary { get; set; }

		// @property (readonly, copy, class) NSString * _Nonnull timeZoneDataVersion __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Static]
		[Export ("timeZoneDataVersion")]
		string TimeZoneDataVersion { get; }

		// @property (readonly) NSInteger secondsFromGMT;
		[Export ("secondsFromGMT")]
		nint SecondsFromGMT { get; }

		// @property (readonly, copy) NSString * _Nullable abbreviation;
		[NullAllowed, Export ("abbreviation")]
		string Abbreviation { get; }

		// @property (readonly, getter = isDaylightSavingTime) BOOL daylightSavingTime;
		[Export ("daylightSavingTime")]
		bool DaylightSavingTime { [Bind ("isDaylightSavingTime")] get; }

		// @property (readonly) NSTimeInterval daylightSavingTimeOffset __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("daylightSavingTimeOffset")]
		double DaylightSavingTimeOffset { get; }

		// @property (readonly, copy) NSDate * _Nullable nextDaylightSavingTimeTransition __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[NullAllowed, Export ("nextDaylightSavingTimeTransition", ArgumentSemantic.Copy)]
		NSDate NextDaylightSavingTimeTransition { get; }

		// @property (readonly, copy) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }

		// -(BOOL)isEqualToTimeZone:(NSTimeZone * _Nonnull)aTimeZone;
		[Export ("isEqualToTimeZone:")]
		bool IsEqualToTimeZone (NSTimeZone aTimeZone);

		// -(NSString * _Nullable)localizedName:(NSTimeZoneNameStyle)style locale:(NSLocale * _Nullable)locale __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("localizedName:locale:")]
		[return: NullAllowed]
		string LocalizedName (NSTimeZoneNameStyle style, [NullAllowed] NSLocale locale);
	}

	// @interface NSTimeZoneCreation (NSTimeZone)
	[Category]
	[BaseType (typeof(NSTimeZone))]
	interface NSTimeZone_NSTimeZoneCreation
	{
		// +(instancetype _Nullable)timeZoneWithName:(NSString * _Nonnull)tzName;
		[Static]
		[Export ("timeZoneWithName:")]
		[return: NullAllowed]
		NSTimeZone TimeZoneWithName (string tzName);

		// +(instancetype _Nullable)timeZoneWithName:(NSString * _Nonnull)tzName data:(NSData * _Nullable)aData;
		[Static]
		[Export ("timeZoneWithName:data:")]
		[return: NullAllowed]
		NSTimeZone TimeZoneWithName (string tzName, [NullAllowed] NSData aData);

		// -(instancetype _Nullable)initWithName:(NSString * _Nonnull)tzName;
		[Export ("initWithName:")]
		NativeHandle Constructor (string tzName);

		// -(instancetype _Nullable)initWithName:(NSString * _Nonnull)tzName data:(NSData * _Nullable)aData;
		[Export ("initWithName:data:")]
		NativeHandle Constructor (string tzName, [NullAllowed] NSData aData);

		// +(instancetype _Nonnull)timeZoneForSecondsFromGMT:(NSInteger)seconds;
		[Static]
		[Export ("timeZoneForSecondsFromGMT:")]
		NSTimeZone TimeZoneForSecondsFromGMT (nint seconds);

		// +(instancetype _Nullable)timeZoneWithAbbreviation:(NSString * _Nonnull)abbreviation;
		[Static]
		[Export ("timeZoneWithAbbreviation:")]
		[return: NullAllowed]
		NSTimeZone TimeZoneWithAbbreviation (string abbreviation);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSSystemTimeZoneDidChangeNotification __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSSystemTimeZoneDidChangeNotification", "__Internal")]
		NSString NSSystemTimeZoneDidChangeNotification { get; }
	}

	// @interface NSTimer : NSObject
	[BaseType (typeof(NSObject))]
	interface NSTimer
	{
		// +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation * _Nonnull)invocation repeats:(BOOL)yesOrNo;
		[Static]
		[Export ("timerWithTimeInterval:invocation:repeats:")]
		NSTimer TimerWithTimeInterval (double ti, NSInvocation invocation, bool yesOrNo);

		// +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation * _Nonnull)invocation repeats:(BOOL)yesOrNo __attribute__((swift_attr("@_unavailableFromAsync(message: "Timers scheduled in an async context may never fire.")")));
		[Static]
		[Export ("scheduledTimerWithTimeInterval:invocation:repeats:")]
		NSTimer ScheduledTimerWithTimeInterval (double ti, NSInvocation invocation, bool yesOrNo);

		// +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)ti target:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector userInfo:(id _Nullable)userInfo repeats:(BOOL)yesOrNo;
		[Static]
		[Export ("timerWithTimeInterval:target:selector:userInfo:repeats:")]
		NSTimer TimerWithTimeInterval (double ti, NSObject aTarget, Selector aSelector, [NullAllowed] NSObject userInfo, bool yesOrNo);

		// +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id _Nonnull)aTarget selector:(SEL _Nonnull)aSelector userInfo:(id _Nullable)userInfo repeats:(BOOL)yesOrNo __attribute__((swift_attr("@_unavailableFromAsync(message: "Timers scheduled in an async context may never fire.")")));
		[Static]
		[Export ("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:")]
		NSTimer ScheduledTimerWithTimeInterval (double ti, NSObject aTarget, Selector aSelector, [NullAllowed] NSObject userInfo, bool yesOrNo);

		// +(NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Static]
		[Export ("timerWithTimeInterval:repeats:block:")]
		NSTimer TimerWithTimeInterval (double interval, bool repeats, Action<NSTimer> block);

		// +(NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Static]
		[Export ("scheduledTimerWithTimeInterval:repeats:block:")]
		NSTimer ScheduledTimerWithTimeInterval (double interval, bool repeats, Action<NSTimer> block);

		// -(instancetype _Nonnull)initWithFireDate:(NSDate * _Nonnull)date interval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^ _Nonnull)(NSTimer * _Nonnull))block __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("initWithFireDate:interval:repeats:block:")]
		NativeHandle Constructor (NSDate date, double interval, bool repeats, Action<NSTimer> block);

		// -(instancetype _Nonnull)initWithFireDate:(NSDate * _Nonnull)date interval:(NSTimeInterval)ti target:(id _Nonnull)t selector:(SEL _Nonnull)s userInfo:(id _Nullable)ui repeats:(BOOL)rep __attribute__((objc_designated_initializer));
		[Export ("initWithFireDate:interval:target:selector:userInfo:repeats:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSDate date, double ti, NSObject t, Selector s, [NullAllowed] NSObject ui, bool rep);

		// -(void)fire;
		[Export ("fire")]
		void Fire ();

		// @property (copy) NSDate * _Nonnull fireDate;
		[Export ("fireDate", ArgumentSemantic.Copy)]
		NSDate FireDate { get; set; }

		// @property (readonly) NSTimeInterval timeInterval;
		[Export ("timeInterval")]
		double TimeInterval { get; }

		// @property NSTimeInterval tolerance __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Export ("tolerance")]
		double Tolerance { get; set; }

		// -(void)invalidate;
		[Export ("invalidate")]
		void Invalidate ();

		// @property (readonly, getter = isValid) BOOL valid;
		[Export ("valid")]
		bool Valid { [Bind ("isValid")] get; }

		// @property (readonly, retain) id _Nullable userInfo;
		[NullAllowed, Export ("userInfo", ArgumentSemantic.Retain)]
		NSObject UserInfo { get; }
	}

	// @protocol NSURLAuthenticationChallengeSender <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[Protocol]
	[BaseType (typeof(NSObject))]
	interface NSURLAuthenticationChallengeSender
	{
		// @required -(void)useCredential:(NSURLCredential * _Nonnull)credential forAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
		[Abstract]
		[Export ("useCredential:forAuthenticationChallenge:")]
		void UseCredential (NSURLCredential credential, NSURLAuthenticationChallenge challenge);

		// @required -(void)continueWithoutCredentialForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
		[Abstract]
		[Export ("continueWithoutCredentialForAuthenticationChallenge:")]
		void ContinueWithoutCredentialForAuthenticationChallenge (NSURLAuthenticationChallenge challenge);

		// @required -(void)cancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
		[Abstract]
		[Export ("cancelAuthenticationChallenge:")]
		void CancelAuthenticationChallenge (NSURLAuthenticationChallenge challenge);

		// @optional -(void)performDefaultHandlingForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
		[Export ("performDefaultHandlingForAuthenticationChallenge:")]
		void PerformDefaultHandlingForAuthenticationChallenge (NSURLAuthenticationChallenge challenge);

		// @optional -(void)rejectProtectionSpaceAndContinueWithChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
		[Export ("rejectProtectionSpaceAndContinueWithChallenge:")]
		void RejectProtectionSpaceAndContinueWithChallenge (NSURLAuthenticationChallenge challenge);
	}

	// @interface NSURLAuthenticationChallenge : NSObject <NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLAuthenticationChallenge : INSSecureCoding
	{
		// -(instancetype _Nonnull)initWithProtectionSpace:(NSURLProtectionSpace * _Nonnull)space proposedCredential:(NSURLCredential * _Nullable)credential previousFailureCount:(NSInteger)previousFailureCount failureResponse:(NSURLResponse * _Nullable)response error:(NSError * _Nullable)error sender:(id<NSURLAuthenticationChallengeSender> _Nonnull)sender;
		[Export ("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:")]
		NativeHandle Constructor (NSURLProtectionSpace space, [NullAllowed] NSURLCredential credential, nint previousFailureCount, [NullAllowed] NSURLResponse response, [NullAllowed] NSError error, NSURLAuthenticationChallengeSender sender);

		// -(instancetype _Nonnull)initWithAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge sender:(id<NSURLAuthenticationChallengeSender> _Nonnull)sender;
		[Export ("initWithAuthenticationChallenge:sender:")]
		NativeHandle Constructor (NSURLAuthenticationChallenge challenge, NSURLAuthenticationChallengeSender sender);

		// @property (readonly, copy) NSURLProtectionSpace * _Nonnull protectionSpace;
		[Export ("protectionSpace", ArgumentSemantic.Copy)]
		NSURLProtectionSpace ProtectionSpace { get; }

		// @property (readonly, copy) NSURLCredential * _Nullable proposedCredential;
		[NullAllowed, Export ("proposedCredential", ArgumentSemantic.Copy)]
		NSURLCredential ProposedCredential { get; }

		// @property (readonly) NSInteger previousFailureCount;
		[Export ("previousFailureCount")]
		nint PreviousFailureCount { get; }

		// @property (readonly, copy) NSURLResponse * _Nullable failureResponse;
		[NullAllowed, Export ("failureResponse", ArgumentSemantic.Copy)]
		NSURLResponse FailureResponse { get; }

		// @property (readonly, copy) NSError * _Nullable error;
		[NullAllowed, Export ("error", ArgumentSemantic.Copy)]
		NSError Error { get; }

		// @property (readonly, retain) id<NSURLAuthenticationChallengeSender> _Nullable sender;
		[NullAllowed, Export ("sender", ArgumentSemantic.Retain)]
		NSURLAuthenticationChallengeSender Sender { get; }
	}

	// @interface NSCachedURLResponse : NSObject <NSSecureCoding, NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSCachedURLResponse : INSSecureCoding, INSCopying
	{
		// -(instancetype _Nonnull)initWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nonnull)data;
		[Export ("initWithResponse:data:")]
		NativeHandle Constructor (NSURLResponse response, NSData data);

		// -(instancetype _Nonnull)initWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nonnull)data userInfo:(NSDictionary * _Nullable)userInfo storagePolicy:(NSURLCacheStoragePolicy)storagePolicy;
		[Export ("initWithResponse:data:userInfo:storagePolicy:")]
		NativeHandle Constructor (NSURLResponse response, NSData data, [NullAllowed] NSDictionary userInfo, NSURLCacheStoragePolicy storagePolicy);

		// @property (readonly, copy) NSURLResponse * _Nonnull response;
		[Export ("response", ArgumentSemantic.Copy)]
		NSURLResponse Response { get; }

		// @property (readonly, copy) NSData * _Nonnull data;
		[Export ("data", ArgumentSemantic.Copy)]
		NSData Data { get; }

		// @property (readonly, copy) NSDictionary * _Nullable userInfo;
		[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary UserInfo { get; }

		// @property (readonly) NSURLCacheStoragePolicy storagePolicy;
		[Export ("storagePolicy")]
		NSURLCacheStoragePolicy StoragePolicy { get; }
	}

	// @interface NSURLCache : NSObject
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLCache
	{
		// @property (strong, class) NSURLCache * _Nonnull sharedURLCache;
		[Static]
		[Export ("sharedURLCache", ArgumentSemantic.Strong)]
		NSURLCache SharedURLCache { get; set; }

		// -(instancetype _Nonnull)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(NSString * _Nullable)path __attribute__((availability(macos, introduced=10.2, deprecated=100000))) __attribute__((availability(ios, introduced=2.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 2)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("initWithMemoryCapacity:diskCapacity:diskPath:")]
		NativeHandle Constructor (nuint memoryCapacity, nuint diskCapacity, [NullAllowed] string path);

		// -(instancetype _Nonnull)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity directoryURL:(NSURL * _Nullable)directoryURL __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("initWithMemoryCapacity:diskCapacity:directoryURL:")]
		NativeHandle Constructor (nuint memoryCapacity, nuint diskCapacity, [NullAllowed] NSURL directoryURL);

		// -(NSCachedURLResponse * _Nullable)cachedResponseForRequest:(NSURLRequest * _Nonnull)request;
		[Export ("cachedResponseForRequest:")]
		[return: NullAllowed]
		NSCachedURLResponse CachedResponseForRequest (NSURLRequest request);

		// -(void)storeCachedResponse:(NSCachedURLResponse * _Nonnull)cachedResponse forRequest:(NSURLRequest * _Nonnull)request;
		[Export ("storeCachedResponse:forRequest:")]
		void StoreCachedResponse (NSCachedURLResponse cachedResponse, NSURLRequest request);

		// -(void)removeCachedResponseForRequest:(NSURLRequest * _Nonnull)request;
		[Export ("removeCachedResponseForRequest:")]
		void RemoveCachedResponseForRequest (NSURLRequest request);

		// -(void)removeAllCachedResponses;
		[Export ("removeAllCachedResponses")]
		void RemoveAllCachedResponses ();

		// -(void)removeCachedResponsesSinceDate:(NSDate * _Nonnull)date __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("removeCachedResponsesSinceDate:")]
		void RemoveCachedResponsesSinceDate (NSDate date);

		// @property NSUInteger memoryCapacity;
		[Export ("memoryCapacity")]
		nuint MemoryCapacity { get; set; }

		// @property NSUInteger diskCapacity;
		[Export ("diskCapacity")]
		nuint DiskCapacity { get; set; }

		// @property (readonly) NSUInteger currentMemoryUsage;
		[Export ("currentMemoryUsage")]
		nuint CurrentMemoryUsage { get; }

		// @property (readonly) NSUInteger currentDiskUsage;
		[Export ("currentDiskUsage")]
		nuint CurrentDiskUsage { get; }
	}

	// @interface NSURLSessionTaskAdditions (NSURLCache)
	[Category]
	[BaseType (typeof(NSURLCache))]
	interface NSURLCache_NSURLSessionTaskAdditions
	{
		// -(void)storeCachedResponse:(NSCachedURLResponse * _Nonnull)cachedResponse forDataTask:(NSURLSessionDataTask * _Nonnull)dataTask __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("storeCachedResponse:forDataTask:")]
		void StoreCachedResponse (NSCachedURLResponse cachedResponse, NSURLSessionDataTask dataTask);

		// -(void)getCachedResponseForDataTask:(NSURLSessionDataTask * _Nonnull)dataTask completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("getCachedResponseForDataTask:completionHandler:")]
		void GetCachedResponseForDataTask (NSURLSessionDataTask dataTask, Action<NSCachedURLResponse> completionHandler);

		// -(void)removeCachedResponseForDataTask:(NSURLSessionDataTask * _Nonnull)dataTask __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("removeCachedResponseForDataTask:")]
		void RemoveCachedResponseForDataTask (NSURLSessionDataTask dataTask);
	}

	// @interface NSURLConnection : NSObject
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLConnection
	{
		// -(instancetype _Nullable)initWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate startImmediately:(BOOL)startImmediately __attribute__((availability(macos, introduced=10.5, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 5, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[NoWatch]
		[Export ("initWithRequest:delegate:startImmediately:")]
		NativeHandle Constructor (NSURLRequest request, [NullAllowed] NSObject @delegate, bool startImmediately);

		// -(instancetype _Nullable)initWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate __attribute__((availability(macos, introduced=10.3, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 3, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[NoWatch]
		[Export ("initWithRequest:delegate:")]
		NativeHandle Constructor (NSURLRequest request, [NullAllowed] NSObject @delegate);

		// +(NSURLConnection * _Nullable)connectionWithRequest:(NSURLRequest * _Nonnull)request delegate:(id _Nullable)delegate __attribute__((availability(macos, introduced=10.3, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 3, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use NSURLSession (see NSURLSession.h)")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLSession (see NSURLSession.h)")]
		[NoWatch]
		[Static]
		[Export ("connectionWithRequest:delegate:")]
		[return: NullAllowed]
		NSURLConnection ConnectionWithRequest (NSURLRequest request, [NullAllowed] NSObject @delegate);

		// @property (readonly, copy) NSURLRequest * _Nonnull originalRequest __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (5, 0)]
		[Export ("originalRequest", ArgumentSemantic.Copy)]
		NSURLRequest OriginalRequest { get; }

		// @property (readonly, copy) NSURLRequest * _Nonnull currentRequest __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (5, 0)]
		[Export ("currentRequest", ArgumentSemantic.Copy)]
		NSURLRequest CurrentRequest { get; }

		// -(void)start __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("start")]
		void Start ();

		// -(void)cancel;
		[Export ("cancel")]
		void Cancel ();

		// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("scheduleInRunLoop:forMode:")]
		void ScheduleInRunLoop (NSRunLoop aRunLoop, string mode);

		// -(void)unscheduleFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("unscheduleFromRunLoop:forMode:")]
		void UnscheduleFromRunLoop (NSRunLoop aRunLoop, string mode);

		// -(void)setDelegateQueue:(NSOperationQueue * _Nullable)queue __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("setDelegateQueue:")]
		void SetDelegateQueue ([NullAllowed] NSOperationQueue queue);

		// +(BOOL)canHandleRequest:(NSURLRequest * _Nonnull)request;
		[Static]
		[Export ("canHandleRequest:")]
		bool CanHandleRequest (NSURLRequest request);
	}

	// @protocol NSURLConnectionDelegate <NSObject>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSURLConnectionDelegate
	{
		// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didFailWithError:(NSError * _Nonnull)error;
		[Export ("connection:didFailWithError:")]
		void Connection (NSURLConnection connection, NSError error);

		// @optional -(BOOL)connectionShouldUseCredentialStorage:(NSURLConnection * _Nonnull)connection;
		[Export ("connectionShouldUseCredentialStorage:")]
		bool ConnectionShouldUseCredentialStorage (NSURLConnection connection);

		// @optional -(void)connection:(NSURLConnection * _Nonnull)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
		[Export ("connection:willSendRequestForAuthenticationChallenge:")]
		void Connection (NSURLConnection connection, NSURLAuthenticationChallenge challenge);

		// @optional -(BOOL)connection:(NSURLConnection * _Nonnull)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace __attribute__((availability(macos, introduced=10.6, deprecated=10.10))) __attribute__((availability(ios, introduced=3.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 6, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.iOS, 3, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Export ("connection:canAuthenticateAgainstProtectionSpace:")]
		bool Connection (NSURLConnection connection, NSURLProtectionSpace protectionSpace);

		// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge __attribute__((availability(macos, introduced=10.2, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Export ("connection:didReceiveAuthenticationChallenge:")]
		void Connection (NSURLConnection connection, NSURLAuthenticationChallenge challenge);

		// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge __attribute__((availability(macos, introduced=10.2, deprecated=10.10))) __attribute__((availability(ios, introduced=2.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 10, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -connection:willSendRequestForAuthenticationChallenge: instead.")]
		[Export ("connection:didCancelAuthenticationChallenge:")]
		void Connection (NSURLConnection connection, NSURLAuthenticationChallenge challenge);
	}

	// @protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	interface NSURLConnectionDataDelegate : INSURLConnectionDelegate
	{
		// @optional -(NSURLRequest * _Nullable)connection:(NSURLConnection * _Nonnull)connection willSendRequest:(NSURLRequest * _Nonnull)request redirectResponse:(NSURLResponse * _Nullable)response;
		[Export ("connection:willSendRequest:redirectResponse:")]
		[return: NullAllowed]
		NSURLRequest Connection (NSURLConnection connection, NSURLRequest request, [NullAllowed] NSURLResponse response);

		// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveResponse:(NSURLResponse * _Nonnull)response;
		[Export ("connection:didReceiveResponse:")]
		void Connection (NSURLConnection connection, NSURLResponse response);

		// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didReceiveData:(NSData * _Nonnull)data;
		[Export ("connection:didReceiveData:")]
		void Connection (NSURLConnection connection, NSData data);

		// @optional -(NSInputStream * _Nullable)connection:(NSURLConnection * _Nonnull)connection needNewBodyStream:(NSURLRequest * _Nonnull)request;
		[Export ("connection:needNewBodyStream:")]
		[return: NullAllowed]
		NSInputStream Connection (NSURLConnection connection, NSURLRequest request);

		// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didSendBodyData:(NSInteger)bytesWritten totalBytesWritten:(NSInteger)totalBytesWritten totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite;
		[Export ("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:")]
		void Connection (NSURLConnection connection, nint bytesWritten, nint totalBytesWritten, nint totalBytesExpectedToWrite);

		// @optional -(NSCachedURLResponse * _Nullable)connection:(NSURLConnection * _Nonnull)connection willCacheResponse:(NSCachedURLResponse * _Nonnull)cachedResponse;
		[Export ("connection:willCacheResponse:")]
		[return: NullAllowed]
		NSCachedURLResponse Connection (NSURLConnection connection, NSCachedURLResponse cachedResponse);

		// @optional -(void)connectionDidFinishLoading:(NSURLConnection * _Nonnull)connection;
		[Export ("connectionDidFinishLoading:")]
		void ConnectionDidFinishLoading (NSURLConnection connection);
	}

	// @protocol NSURLConnectionDownloadDelegate <NSURLConnectionDelegate>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	interface NSURLConnectionDownloadDelegate : INSURLConnectionDelegate
	{
		// @optional -(void)connection:(NSURLConnection * _Nonnull)connection didWriteData:(long long)bytesWritten totalBytesWritten:(long long)totalBytesWritten expectedTotalBytes:(long long)expectedTotalBytes;
		[Export ("connection:didWriteData:totalBytesWritten:expectedTotalBytes:")]
		void Connection (NSURLConnection connection, long bytesWritten, long totalBytesWritten, long expectedTotalBytes);

		// @optional -(void)connectionDidResumeDownloading:(NSURLConnection * _Nonnull)connection totalBytesWritten:(long long)totalBytesWritten expectedTotalBytes:(long long)expectedTotalBytes;
		[Export ("connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:")]
		void ConnectionDidResumeDownloading (NSURLConnection connection, long totalBytesWritten, long expectedTotalBytes);

		// @required -(void)connectionDidFinishDownloading:(NSURLConnection * _Nonnull)connection destinationURL:(NSURL * _Nonnull)destinationURL;
		[Abstract]
		[Export ("connectionDidFinishDownloading:destinationURL:")]
		void ConnectionDidFinishDownloading (NSURLConnection connection, NSURL destinationURL);
	}

	// @interface NSURLConnectionSynchronousLoading (NSURLConnection)
	[Category]
	[BaseType (typeof(NSURLConnection))]
	interface NSURLConnection_NSURLConnectionSynchronousLoading
	{
		// +(NSData * _Nullable)sendSynchronousRequest:(NSURLRequest * _Nonnull)request returningResponse:(NSURLResponse * _Nullable * _Nullable)response error:(NSError * _Nullable * _Nullable)error __attribute__((availability(macos, introduced=10.3, deprecated=10.11))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 3, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[NoWatch]
		[Static]
		[Export ("sendSynchronousRequest:returningResponse:error:")]
		[return: NullAllowed]
		NSData SendSynchronousRequest (NSURLRequest request, [NullAllowed] out NSURLResponse response, [NullAllowed] out NSError error);
	}

	// @interface NSURLConnectionQueuedLoading (NSURLConnection)
	[Category]
	[BaseType (typeof(NSURLConnection))]
	interface NSURLConnection_NSURLConnectionQueuedLoading
	{
		// +(void)sendAsynchronousRequest:(NSURLRequest * _Nonnull)request queue:(NSOperationQueue * _Nonnull)queue completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSData * _Nullable, NSError * _Nullable))handler __attribute__((availability(macos, introduced=10.7, deprecated=10.11))) __attribute__((availability(ios, introduced=5.0, deprecated=9.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Introduced (PlatformName.iOS, 5, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use [NSURLSession dataTaskWithRequest:completionHandler:] (see NSURLSession.h")]
		[NoWatch]
		[Static]
		[Export ("sendAsynchronousRequest:queue:completionHandler:")]
		void SendAsynchronousRequest (NSURLRequest request, NSOperationQueue queue, Action<NSURLResponse, NSData, NSError> handler);
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef _Nonnull kSecClass __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecClass", "__Internal")]
		unsafe CFStringRef* kSecClass { get; }

		// extern const CFStringRef _Nonnull kSecClassInternetPassword __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecClassInternetPassword", "__Internal")]
		unsafe CFStringRef* kSecClassInternetPassword { get; }

		// extern const CFStringRef _Nonnull kSecClassGenericPassword __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 7), iOS (2, 0)]
		[Field ("kSecClassGenericPassword", "__Internal")]
		unsafe CFStringRef* kSecClassGenericPassword { get; }

		// extern const CFStringRef _Nonnull kSecClassCertificate __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 7), iOS (2, 0)]
		[Field ("kSecClassCertificate", "__Internal")]
		unsafe CFStringRef* kSecClassCertificate { get; }

		// extern const CFStringRef _Nonnull kSecClassKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 7), iOS (2, 0)]
		[Field ("kSecClassKey", "__Internal")]
		unsafe CFStringRef* kSecClassKey { get; }

		// extern const CFStringRef _Nonnull kSecClassIdentity __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 7), iOS (2, 0)]
		[Field ("kSecClassIdentity", "__Internal")]
		unsafe CFStringRef* kSecClassIdentity { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessible __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=4.0)));
		[Mac (10, 9), iOS (4, 0)]
		[Field ("kSecAttrAccessible", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessible { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccess __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrAccess", "__Internal")]
		unsafe CFStringRef* kSecAttrAccess { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessControl __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10, 10), iOS (8, 0)]
		[Field ("kSecAttrAccessControl", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessControl { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessGroup __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=3.0)));
		[Mac (10, 9), iOS (3, 0)]
		[Field ("kSecAttrAccessGroup", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessGroup { get; }

		// extern const CFStringRef _Nonnull kSecAttrSynchronizable __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10, 9), iOS (7, 0)]
		[Field ("kSecAttrSynchronizable", "__Internal")]
		unsafe CFStringRef* kSecAttrSynchronizable { get; }

		// extern const CFStringRef _Nonnull kSecAttrSynchronizableAny __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0)));
		[Mac (10, 9), iOS (7, 0)]
		[Field ("kSecAttrSynchronizableAny", "__Internal")]
		unsafe CFStringRef* kSecAttrSynchronizableAny { get; }

		// extern const CFStringRef _Nonnull kSecAttrCreationDate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCreationDate", "__Internal")]
		unsafe CFStringRef* kSecAttrCreationDate { get; }

		// extern const CFStringRef _Nonnull kSecAttrModificationDate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrModificationDate", "__Internal")]
		unsafe CFStringRef* kSecAttrModificationDate { get; }

		// extern const CFStringRef _Nonnull kSecAttrDescription __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrDescription", "__Internal")]
		unsafe CFStringRef* kSecAttrDescription { get; }

		// extern const CFStringRef _Nonnull kSecAttrComment __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrComment", "__Internal")]
		unsafe CFStringRef* kSecAttrComment { get; }

		// extern const CFStringRef _Nonnull kSecAttrCreator __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCreator", "__Internal")]
		unsafe CFStringRef* kSecAttrCreator { get; }

		// extern const CFStringRef _Nonnull kSecAttrType __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrType", "__Internal")]
		unsafe CFStringRef* kSecAttrType { get; }

		// extern const CFStringRef _Nonnull kSecAttrLabel __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrLabel", "__Internal")]
		unsafe CFStringRef* kSecAttrLabel { get; }

		// extern const CFStringRef _Nonnull kSecAttrIsInvisible __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrIsInvisible", "__Internal")]
		unsafe CFStringRef* kSecAttrIsInvisible { get; }

		// extern const CFStringRef _Nonnull kSecAttrIsNegative __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrIsNegative", "__Internal")]
		unsafe CFStringRef* kSecAttrIsNegative { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccount __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAccount", "__Internal")]
		unsafe CFStringRef* kSecAttrAccount { get; }

		// extern const CFStringRef _Nonnull kSecAttrService __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrService", "__Internal")]
		unsafe CFStringRef* kSecAttrService { get; }

		// extern const CFStringRef _Nonnull kSecAttrGeneric __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrGeneric", "__Internal")]
		unsafe CFStringRef* kSecAttrGeneric { get; }

		// extern const CFStringRef _Nonnull kSecAttrSecurityDomain __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrSecurityDomain", "__Internal")]
		unsafe CFStringRef* kSecAttrSecurityDomain { get; }

		// extern const CFStringRef _Nonnull kSecAttrServer __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrServer", "__Internal")]
		unsafe CFStringRef* kSecAttrServer { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocol __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocol", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocol { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationType __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationType", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationType { get; }

		// extern const CFStringRef _Nonnull kSecAttrPort __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrPort", "__Internal")]
		unsafe CFStringRef* kSecAttrPort { get; }

		// extern const CFStringRef _Nonnull kSecAttrPath __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrPath", "__Internal")]
		unsafe CFStringRef* kSecAttrPath { get; }

		// extern const CFStringRef _Nonnull kSecAttrSubject __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrSubject", "__Internal")]
		unsafe CFStringRef* kSecAttrSubject { get; }

		// extern const CFStringRef _Nonnull kSecAttrIssuer __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrIssuer", "__Internal")]
		unsafe CFStringRef* kSecAttrIssuer { get; }

		// extern const CFStringRef _Nonnull kSecAttrSerialNumber __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrSerialNumber", "__Internal")]
		unsafe CFStringRef* kSecAttrSerialNumber { get; }

		// extern const CFStringRef _Nonnull kSecAttrSubjectKeyID __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrSubjectKeyID", "__Internal")]
		unsafe CFStringRef* kSecAttrSubjectKeyID { get; }

		// extern const CFStringRef _Nonnull kSecAttrPublicKeyHash __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrPublicKeyHash", "__Internal")]
		unsafe CFStringRef* kSecAttrPublicKeyHash { get; }

		// extern const CFStringRef _Nonnull kSecAttrCertificateType __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCertificateType", "__Internal")]
		unsafe CFStringRef* kSecAttrCertificateType { get; }

		// extern const CFStringRef _Nonnull kSecAttrCertificateEncoding __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCertificateEncoding", "__Internal")]
		unsafe CFStringRef* kSecAttrCertificateEncoding { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyClass __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrKeyClass", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyClass { get; }

		// extern const CFStringRef _Nonnull kSecAttrApplicationLabel __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrApplicationLabel", "__Internal")]
		unsafe CFStringRef* kSecAttrApplicationLabel { get; }

		// extern const CFStringRef _Nonnull kSecAttrIsPermanent __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrIsPermanent", "__Internal")]
		unsafe CFStringRef* kSecAttrIsPermanent { get; }

		// extern const CFStringRef _Nonnull kSecAttrIsSensitive __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrIsSensitive", "__Internal")]
		unsafe CFStringRef* kSecAttrIsSensitive { get; }

		// extern const CFStringRef _Nonnull kSecAttrIsExtractable __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrIsExtractable", "__Internal")]
		unsafe CFStringRef* kSecAttrIsExtractable { get; }

		// extern const CFStringRef _Nonnull kSecAttrApplicationTag __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrApplicationTag", "__Internal")]
		unsafe CFStringRef* kSecAttrApplicationTag { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyType __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrKeyType", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyType { get; }

		// extern const CFStringRef _Nonnull kSecAttrPRF __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrPRF", "__Internal")]
		unsafe CFStringRef* kSecAttrPRF { get; }

		// extern const CFStringRef _Nonnull kSecAttrSalt __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrSalt", "__Internal")]
		unsafe CFStringRef* kSecAttrSalt { get; }

		// extern const CFStringRef _Nonnull kSecAttrRounds __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrRounds", "__Internal")]
		unsafe CFStringRef* kSecAttrRounds { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeySizeInBits __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrKeySizeInBits", "__Internal")]
		unsafe CFStringRef* kSecAttrKeySizeInBits { get; }

		// extern const CFStringRef _Nonnull kSecAttrEffectiveKeySize __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrEffectiveKeySize", "__Internal")]
		unsafe CFStringRef* kSecAttrEffectiveKeySize { get; }

		// extern const CFStringRef _Nonnull kSecAttrCanEncrypt __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCanEncrypt", "__Internal")]
		unsafe CFStringRef* kSecAttrCanEncrypt { get; }

		// extern const CFStringRef _Nonnull kSecAttrCanDecrypt __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCanDecrypt", "__Internal")]
		unsafe CFStringRef* kSecAttrCanDecrypt { get; }

		// extern const CFStringRef _Nonnull kSecAttrCanDerive __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCanDerive", "__Internal")]
		unsafe CFStringRef* kSecAttrCanDerive { get; }

		// extern const CFStringRef _Nonnull kSecAttrCanSign __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCanSign", "__Internal")]
		unsafe CFStringRef* kSecAttrCanSign { get; }

		// extern const CFStringRef _Nonnull kSecAttrCanVerify __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCanVerify", "__Internal")]
		unsafe CFStringRef* kSecAttrCanVerify { get; }

		// extern const CFStringRef _Nonnull kSecAttrCanWrap __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCanWrap", "__Internal")]
		unsafe CFStringRef* kSecAttrCanWrap { get; }

		// extern const CFStringRef _Nonnull kSecAttrCanUnwrap __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrCanUnwrap", "__Internal")]
		unsafe CFStringRef* kSecAttrCanUnwrap { get; }

		// extern const CFStringRef _Nonnull kSecAttrSyncViewHint __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0)));
		[Mac (10, 11), iOS (9, 0)]
		[Field ("kSecAttrSyncViewHint", "__Internal")]
		unsafe CFStringRef* kSecAttrSyncViewHint { get; }

		// extern const CFStringRef _Nonnull kSecAttrTokenID __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=9.0)));
		[Mac (10, 12), iOS (9, 0)]
		[Field ("kSecAttrTokenID", "__Internal")]
		unsafe CFStringRef* kSecAttrTokenID { get; }

		// extern const CFStringRef _Nonnull kSecAttrPersistantReference __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecAttrPersistantReference", "__Internal")]
		unsafe CFStringRef* kSecAttrPersistantReference { get; }

		// extern const CFStringRef _Nonnull kSecAttrPersistentReference __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecAttrPersistentReference", "__Internal")]
		unsafe CFStringRef* kSecAttrPersistentReference { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessibleWhenUnlocked __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=4.0)));
		[Mac (10, 9), iOS (4, 0)]
		[Field ("kSecAttrAccessibleWhenUnlocked", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessibleWhenUnlocked { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessibleAfterFirstUnlock __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=4.0)));
		[Mac (10, 9), iOS (4, 0)]
		[Field ("kSecAttrAccessibleAfterFirstUnlock", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessibleAfterFirstUnlock { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessibleAlways __attribute__((availability(macos, introduced=10.9, deprecated=10.14))) __attribute__((availability(ios, introduced=4.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Use an accessibility level that provides some user protection, such as kSecAttrAccessibleAfterFirstUnlock")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use an accessibility level that provides some user protection, such as kSecAttrAccessibleAfterFirstUnlock")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use an accessibility level that provides some user protection, such as kSecAttrAccessibleAfterFirstUnlock")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use an accessibility level that provides some user protection, such as kSecAttrAccessibleAfterFirstUnlock")]
		[Field ("kSecAttrAccessibleAlways", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessibleAlways { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0)));
		[Mac (10, 10), iOS (8, 0)]
		[Field ("kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessibleWhenUnlockedThisDeviceOnly __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=4.0)));
		[Mac (10, 9), iOS (4, 0)]
		[Field ("kSecAttrAccessibleWhenUnlockedThisDeviceOnly", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessibleWhenUnlockedThisDeviceOnly { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=4.0)));
		[Mac (10, 9), iOS (4, 0)]
		[Field ("kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessibleAlwaysThisDeviceOnly __attribute__((availability(macos, introduced=10.9, deprecated=10.14))) __attribute__((availability(ios, introduced=4.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Use an accessibility level that provides some user protection, such as kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly")]
		[Deprecated (PlatformName.MacOSX, 10, 14, message: "Use an accessibility level that provides some user protection, such as kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly")]
		[Introduced (PlatformName.iOS, 4, 0, message: "Use an accessibility level that provides some user protection, such as kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use an accessibility level that provides some user protection, such as kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly")]
		[Field ("kSecAttrAccessibleAlwaysThisDeviceOnly", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessibleAlwaysThisDeviceOnly { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolFTP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolFTP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolFTP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolFTPAccount __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolFTPAccount", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolFTPAccount { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolHTTP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolHTTP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolHTTP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolIRC __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolIRC", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolIRC { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolNNTP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolNNTP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolNNTP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolPOP3 __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolPOP3", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolPOP3 { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolSMTP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolSMTP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolSMTP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolSOCKS __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolSOCKS", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolSOCKS { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolIMAP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolIMAP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolIMAP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolLDAP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolLDAP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolLDAP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolAppleTalk __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolAppleTalk", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolAppleTalk { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolAFP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolAFP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolAFP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolTelnet __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolTelnet", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolTelnet { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolSSH __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolSSH", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolSSH { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolFTPS __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolFTPS", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolFTPS { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolHTTPS __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolHTTPS", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolHTTPS { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolHTTPProxy __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolHTTPProxy", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolHTTPProxy { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolHTTPSProxy __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolHTTPSProxy", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolHTTPSProxy { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolFTPProxy __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolFTPProxy", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolFTPProxy { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolSMB __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolSMB", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolSMB { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolRTSP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolRTSP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolRTSP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolRTSPProxy __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolRTSPProxy", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolRTSPProxy { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolDAAP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolDAAP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolDAAP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolEPPC __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolEPPC", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolEPPC { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolIPP __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolIPP", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolIPP { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolNNTPS __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolNNTPS", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolNNTPS { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolLDAPS __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolLDAPS", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolLDAPS { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolTelnetS __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolTelnetS", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolTelnetS { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolIMAPS __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolIMAPS", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolIMAPS { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolIRCS __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolIRCS", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolIRCS { get; }

		// extern const CFStringRef _Nonnull kSecAttrProtocolPOP3S __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrProtocolPOP3S", "__Internal")]
		unsafe CFStringRef* kSecAttrProtocolPOP3S { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeNTLM __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationTypeNTLM", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationTypeNTLM { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeMSN __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationTypeMSN", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationTypeMSN { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeDPA __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationTypeDPA", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationTypeDPA { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeRPA __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationTypeRPA", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationTypeRPA { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeHTTPBasic __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationTypeHTTPBasic", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationTypeHTTPBasic { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeHTTPDigest __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationTypeHTTPDigest", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationTypeHTTPDigest { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeHTMLForm __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationTypeHTMLForm", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationTypeHTMLForm { get; }

		// extern const CFStringRef _Nonnull kSecAttrAuthenticationTypeDefault __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecAttrAuthenticationTypeDefault", "__Internal")]
		unsafe CFStringRef* kSecAttrAuthenticationTypeDefault { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyClassPublic __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 7), iOS (2, 0)]
		[Field ("kSecAttrKeyClassPublic", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyClassPublic { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyClassPrivate __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 7), iOS (2, 0)]
		[Field ("kSecAttrKeyClassPrivate", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyClassPrivate { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyClassSymmetric __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 7), iOS (2, 0)]
		[Field ("kSecAttrKeyClassSymmetric", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyClassSymmetric { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeRSA __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 7), iOS (2, 0)]
		[Field ("kSecAttrKeyTypeRSA", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeRSA { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeDSA __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrKeyTypeDSA", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeDSA { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeAES __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrKeyTypeAES", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeAES { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeDES __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrKeyTypeDES", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeDES { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyType3DES __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrKeyType3DES", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyType3DES { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeRC4 __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrKeyTypeRC4", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeRC4 { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeRC2 __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrKeyTypeRC2", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeRC2 { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeCAST __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrKeyTypeCAST", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeCAST { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeECDSA __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrKeyTypeECDSA", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeECDSA { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeEC __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=4.0)));
		[Mac (10, 9), iOS (4, 0)]
		[Field ("kSecAttrKeyTypeEC", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeEC { get; }

		// extern const CFStringRef _Nonnull kSecAttrKeyTypeECSECPrimeRandom __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0)));
		[Mac (10, 12), iOS (10, 0)]
		[Field ("kSecAttrKeyTypeECSECPrimeRandom", "__Internal")]
		unsafe CFStringRef* kSecAttrKeyTypeECSECPrimeRandom { get; }

		// extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA1 __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrPRFHmacAlgSHA1", "__Internal")]
		unsafe CFStringRef* kSecAttrPRFHmacAlgSHA1 { get; }

		// extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA224 __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrPRFHmacAlgSHA224", "__Internal")]
		unsafe CFStringRef* kSecAttrPRFHmacAlgSHA224 { get; }

		// extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA256 __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrPRFHmacAlgSHA256", "__Internal")]
		unsafe CFStringRef* kSecAttrPRFHmacAlgSHA256 { get; }

		// extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA384 __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrPRFHmacAlgSHA384", "__Internal")]
		unsafe CFStringRef* kSecAttrPRFHmacAlgSHA384 { get; }

		// extern const CFStringRef _Nonnull kSecAttrPRFHmacAlgSHA512 __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecAttrPRFHmacAlgSHA512", "__Internal")]
		unsafe CFStringRef* kSecAttrPRFHmacAlgSHA512 { get; }

		// extern const CFStringRef _Nonnull kSecMatchPolicy __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchPolicy", "__Internal")]
		unsafe CFStringRef* kSecMatchPolicy { get; }

		// extern const CFStringRef _Nonnull kSecMatchItemList __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchItemList", "__Internal")]
		unsafe CFStringRef* kSecMatchItemList { get; }

		// extern const CFStringRef _Nonnull kSecMatchSearchList __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchSearchList", "__Internal")]
		unsafe CFStringRef* kSecMatchSearchList { get; }

		// extern const CFStringRef _Nonnull kSecMatchIssuers __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchIssuers", "__Internal")]
		unsafe CFStringRef* kSecMatchIssuers { get; }

		// extern const CFStringRef _Nonnull kSecMatchEmailAddressIfPresent __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchEmailAddressIfPresent", "__Internal")]
		unsafe CFStringRef* kSecMatchEmailAddressIfPresent { get; }

		// extern const CFStringRef _Nonnull kSecMatchSubjectContains __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchSubjectContains", "__Internal")]
		unsafe CFStringRef* kSecMatchSubjectContains { get; }

		// extern const CFStringRef _Nonnull kSecMatchSubjectStartsWith __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecMatchSubjectStartsWith", "__Internal")]
		unsafe CFStringRef* kSecMatchSubjectStartsWith { get; }

		// extern const CFStringRef _Nonnull kSecMatchSubjectEndsWith __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecMatchSubjectEndsWith", "__Internal")]
		unsafe CFStringRef* kSecMatchSubjectEndsWith { get; }

		// extern const CFStringRef _Nonnull kSecMatchSubjectWholeString __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecMatchSubjectWholeString", "__Internal")]
		unsafe CFStringRef* kSecMatchSubjectWholeString { get; }

		// extern const CFStringRef _Nonnull kSecMatchCaseInsensitive __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchCaseInsensitive", "__Internal")]
		unsafe CFStringRef* kSecMatchCaseInsensitive { get; }

		// extern const CFStringRef _Nonnull kSecMatchDiacriticInsensitive __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecMatchDiacriticInsensitive", "__Internal")]
		unsafe CFStringRef* kSecMatchDiacriticInsensitive { get; }

		// extern const CFStringRef _Nonnull kSecMatchWidthInsensitive __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecMatchWidthInsensitive", "__Internal")]
		unsafe CFStringRef* kSecMatchWidthInsensitive { get; }

		// extern const CFStringRef _Nonnull kSecMatchTrustedOnly __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchTrustedOnly", "__Internal")]
		unsafe CFStringRef* kSecMatchTrustedOnly { get; }

		// extern const CFStringRef _Nonnull kSecMatchValidOnDate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchValidOnDate", "__Internal")]
		unsafe CFStringRef* kSecMatchValidOnDate { get; }

		// extern const CFStringRef _Nonnull kSecMatchLimit __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchLimit", "__Internal")]
		unsafe CFStringRef* kSecMatchLimit { get; }

		// extern const CFStringRef _Nonnull kSecMatchLimitOne __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchLimitOne", "__Internal")]
		unsafe CFStringRef* kSecMatchLimitOne { get; }

		// extern const CFStringRef _Nonnull kSecMatchLimitAll __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecMatchLimitAll", "__Internal")]
		unsafe CFStringRef* kSecMatchLimitAll { get; }

		// extern const CFStringRef _Nonnull kSecReturnData __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecReturnData", "__Internal")]
		unsafe CFStringRef* kSecReturnData { get; }

		// extern const CFStringRef _Nonnull kSecReturnAttributes __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecReturnAttributes", "__Internal")]
		unsafe CFStringRef* kSecReturnAttributes { get; }

		// extern const CFStringRef _Nonnull kSecReturnRef __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecReturnRef", "__Internal")]
		unsafe CFStringRef* kSecReturnRef { get; }

		// extern const CFStringRef _Nonnull kSecReturnPersistentRef __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecReturnPersistentRef", "__Internal")]
		unsafe CFStringRef* kSecReturnPersistentRef { get; }

		// extern const CFStringRef _Nonnull kSecValueData __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecValueData", "__Internal")]
		unsafe CFStringRef* kSecValueData { get; }

		// extern const CFStringRef _Nonnull kSecValueRef __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecValueRef", "__Internal")]
		unsafe CFStringRef* kSecValueRef { get; }

		// extern const CFStringRef _Nonnull kSecValuePersistentRef __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecValuePersistentRef", "__Internal")]
		unsafe CFStringRef* kSecValuePersistentRef { get; }

		// extern API_AVAILABLE(macos(10.6)) const CFStringRef kSecUseItemList __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0, deprecated=12.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=1.0, deprecated=5.0))) __attribute__((availability(maccatalyst, introduced=13.0, deprecated=13.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Not implemented on this platform")]
		[Deprecated (PlatformName.iOS, 12, 0, message: "Not implemented on this platform")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not implemented on this platform")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Not implemented on this platform")]
		[Introduced (PlatformName.WatchOS, 1, 0, message: "Not implemented on this platform")]
		[Deprecated (PlatformName.WatchOS, 5, 0, message: "Not implemented on this platform")]
		[Introduced (PlatformName.MacCatalyst, 13, 0, message: "Not implemented on this platform")]
		[Deprecated (PlatformName.MacCatalyst, 13, 0, message: "Not implemented on this platform")]
		[Mac (10, 6)]
		[Field ("kSecUseItemList", "__Internal")]
		unsafe CFStringRef* kSecUseItemList { get; }

		// extern const CFStringRef _Nonnull kSecUseKeychain __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecUseKeychain", "__Internal")]
		unsafe CFStringRef* kSecUseKeychain { get; }

		// extern const CFStringRef _Nonnull kSecUseOperationPrompt __attribute__((availability(macos, introduced=10.10, deprecated=11.0))) __attribute__((availability(ios, introduced=8.0, deprecated=14.0)));
		[Introduced (PlatformName.MacOSX, 10, 10, message: "Use kSecUseAuthenticationContext and set LAContext.localizedReason property")]
		[Deprecated (PlatformName.MacOSX, 11, 0, message: "Use kSecUseAuthenticationContext and set LAContext.localizedReason property")]
		[Introduced (PlatformName.iOS, 8, 0, message: "Use kSecUseAuthenticationContext and set LAContext.localizedReason property")]
		[Deprecated (PlatformName.iOS, 14, 0, message: "Use kSecUseAuthenticationContext and set LAContext.localizedReason property")]
		[Field ("kSecUseOperationPrompt", "__Internal")]
		unsafe CFStringRef* kSecUseOperationPrompt { get; }

		// extern const CFStringRef _Nonnull kSecUseNoAuthenticationUI __attribute__((availability(macos, introduced=10.10, deprecated=10.11))) __attribute__((availability(ios, introduced=8.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 10, message: "Use kSecUseAuthenticationUI instead.")]
		[Deprecated (PlatformName.MacOSX, 10, 11, message: "Use kSecUseAuthenticationUI instead.")]
		[Introduced (PlatformName.iOS, 8, 0, message: "Use kSecUseAuthenticationUI instead.")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use kSecUseAuthenticationUI instead.")]
		[Field ("kSecUseNoAuthenticationUI", "__Internal")]
		unsafe CFStringRef* kSecUseNoAuthenticationUI { get; }

		// extern const CFStringRef _Nonnull kSecUseAuthenticationUI __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0)));
		[Mac (10, 11), iOS (9, 0)]
		[Field ("kSecUseAuthenticationUI", "__Internal")]
		unsafe CFStringRef* kSecUseAuthenticationUI { get; }

		// extern const CFStringRef _Nonnull kSecUseAuthenticationContext __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0)));
		[Mac (10, 11), iOS (9, 0)]
		[Field ("kSecUseAuthenticationContext", "__Internal")]
		unsafe CFStringRef* kSecUseAuthenticationContext { get; }

		// extern const CFStringRef _Nonnull kSecUseDataProtectionKeychain __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0)));
		[Mac (10, 15), iOS (13, 0)]
		[Field ("kSecUseDataProtectionKeychain", "__Internal")]
		unsafe CFStringRef* kSecUseDataProtectionKeychain { get; }

		// extern API_AVAILABLE(tvos(16.0)) const CFStringRef kSecUseUserIndependentKeychain __attribute__((availability(tvos, introduced=16.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(maccatalyst, unavailable)));
		[TV (16, 0), NoWatch, NoMacCatalyst, NoMac, NoiOS]
		[Field ("kSecUseUserIndependentKeychain", "__Internal")]
		unsafe CFStringRef* kSecUseUserIndependentKeychain { get; }

		// extern const CFStringRef _Nonnull kSecUseAuthenticationUIAllow __attribute__((availability(macos, introduced=10.11, deprecated=11.0))) __attribute__((availability(ios, introduced=9.0, deprecated=14.0)));
		[Introduced (PlatformName.MacOSX, 10, 11, message: "Instead of kSecUseAuthenticationUI, use kSecUseAuthenticationContext and set LAContext.interactionNotAllowed property")]
		[Deprecated (PlatformName.MacOSX, 11, 0, message: "Instead of kSecUseAuthenticationUI, use kSecUseAuthenticationContext and set LAContext.interactionNotAllowed property")]
		[Introduced (PlatformName.iOS, 9, 0, message: "Instead of kSecUseAuthenticationUI, use kSecUseAuthenticationContext and set LAContext.interactionNotAllowed property")]
		[Deprecated (PlatformName.iOS, 14, 0, message: "Instead of kSecUseAuthenticationUI, use kSecUseAuthenticationContext and set LAContext.interactionNotAllowed property")]
		[Field ("kSecUseAuthenticationUIAllow", "__Internal")]
		unsafe CFStringRef* kSecUseAuthenticationUIAllow { get; }

		// extern const CFStringRef _Nonnull kSecUseAuthenticationUIFail __attribute__((availability(macos, introduced=10.11, deprecated=11.0))) __attribute__((availability(ios, introduced=9.0, deprecated=14.0)));
		[Introduced (PlatformName.MacOSX, 10, 11, message: "Instead of kSecUseAuthenticationUI, use kSecUseAuthenticationContext and set LAContext.interactionNotAllowed property")]
		[Deprecated (PlatformName.MacOSX, 11, 0, message: "Instead of kSecUseAuthenticationUI, use kSecUseAuthenticationContext and set LAContext.interactionNotAllowed property")]
		[Introduced (PlatformName.iOS, 9, 0, message: "Instead of kSecUseAuthenticationUI, use kSecUseAuthenticationContext and set LAContext.interactionNotAllowed property")]
		[Deprecated (PlatformName.iOS, 14, 0, message: "Instead of kSecUseAuthenticationUI, use kSecUseAuthenticationContext and set LAContext.interactionNotAllowed property")]
		[Field ("kSecUseAuthenticationUIFail", "__Internal")]
		unsafe CFStringRef* kSecUseAuthenticationUIFail { get; }

		// extern const CFStringRef _Nonnull kSecUseAuthenticationUISkip __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0)));
		[Mac (10, 11), iOS (9, 0)]
		[Field ("kSecUseAuthenticationUISkip", "__Internal")]
		unsafe CFStringRef* kSecUseAuthenticationUISkip { get; }

		// extern const CFStringRef _Nonnull kSecAttrTokenIDSecureEnclave __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=9.0)));
		[Mac (10, 12), iOS (9, 0)]
		[Field ("kSecAttrTokenIDSecureEnclave", "__Internal")]
		unsafe CFStringRef* kSecAttrTokenIDSecureEnclave { get; }

		// extern const CFStringRef _Nonnull kSecAttrAccessGroupToken __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0)));
		[Mac (10, 12), iOS (10, 0)]
		[Field ("kSecAttrAccessGroupToken", "__Internal")]
		unsafe CFStringRef* kSecAttrAccessGroupToken { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef _Nonnull kSecPrivateKeyAttrs __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=4.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1, 0), TV (4, 0), Mac (10, 8), iOS (2, 0)]
		[Field ("kSecPrivateKeyAttrs", "__Internal")]
		unsafe CFStringRef* kSecPrivateKeyAttrs { get; }

		// extern const CFStringRef _Nonnull kSecPublicKeyAttrs __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=4.0))) __attribute__((availability(watchos, introduced=1.0)));
		[Watch (1, 0), TV (4, 0), Mac (10, 8), iOS (2, 0)]
		[Field ("kSecPublicKeyAttrs", "__Internal")]
		unsafe CFStringRef* kSecPublicKeyAttrs { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureRaw __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureRaw", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureRaw { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA1 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPSSSHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA224 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPSSSHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA256 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPSSSHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA384 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPSSSHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureDigestPSSSHA512 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureDigestPSSSHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureDigestPSSSHA512 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA1 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePSSSHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA224 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePSSSHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA256 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePSSSHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA384 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePSSSHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSASignatureMessagePSSSHA512 __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmRSASignatureMessagePSSSHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSASignatureMessagePSSSHA512 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureRFC4754 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureRFC4754", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureRFC4754 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureDigestX962", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA1 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureDigestX962SHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA224 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureDigestX962SHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA256 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureDigestX962SHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA384 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureDigestX962SHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureDigestX962SHA512 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureDigestX962SHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureDigestX962SHA512 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA1 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureMessageX962SHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA224 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureMessageX962SHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA256 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureMessageX962SHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA384 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureMessageX962SHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDSASignatureMessageX962SHA512 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDSASignatureMessageX962SHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDSASignatureMessageX962SHA512 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionRaw __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionRaw", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionRaw { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionPKCS1 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionPKCS1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionPKCS1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA1 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA224 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA256 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA384 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA512 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA512 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(tvos, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Field ("kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandard __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeStandard", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandard { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactor __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeCofactor", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactor { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384 { get; }

		// extern const SecKeyAlgorithm _Nonnull kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512 __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512", "__Internal")]
		unsafe SecKeyAlgorithm* kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512 { get; }

		// extern const SecKeyKeyExchangeParameter _Nonnull kSecKeyKeyExchangeParameterRequestedSize __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyKeyExchangeParameterRequestedSize", "__Internal")]
		unsafe SecKeyKeyExchangeParameter* kSecKeyKeyExchangeParameterRequestedSize { get; }

		// extern const SecKeyKeyExchangeParameter _Nonnull kSecKeyKeyExchangeParameterSharedInfo __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(tvos, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[Field ("kSecKeyKeyExchangeParameterSharedInfo", "__Internal")]
		unsafe SecKeyKeyExchangeParameter* kSecKeyKeyExchangeParameterSharedInfo { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyAppleX509Basic __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleX509Basic", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleX509Basic { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyAppleSSL __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleSSL", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleSSL { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyAppleSMIME __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleSMIME", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleSMIME { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyAppleEAP __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleEAP", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleEAP { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyAppleIPsec __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleIPsec", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleIPsec { get; }

		// extern API_AVAILABLE(macos(10.7)) const CFStringRef kSecPolicyApplePKINITClient __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(maccatalyst, unavailable)));
		[NoWatch, NoTV, NoMacCatalyst, NoiOS, Mac (10, 7)]
		[Field ("kSecPolicyApplePKINITClient", "__Internal")]
		unsafe CFStringRef* kSecPolicyApplePKINITClient { get; }

		// extern API_AVAILABLE(macos(10.7)) const CFStringRef kSecPolicyApplePKINITServer __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(maccatalyst, unavailable)));
		[NoWatch, NoTV, NoMacCatalyst, NoiOS, Mac (10, 7)]
		[Field ("kSecPolicyApplePKINITServer", "__Internal")]
		unsafe CFStringRef* kSecPolicyApplePKINITServer { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyAppleCodeSigning __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleCodeSigning", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleCodeSigning { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_9_0) const CFStringRef kSecPolicyMacAppStoreReceipt __attribute__((availability(ios, introduced=9.0)));
		[iOS (9, 0)]
		[Field ("kSecPolicyMacAppStoreReceipt", "__Internal")]
		unsafe CFStringRef* kSecPolicyMacAppStoreReceipt { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyAppleIDValidation __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleIDValidation", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleIDValidation { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_7_0) const CFStringRef kSecPolicyAppleTimeStamping __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleTimeStamping", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleTimeStamping { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecPolicyAppleRevocation __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyAppleRevocation", "__Internal")]
		unsafe CFStringRef* kSecPolicyAppleRevocation { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecPolicyApplePassbookSigning __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyApplePassbookSigning", "__Internal")]
		unsafe CFStringRef* kSecPolicyApplePassbookSigning { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_9_0) const CFStringRef kSecPolicyApplePayIssuerEncryption __attribute__((availability(ios, introduced=9.0)));
		[iOS (9, 0)]
		[Field ("kSecPolicyApplePayIssuerEncryption", "__Internal")]
		unsafe CFStringRef* kSecPolicyApplePayIssuerEncryption { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyOid __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyOid", "__Internal")]
		unsafe CFStringRef* kSecPolicyOid { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyName __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyName", "__Internal")]
		unsafe CFStringRef* kSecPolicyName { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPolicyClient __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyClient", "__Internal")]
		unsafe CFStringRef* kSecPolicyClient { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecPolicyRevocationFlags __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyRevocationFlags", "__Internal")]
		unsafe CFStringRef* kSecPolicyRevocationFlags { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecPolicyTeamIdentifier __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPolicyTeamIdentifier", "__Internal")]
		unsafe CFStringRef* kSecPolicyTeamIdentifier { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_2_0) const SecRandomRef kSecRandomDefault __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kSecRandomDefault", "__Internal")]
		unsafe SecRandomRef* kSecRandomDefault { get; }

		// extern const CFStringRef _Nonnull kSecImportExportPassphrase __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecImportExportPassphrase", "__Internal")]
		unsafe CFStringRef* kSecImportExportPassphrase { get; }

		// extern const CFStringRef _Nonnull kSecImportExportKeychain __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecImportExportKeychain", "__Internal")]
		unsafe CFStringRef* kSecImportExportKeychain { get; }

		// extern const CFStringRef _Nonnull kSecImportExportAccess __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable)));
		[NoiOS, Mac (10, 7)]
		[Field ("kSecImportExportAccess", "__Internal")]
		unsafe CFStringRef* kSecImportExportAccess { get; }

		// extern const CFStringRef _Nonnull kSecImportItemLabel __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecImportItemLabel", "__Internal")]
		unsafe CFStringRef* kSecImportItemLabel { get; }

		// extern const CFStringRef _Nonnull kSecImportItemKeyID __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecImportItemKeyID", "__Internal")]
		unsafe CFStringRef* kSecImportItemKeyID { get; }

		// extern const CFStringRef _Nonnull kSecImportItemTrust __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecImportItemTrust", "__Internal")]
		unsafe CFStringRef* kSecImportItemTrust { get; }

		// extern const CFStringRef _Nonnull kSecImportItemCertChain __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecImportItemCertChain", "__Internal")]
		unsafe CFStringRef* kSecImportItemCertChain { get; }

		// extern const CFStringRef _Nonnull kSecImportItemIdentity __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=2.0)));
		[Mac (10, 6), iOS (2, 0)]
		[Field ("kSecImportItemIdentity", "__Internal")]
		unsafe CFStringRef* kSecImportItemIdentity { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPropertyTypeTitle __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPropertyTypeTitle", "__Internal")]
		unsafe CFStringRef* kSecPropertyTypeTitle { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_7_0) const CFStringRef kSecPropertyTypeError __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecPropertyTypeError", "__Internal")]
		unsafe CFStringRef* kSecPropertyTypeError { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecTrustEvaluationDate __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecTrustEvaluationDate", "__Internal")]
		unsafe CFStringRef* kSecTrustEvaluationDate { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecTrustExtendedValidation __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecTrustExtendedValidation", "__Internal")]
		unsafe CFStringRef* kSecTrustExtendedValidation { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecTrustOrganizationName __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecTrustOrganizationName", "__Internal")]
		unsafe CFStringRef* kSecTrustOrganizationName { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecTrustResultValue __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecTrustResultValue", "__Internal")]
		unsafe CFStringRef* kSecTrustResultValue { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecTrustRevocationChecked __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecTrustRevocationChecked", "__Internal")]
		unsafe CFStringRef* kSecTrustRevocationChecked { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0) const CFStringRef kSecTrustRevocationValidUntilDate __attribute__((availability(ios, introduced=7.0)));
		[iOS (7, 0)]
		[Field ("kSecTrustRevocationValidUntilDate", "__Internal")]
		unsafe CFStringRef* kSecTrustRevocationValidUntilDate { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_9_0) const CFStringRef kSecTrustCertificateTransparency __attribute__((availability(ios, introduced=9.0)));
		[iOS (9, 0)]
		[Field ("kSecTrustCertificateTransparency", "__Internal")]
		unsafe CFStringRef* kSecTrustCertificateTransparency { get; }

		// extern __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_13, __IPHONE_10_0, __IPHONE_11_0) const CFStringRef kSecTrustCertificateTransparencyWhiteList __attribute__((availability(ios, introduced=10.0, deprecated=11.0)));
		[Introduced (PlatformName.iOS, 10, 0)]
		[Deprecated (PlatformName.iOS, 11, 0)]
		[Field ("kSecTrustCertificateTransparencyWhiteList", "__Internal")]
		unsafe CFStringRef* kSecTrustCertificateTransparencyWhiteList { get; }
	}

	// typedef void (^SecTrustCallback)(SecTrustRef _Nonnull, SecTrustResultType);
	delegate void SecTrustCallback (SecTrust arg0, SecTrustResultType arg1);

	// typedef void (^SecTrustWithErrorCallback)(SecTrustRef _Nonnull, _Bool, CFErrorRef _Nullable);
	unsafe delegate void SecTrustWithErrorCallback (SecTrust arg0, bool arg1, [NullAllowed] CFErrorRef* arg2);

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef _Nonnull kSecSharedPassword __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(maccatalyst, introduced=14.0))) __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV, MacCatalyst (14, 0), Mac (11, 0), iOS (8, 0)]
		[Field ("kSecSharedPassword", "__Internal")]
		unsafe CFStringRef* kSecSharedPassword { get; }
	}

	// @protocol OS_sec_object <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface OS_sec_object
	{
	}

	// @protocol OS_sec_trust <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface OS_sec_trust
	{
	}

	// @protocol OS_sec_identity <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface OS_sec_identity
	{
	}

	// @protocol OS_sec_certificate <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface OS_sec_certificate
	{
	}

	// @protocol OS_sec_protocol_metadata <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface OS_sec_protocol_metadata
	{
	}

	// @protocol OS_sec_protocol_options <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface OS_sec_protocol_options
	{
	}

	// typedef void (^sec_protocol_pre_shared_key_selection_complete_t)(dispatch_data_t _Nullable);
	delegate void sec_protocol_pre_shared_key_selection_complete_t ([NullAllowed] DispatchData arg0);

	// typedef void (^sec_protocol_pre_shared_key_selection_t)(sec_protocol_metadata_t _Nonnull, dispatch_data_t _Nullable, sec_protocol_pre_shared_key_selection_complete_t _Nonnull);
	delegate void sec_protocol_pre_shared_key_selection_t (SecProtocolMetadata arg0, [NullAllowed] DispatchData arg1, sec_protocol_pre_shared_key_selection_complete_t arg2);

	// typedef void (^sec_protocol_key_update_complete_t)();
	delegate void sec_protocol_key_update_complete_t ();

	// typedef void (^sec_protocol_key_update_t)(sec_protocol_metadata_t _Nonnull, sec_protocol_key_update_complete_t _Nonnull);
	delegate void sec_protocol_key_update_t (SecProtocolMetadata arg0, sec_protocol_key_update_complete_t arg1);

	// typedef void (^sec_protocol_challenge_complete_t)(sec_identity_t _Nullable);
	delegate void sec_protocol_challenge_complete_t ([NullAllowed] SecIdentity2 arg0);

	// typedef void (^sec_protocol_challenge_t)(sec_protocol_metadata_t _Nonnull, sec_protocol_challenge_complete_t _Nonnull);
	delegate void sec_protocol_challenge_t (SecProtocolMetadata arg0, sec_protocol_challenge_complete_t arg1);

	// typedef void (^sec_protocol_verify_complete_t)(_Bool);
	delegate void sec_protocol_verify_complete_t (bool arg0);

	// typedef void (^sec_protocol_verify_t)(sec_protocol_metadata_t _Nonnull, sec_trust_t _Nonnull, sec_protocol_verify_complete_t _Nonnull);
	delegate void sec_protocol_verify_t (SecProtocolMetadata arg0, SecTrust2 arg1, sec_protocol_verify_complete_t arg2);

	// @interface NSURLCredential : NSObject <NSSecureCoding, NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLCredential : INSSecureCoding, INSCopying
	{
		// @property (readonly) NSURLCredentialPersistence persistence;
		[Export ("persistence")]
		NSURLCredentialPersistence Persistence { get; }
	}

	// @interface NSInternetPassword (NSURLCredential)
	[Category]
	[BaseType (typeof(NSURLCredential))]
	interface NSURLCredential_NSInternetPassword
	{
		// -(instancetype _Nonnull)initWithUser:(NSString * _Nonnull)user password:(NSString * _Nonnull)password persistence:(NSURLCredentialPersistence)persistence;
		[Export ("initWithUser:password:persistence:")]
		NativeHandle Constructor (string user, string password, NSURLCredentialPersistence persistence);

		// +(NSURLCredential * _Nonnull)credentialWithUser:(NSString * _Nonnull)user password:(NSString * _Nonnull)password persistence:(NSURLCredentialPersistence)persistence;
		[Static]
		[Export ("credentialWithUser:password:persistence:")]
		NSURLCredential CredentialWithUser (string user, string password, NSURLCredentialPersistence persistence);

		// @property (readonly, copy) NSString * _Nullable user;
		[NullAllowed, Export ("user")]
		string User { get; }

		// @property (readonly, copy) NSString * _Nullable password;
		[NullAllowed, Export ("password")]
		string Password { get; }

		// @property (readonly) BOOL hasPassword;
		[Export ("hasPassword")]
		bool HasPassword { get; }
	}

	// @interface NSClientCertificate (NSURLCredential)
	[Category]
	[BaseType (typeof(NSURLCredential))]
	interface NSURLCredential_NSClientCertificate
	{
		// -(instancetype _Nonnull)initWithIdentity:(SecIdentityRef _Nonnull)identity certificates:(NSArray * _Nullable)certArray persistence:(NSURLCredentialPersistence)persistence __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
		[Export ("initWithIdentity:certificates:persistence:")]
		NativeHandle Constructor (SecIdentity identity, [NullAllowed] NSObject[] certArray, NSURLCredentialPersistence persistence);

		// +(NSURLCredential * _Nonnull)credentialWithIdentity:(SecIdentityRef _Nonnull)identity certificates:(NSArray * _Nullable)certArray persistence:(NSURLCredentialPersistence)persistence __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
		[Static]
		[Export ("credentialWithIdentity:certificates:persistence:")]
		NSURLCredential CredentialWithIdentity (SecIdentity identity, [NullAllowed] NSObject[] certArray, NSURLCredentialPersistence persistence);

		// @property (readonly) SecIdentityRef _Nullable identity;
		[NullAllowed, Export ("identity")]
		SecIdentity Identity { get; }

		// @property (readonly, copy) NSArray * _Nonnull certificates __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (3, 0)]
		[Export ("certificates", ArgumentSemantic.Copy)]
		NSObject[] Certificates { get; }
	}

	// @interface NSServerTrust (NSURLCredential)
	[Category]
	[BaseType (typeof(NSURLCredential))]
	interface NSURLCredential_NSServerTrust
	{
		// -(instancetype _Nonnull)initWithTrust:(SecTrustRef _Nonnull)trust __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
		[Export ("initWithTrust:")]
		NativeHandle Constructor (SecTrust trust);

		// +(NSURLCredential * _Nonnull)credentialForTrust:(SecTrustRef _Nonnull)trust __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (3,0)]
		[Static]
		[Export ("credentialForTrust:")]
		NSURLCredential CredentialForTrust (SecTrust trust);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSURLProtectionSpaceHTTP __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSURLProtectionSpaceHTTP", "__Internal")]
		NSString NSURLProtectionSpaceHTTP { get; }

		// extern NSString *const _Nonnull NSURLProtectionSpaceHTTPS __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSURLProtectionSpaceHTTPS", "__Internal")]
		NSString NSURLProtectionSpaceHTTPS { get; }

		// extern NSString *const _Nonnull NSURLProtectionSpaceFTP __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSURLProtectionSpaceFTP", "__Internal")]
		NSString NSURLProtectionSpaceFTP { get; }

		// extern NSString *const _Nonnull NSURLProtectionSpaceHTTPProxy __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLProtectionSpaceHTTPProxy", "__Internal")]
		NSString NSURLProtectionSpaceHTTPProxy { get; }

		// extern NSString *const _Nonnull NSURLProtectionSpaceHTTPSProxy __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLProtectionSpaceHTTPSProxy", "__Internal")]
		NSString NSURLProtectionSpaceHTTPSProxy { get; }

		// extern NSString *const _Nonnull NSURLProtectionSpaceFTPProxy __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLProtectionSpaceFTPProxy", "__Internal")]
		NSString NSURLProtectionSpaceFTPProxy { get; }

		// extern NSString *const _Nonnull NSURLProtectionSpaceSOCKSProxy __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLProtectionSpaceSOCKSProxy", "__Internal")]
		NSString NSURLProtectionSpaceSOCKSProxy { get; }

		// extern NSString *const _Nonnull NSURLAuthenticationMethodDefault __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLAuthenticationMethodDefault", "__Internal")]
		NSString NSURLAuthenticationMethodDefault { get; }

		// extern NSString *const _Nonnull NSURLAuthenticationMethodHTTPBasic __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLAuthenticationMethodHTTPBasic", "__Internal")]
		NSString NSURLAuthenticationMethodHTTPBasic { get; }

		// extern NSString *const _Nonnull NSURLAuthenticationMethodHTTPDigest __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLAuthenticationMethodHTTPDigest", "__Internal")]
		NSString NSURLAuthenticationMethodHTTPDigest { get; }

		// extern NSString *const _Nonnull NSURLAuthenticationMethodHTMLForm __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLAuthenticationMethodHTMLForm", "__Internal")]
		NSString NSURLAuthenticationMethodHTMLForm { get; }

		// extern NSString *const _Nonnull NSURLAuthenticationMethodNTLM __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSURLAuthenticationMethodNTLM", "__Internal")]
		NSString NSURLAuthenticationMethodNTLM { get; }

		// extern NSString *const _Nonnull NSURLAuthenticationMethodNegotiate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Field ("NSURLAuthenticationMethodNegotiate", "__Internal")]
		NSString NSURLAuthenticationMethodNegotiate { get; }

		// extern NSString *const _Nonnull NSURLAuthenticationMethodClientCertificate __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (3, 0)]
		[Field ("NSURLAuthenticationMethodClientCertificate", "__Internal")]
		NSString NSURLAuthenticationMethodClientCertificate { get; }

		// extern NSString *const _Nonnull NSURLAuthenticationMethodServerTrust __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (3, 0)]
		[Field ("NSURLAuthenticationMethodServerTrust", "__Internal")]
		NSString NSURLAuthenticationMethodServerTrust { get; }
	}

	// @interface NSURLProtectionSpace : NSObject <NSSecureCoding, NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLProtectionSpace : INSSecureCoding, INSCopying
	{
		// -(instancetype _Nonnull)initWithHost:(NSString * _Nonnull)host port:(NSInteger)port protocol:(NSString * _Nullable)protocol realm:(NSString * _Nullable)realm authenticationMethod:(NSString * _Nullable)authenticationMethod;
		[Export ("initWithHost:port:protocol:realm:authenticationMethod:")]
		NativeHandle Constructor (string host, nint port, [NullAllowed] string protocol, [NullAllowed] string realm, [NullAllowed] string authenticationMethod);

		// -(instancetype _Nonnull)initWithProxyHost:(NSString * _Nonnull)host port:(NSInteger)port type:(NSString * _Nullable)type realm:(NSString * _Nullable)realm authenticationMethod:(NSString * _Nullable)authenticationMethod;
		[Export ("initWithProxyHost:port:type:realm:authenticationMethod:")]
		NativeHandle Constructor (string host, nint port, [NullAllowed] string type, [NullAllowed] string realm, [NullAllowed] string authenticationMethod);

		// @property (readonly, copy) NSString * _Nullable realm;
		[NullAllowed, Export ("realm")]
		string Realm { get; }

		// @property (readonly) BOOL receivesCredentialSecurely;
		[Export ("receivesCredentialSecurely")]
		bool ReceivesCredentialSecurely { get; }

		// @property (readonly) BOOL isProxy;
		[Export ("isProxy")]
		bool IsProxy { get; }

		// @property (readonly, copy) NSString * _Nonnull host;
		[Export ("host")]
		string Host { get; }

		// @property (readonly) NSInteger port;
		[Export ("port")]
		nint Port { get; }

		// @property (readonly, copy) NSString * _Nullable proxyType;
		[NullAllowed, Export ("proxyType")]
		string ProxyType { get; }

		// @property (readonly, copy) NSString * _Nullable protocol;
		[NullAllowed, Export ("protocol")]
		string Protocol { get; }

		// @property (readonly, copy) NSString * _Nonnull authenticationMethod;
		[Export ("authenticationMethod")]
		string AuthenticationMethod { get; }
	}

	// @interface NSClientCertificateSpace (NSURLProtectionSpace)
	[Category]
	[BaseType (typeof(NSURLProtectionSpace))]
	interface NSURLProtectionSpace_NSClientCertificateSpace
	{
		// @property (readonly, copy) NSArray<NSData *> * _Nullable distinguishedNames __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (3, 0)]
		[NullAllowed, Export ("distinguishedNames", ArgumentSemantic.Copy)]
		NSData[] DistinguishedNames { get; }
	}

	// @interface NSServerTrustValidationSpace (NSURLProtectionSpace)
	[Category]
	[BaseType (typeof(NSURLProtectionSpace))]
	interface NSURLProtectionSpace_NSServerTrustValidationSpace
	{
		// @property (readonly) SecTrustRef _Nullable serverTrust __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (3, 0)]
		[NullAllowed, Export ("serverTrust")]
		SecTrust ServerTrust { get; }
	}

	// @interface NSURLCredentialStorage : NSObject
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLCredentialStorage
	{
		// @property (readonly, strong, class) NSURLCredentialStorage * _Nonnull sharedCredentialStorage;
		[Static]
		[Export ("sharedCredentialStorage", ArgumentSemantic.Strong)]
		NSURLCredentialStorage SharedCredentialStorage { get; }

		// -(NSDictionary<NSString *,NSURLCredential *> * _Nullable)credentialsForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
		[Export ("credentialsForProtectionSpace:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSURLCredential> CredentialsForProtectionSpace (NSURLProtectionSpace space);

		// @property (readonly, copy) NSDictionary<NSURLProtectionSpace *,NSDictionary<NSString *,NSURLCredential *> *> * _Nonnull allCredentials;
		[Export ("allCredentials", ArgumentSemantic.Copy)]
		NSDictionary<NSURLProtectionSpace, NSDictionary<NSString, NSURLCredential>> AllCredentials { get; }

		// -(void)setCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
		[Export ("setCredential:forProtectionSpace:")]
		void SetCredential (NSURLCredential credential, NSURLProtectionSpace space);

		// -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
		[Export ("removeCredential:forProtectionSpace:")]
		void RemoveCredential (NSURLCredential credential, NSURLProtectionSpace space);

		// -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space options:(NSDictionary<NSString *,id> * _Nullable)options __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("removeCredential:forProtectionSpace:options:")]
		void RemoveCredential (NSURLCredential credential, NSURLProtectionSpace space, [NullAllowed] NSDictionary<NSString, NSObject> options);

		// -(NSURLCredential * _Nullable)defaultCredentialForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
		[Export ("defaultCredentialForProtectionSpace:")]
		[return: NullAllowed]
		NSURLCredential DefaultCredentialForProtectionSpace (NSURLProtectionSpace space);

		// -(void)setDefaultCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)space;
		[Export ("setDefaultCredential:forProtectionSpace:")]
		void SetDefaultCredential (NSURLCredential credential, NSURLProtectionSpace space);
	}

	// @interface NSURLSessionTaskAdditions (NSURLCredentialStorage)
	[Category]
	[BaseType (typeof(NSURLCredentialStorage))]
	interface NSURLCredentialStorage_NSURLSessionTaskAdditions
	{
		// -(void)getCredentialsForProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *,NSURLCredential *> * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_async_name("credentials(for:task:)")));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("getCredentialsForProtectionSpace:task:completionHandler:")]
		void GetCredentialsForProtectionSpace (NSURLProtectionSpace protectionSpace, NSURLSessionTask task, Action<NSDictionary<NSString, NSURLCredential>> completionHandler);

		// -(void)setCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("setCredential:forProtectionSpace:task:")]
		void SetCredential (NSURLCredential credential, NSURLProtectionSpace protectionSpace, NSURLSessionTask task);

		// -(void)removeCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace options:(NSDictionary<NSString *,id> * _Nullable)options task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("removeCredential:forProtectionSpace:options:task:")]
		void RemoveCredential (NSURLCredential credential, NSURLProtectionSpace protectionSpace, [NullAllowed] NSDictionary<NSString, NSObject> options, NSURLSessionTask task);

		// -(void)getDefaultCredentialForProtectionSpace:(NSURLProtectionSpace * _Nonnull)space task:(NSURLSessionTask * _Nonnull)task completionHandler:(void (^ _Nonnull)(NSURLCredential * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("getDefaultCredentialForProtectionSpace:task:completionHandler:")]
		void GetDefaultCredentialForProtectionSpace (NSURLProtectionSpace space, NSURLSessionTask task, Action<NSURLCredential> completionHandler);

		// -(void)setDefaultCredential:(NSURLCredential * _Nonnull)credential forProtectionSpace:(NSURLProtectionSpace * _Nonnull)protectionSpace task:(NSURLSessionTask * _Nonnull)task __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("setDefaultCredential:forProtectionSpace:task:")]
		void SetDefaultCredential (NSURLCredential credential, NSURLProtectionSpace protectionSpace, NSURLSessionTask task);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSURLCredentialStorageChangedNotification __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 2), iOS (2, 0)]
		[Field ("NSURLCredentialStorageChangedNotification", "__Internal")]
		NSString NSURLCredentialStorageChangedNotification { get; }

		// extern NSString *const _Nonnull NSURLCredentialStorageRemoveSynchronizableCredentials __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLCredentialStorageRemoveSynchronizableCredentials", "__Internal")]
		NSString NSURLCredentialStorageRemoveSynchronizableCredentials { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFErrorDomainCFNetwork __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFErrorDomainCFNetwork", "__Internal")]
		unsafe CFStringRef* kCFErrorDomainCFNetwork { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFErrorDomainWinSock __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFErrorDomainWinSock", "__Internal")]
		unsafe CFStringRef* kCFErrorDomainWinSock { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern CF_AVAILABLE(10_5, 2_2) const CFStringRef kCFURLErrorFailingURLErrorKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.2)));
		[iOS (2, 2)]
		[Field ("kCFURLErrorFailingURLErrorKey", "__Internal")]
		unsafe CFStringRef* kCFURLErrorFailingURLErrorKey { get; }

		// extern CF_AVAILABLE(10_5, 2_2) const CFStringRef kCFURLErrorFailingURLStringErrorKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.2)));
		[iOS (2, 2)]
		[Field ("kCFURLErrorFailingURLStringErrorKey", "__Internal")]
		unsafe CFStringRef* kCFURLErrorFailingURLStringErrorKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFGetAddrInfoFailureKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFGetAddrInfoFailureKey", "__Internal")]
		unsafe CFStringRef* kCFGetAddrInfoFailureKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFSOCKSStatusCodeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFSOCKSStatusCodeKey", "__Internal")]
		unsafe CFStringRef* kCFSOCKSStatusCodeKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFSOCKSVersionKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFSOCKSVersionKey", "__Internal")]
		unsafe CFStringRef* kCFSOCKSVersionKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFSOCKSNegotiationMethodKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFSOCKSNegotiationMethodKey", "__Internal")]
		unsafe CFStringRef* kCFSOCKSNegotiationMethodKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFDNSServiceFailureKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFDNSServiceFailureKey", "__Internal")]
		unsafe CFStringRef* kCFDNSServiceFailureKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFFTPStatusCodeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFFTPStatusCodeKey", "__Internal")]
		unsafe CFStringRef* kCFFTPStatusCodeKey { get; }

		// extern const SInt32 kCFStreamErrorDomainNetDB __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainNetDB", "__Internal")]
		int kCFStreamErrorDomainNetDB { get; }

		// extern const SInt32 kCFStreamErrorDomainSystemConfiguration __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainSystemConfiguration", "__Internal")]
		int kCFStreamErrorDomainSystemConfiguration { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const SInt32 kCFStreamErrorDomainMach __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainMach", "__Internal")]
		int kCFStreamErrorDomainMach { get; }

		// extern const SInt32 kCFStreamErrorDomainNetServices __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainNetServices", "__Internal")]
		int kCFStreamErrorDomainNetServices { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern CF_AVAILABLE(10_9, 5_0) const CFStringRef kCFStreamPropertySSLContext __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5, 0)]
		[Field ("kCFStreamPropertySSLContext", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySSLContext { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFStreamPropertySSLPeerTrust __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySSLPeerTrust", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySSLPeerTrust { get; }

		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFStreamSSLValidatesCertificateChain __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSSLValidatesCertificateChain", "__Internal")]
		unsafe CFStringRef* kCFStreamSSLValidatesCertificateChain { get; }

		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFStreamPropertySSLSettings __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySSLSettings", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySSLSettings { get; }

		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFStreamSSLLevel __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSSLLevel", "__Internal")]
		unsafe CFStringRef* kCFStreamSSLLevel { get; }

		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFStreamSSLPeerName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSSLPeerName", "__Internal")]
		unsafe CFStringRef* kCFStreamSSLPeerName { get; }

		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFStreamSSLCertificates __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSSLCertificates", "__Internal")]
		unsafe CFStringRef* kCFStreamSSLCertificates { get; }

		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFStreamSSLIsServer __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamSSLIsServer", "__Internal")]
		unsafe CFStringRef* kCFStreamSSLIsServer { get; }

		// extern CF_AVAILABLE(10_7, 4_0) const CFStringRef kCFStreamNetworkServiceType __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0)));
		[iOS (4, 0)]
		[Field ("kCFStreamNetworkServiceType", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceType { get; }

		// extern CF_AVAILABLE(10_7, 5_0) const CFStringRef kCFStreamNetworkServiceTypeVideo __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5, 0)]
		[Field ("kCFStreamNetworkServiceTypeVideo", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceTypeVideo { get; }

		// extern CF_AVAILABLE(10_7, 5_0) const CFStringRef kCFStreamNetworkServiceTypeVoice __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5, 0)]
		[Field ("kCFStreamNetworkServiceTypeVoice", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceTypeVoice { get; }

		// extern CF_AVAILABLE(10_7, 5_0) const CFStringRef kCFStreamNetworkServiceTypeBackground __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5, 0)]
		[Field ("kCFStreamNetworkServiceTypeBackground", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceTypeBackground { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0) const CFStringRef kCFStreamNetworkServiceTypeResponsiveData __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6, 0)]
		[Field ("kCFStreamNetworkServiceTypeResponsiveData", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceTypeResponsiveData { get; }

		// extern CF_AVAILABLE(10_12, 10_0) const CFStringRef kCFStreamNetworkServiceTypeCallSignaling __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=10.0)));
		[iOS (10, 0)]
		[Field ("kCFStreamNetworkServiceTypeCallSignaling", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceTypeCallSignaling { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0) const CFStringRef kCFStreamNetworkServiceTypeAVStreaming __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6, 0)]
		[Field ("kCFStreamNetworkServiceTypeAVStreaming", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceTypeAVStreaming { get; }

		// extern __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0) const CFStringRef kCFStreamNetworkServiceTypeResponsiveAV __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6, 0)]
		[Field ("kCFStreamNetworkServiceTypeResponsiveAV", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceTypeResponsiveAV { get; }

		// extern CF_DEPRECATED(10_7, 10_11, 4_0, 9_0, "use PushKit for VoIP control purposes") const CFStringRef kCFStreamNetworkServiceTypeVoIP __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 4, 0, message: "use PushKit for VoIP control purposes")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "use PushKit for VoIP control purposes")]
		[Field ("kCFStreamNetworkServiceTypeVoIP", "__Internal")]
		unsafe CFStringRef* kCFStreamNetworkServiceTypeVoIP { get; }

		// extern CF_AVAILABLE(10_8, 5_0) const CFStringRef kCFStreamPropertyNoCellular __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=5.0)));
		[iOS (5, 0)]
		[Field ("kCFStreamPropertyNoCellular", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyNoCellular { get; }

		// extern CF_AVAILABLE(10_8, 6_0) const CFStringRef kCFStreamPropertyConnectionIsCellular __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=6.0)));
		[iOS (6, 0)]
		[Field ("kCFStreamPropertyConnectionIsCellular", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyConnectionIsCellular { get; }

		// extern const CFStringRef _Nonnull kCFStreamPropertyAllowExpensiveNetworkAccess __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Field ("kCFStreamPropertyAllowExpensiveNetworkAccess", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyAllowExpensiveNetworkAccess { get; }

		// extern const CFStringRef _Nonnull kCFStreamPropertyConnectionIsExpensive __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Field ("kCFStreamPropertyConnectionIsExpensive", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyConnectionIsExpensive { get; }

		// extern const CFStringRef _Nonnull kCFStreamPropertyAllowConstrainedNetworkAccess __attribute__((visibility("default"))) __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Field ("kCFStreamPropertyAllowConstrainedNetworkAccess", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyAllowConstrainedNetworkAccess { get; }

		// extern const CFIndex kCFStreamErrorDomainWinSock __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainWinSock", "__Internal")]
		nint kCFStreamErrorDomainWinSock { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFStreamPropertyProxyLocalBypass __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertyProxyLocalBypass", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyProxyLocalBypass { get; }

		// extern CF_AVAILABLE(10_3, 2_0) const CFStringRef kCFStreamPropertySocketRemoteHost __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySocketRemoteHost", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySocketRemoteHost { get; }

		// extern CF_AVAILABLE(10_3, 2_0) const CFStringRef kCFStreamPropertySocketRemoteNetService __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamPropertySocketRemoteNetService", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySocketRemoteNetService { get; }

		// extern CF_AVAILABLE(10_11, 9_0) const CFStringRef kCFStreamPropertySocketExtendedBackgroundIdleMode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=9.0)));
		[iOS (9, 0)]
		[Field ("kCFStreamPropertySocketExtendedBackgroundIdleMode", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySocketExtendedBackgroundIdleMode { get; }

		// extern CF_DEPRECATED(10_4, 10_6, 2_0, 4_0) const CFStringRef kCFStreamPropertySSLPeerCertificates __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 4, 0)]
		[Field ("kCFStreamPropertySSLPeerCertificates", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertySSLPeerCertificates { get; }

		// extern CF_DEPRECATED(10_4, 10_6, 2_0, 4_0) const CFStringRef kCFStreamSSLAllowsExpiredCertificates __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 4, 0)]
		[Field ("kCFStreamSSLAllowsExpiredCertificates", "__Internal")]
		unsafe CFStringRef* kCFStreamSSLAllowsExpiredCertificates { get; }

		// extern CF_DEPRECATED(10_4, 10_6, 2_0, 4_0) const CFStringRef kCFStreamSSLAllowsExpiredRoots __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 4, 0)]
		[Field ("kCFStreamSSLAllowsExpiredRoots", "__Internal")]
		unsafe CFStringRef* kCFStreamSSLAllowsExpiredRoots { get; }

		// extern CF_DEPRECATED(10_4, 10_6, 2_0, 4_0) const CFStringRef kCFStreamSSLAllowsAnyRoot __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0)));
		[Introduced (PlatformName.iOS, 2, 0)]
		[Deprecated (PlatformName.iOS, 4, 0)]
		[Field ("kCFStreamSSLAllowsAnyRoot", "__Internal")]
		unsafe CFStringRef* kCFStreamSSLAllowsAnyRoot { get; }

		// extern const SInt32 kCFStreamErrorDomainFTP __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainFTP", "__Internal")]
		int kCFStreamErrorDomainFTP { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPUserName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPUserName", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPUserName { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPPassword __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPPassword", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPPassword { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPUsePassiveMode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPUsePassiveMode", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPUsePassiveMode { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPResourceSize __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPResourceSize", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPResourceSize { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPFetchResourceInfo __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPFetchResourceInfo", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPFetchResourceInfo { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPFileTransferOffset __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPFileTransferOffset", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPFileTransferOffset { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPAttemptPersistentConnection __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPAttemptPersistentConnection", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPAttemptPersistentConnection { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPProxy __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPProxy", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPProxy { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPProxyHost __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPProxyHost", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPProxyHost { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPProxyPort __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPProxyPort", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPProxyPort { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPProxyUser __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPProxyUser", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPProxyUser { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFStreamPropertyFTPProxyPassword __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFStreamPropertyFTPProxyPassword", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyFTPProxyPassword { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFFTPResourceMode __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFFTPResourceMode", "__Internal")]
		unsafe CFStringRef* kCFFTPResourceMode { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFFTPResourceName __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFFTPResourceName", "__Internal")]
		unsafe CFStringRef* kCFFTPResourceName { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFFTPResourceOwner __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFFTPResourceOwner", "__Internal")]
		unsafe CFStringRef* kCFFTPResourceOwner { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFFTPResourceGroup __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFFTPResourceGroup", "__Internal")]
		unsafe CFStringRef* kCFFTPResourceGroup { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFFTPResourceLink __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFFTPResourceLink", "__Internal")]
		unsafe CFStringRef* kCFFTPResourceLink { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFFTPResourceSize __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFFTPResourceSize", "__Internal")]
		unsafe CFStringRef* kCFFTPResourceSize { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFFTPResourceType __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFFTPResourceType", "__Internal")]
		unsafe CFStringRef* kCFFTPResourceType { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0 , "Use NSURLSessionAPI for ftp requests") const CFStringRef kCFFTPResourceModDate __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSessionAPI for ftp requests")]
		[Field ("kCFFTPResourceModDate", "__Internal")]
		unsafe CFStringRef* kCFFTPResourceModDate { get; }

		// extern CF_AVAILABLE(10_1, 2_0) const CFStringRef kCFHTTPVersion1_0 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPVersion1_0", "__Internal")]
		unsafe CFStringRef* kCFHTTPVersion1_0 { get; }

		// extern CF_AVAILABLE(10_1, 2_0) const CFStringRef kCFHTTPVersion1_1 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPVersion1_1", "__Internal")]
		unsafe CFStringRef* kCFHTTPVersion1_1 { get; }

		// extern CF_AVAILABLE(10_10, 8_0) const CFStringRef kCFHTTPVersion2_0 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=8.0)));
		[iOS (8, 0)]
		[Field ("kCFHTTPVersion2_0", "__Internal")]
		unsafe CFStringRef* kCFHTTPVersion2_0 { get; }

		// extern CF_AVAILABLE(10_15, 13_0) const CFStringRef kCFHTTPVersion3_0 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=13.0)));
		[iOS (13, 0)]
		[Field ("kCFHTTPVersion3_0", "__Internal")]
		unsafe CFStringRef* kCFHTTPVersion3_0 { get; }

		// extern CF_AVAILABLE(10_2, 2_0) const CFStringRef kCFHTTPAuthenticationSchemeBasic __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPAuthenticationSchemeBasic", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationSchemeBasic { get; }

		// extern CF_AVAILABLE(10_2, 2_0) const CFStringRef kCFHTTPAuthenticationSchemeDigest __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPAuthenticationSchemeDigest", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationSchemeDigest { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFHTTPAuthenticationSchemeNTLM __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPAuthenticationSchemeNTLM", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationSchemeNTLM { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFHTTPAuthenticationSchemeKerberos __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPAuthenticationSchemeKerberos", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationSchemeKerberos { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFHTTPAuthenticationSchemeNegotiate __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPAuthenticationSchemeNegotiate", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationSchemeNegotiate { get; }

		// extern CF_AVAILABLE(10_6, 3_0) const CFStringRef kCFHTTPAuthenticationSchemeNegotiate2 __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3, 0)]
		[Field ("kCFHTTPAuthenticationSchemeNegotiate2", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationSchemeNegotiate2 { get; }

		// extern CF_AVAILABLE(10_6, 4_3) const CFStringRef kCFHTTPAuthenticationSchemeXMobileMeAuthToken __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=4.3)));
		[iOS (4, 3)]
		[Field ("kCFHTTPAuthenticationSchemeXMobileMeAuthToken", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationSchemeXMobileMeAuthToken { get; }

		// extern const SInt32 kCFStreamErrorDomainHTTP __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFStreamErrorDomainHTTP", "__Internal")]
		int kCFStreamErrorDomainHTTP { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern CF_DEPRECATED(10_1, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPResponseHeader __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPResponseHeader", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPResponseHeader { get; }

		// extern CF_DEPRECATED(10_2, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPFinalURL __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPFinalURL", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPFinalURL { get; }

		// extern CF_DEPRECATED(10_5, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPFinalRequest __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPFinalRequest", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPFinalRequest { get; }

		// extern CF_DEPRECATED(10_2, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPProxy __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPProxy", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPProxy { get; }

		// extern CF_DEPRECATED(10_2, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPProxyHost __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPProxyHost", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPProxyHost { get; }

		// extern CF_DEPRECATED(10_2, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPProxyPort __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPProxyPort", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPProxyPort { get; }

		// extern CF_DEPRECATED(10_2, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPSProxyHost __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPSProxyHost", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPSProxyHost { get; }

		// extern CF_DEPRECATED(10_2, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPSProxyPort __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPSProxyPort", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPSProxyPort { get; }

		// extern CF_DEPRECATED(10_2, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPShouldAutoredirect __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPShouldAutoredirect", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPShouldAutoredirect { get; }

		// extern CF_DEPRECATED(10_2, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPAttemptPersistentConnection __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPAttemptPersistentConnection", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPAttemptPersistentConnection { get; }

		// extern CF_DEPRECATED(10_3, 10_11, 2_0, 9_0, "Use NSURLSession API for http requests") const CFStringRef kCFStreamPropertyHTTPRequestBytesWrittenCount __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0, deprecated=9.0)));
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLSession API for http requests")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use NSURLSession API for http requests")]
		[Field ("kCFStreamPropertyHTTPRequestBytesWrittenCount", "__Internal")]
		unsafe CFStringRef* kCFStreamPropertyHTTPRequestBytesWrittenCount { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFHTTPAuthenticationUsername __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPAuthenticationUsername", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationUsername { get; }

		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFHTTPAuthenticationPassword __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPAuthenticationPassword", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationPassword { get; }

		// extern CF_AVAILABLE(10_4, 2_0) const CFStringRef kCFHTTPAuthenticationAccountDomain __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFHTTPAuthenticationAccountDomain", "__Internal")]
		unsafe CFStringRef* kCFHTTPAuthenticationAccountDomain { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyTypeKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyTypeKey", "__Internal")]
		unsafe CFStringRef* kCFProxyTypeKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyHostNameKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyHostNameKey", "__Internal")]
		unsafe CFStringRef* kCFProxyHostNameKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyPortNumberKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyPortNumberKey", "__Internal")]
		unsafe CFStringRef* kCFProxyPortNumberKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyAutoConfigurationURLKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyAutoConfigurationURLKey", "__Internal")]
		unsafe CFStringRef* kCFProxyAutoConfigurationURLKey { get; }

		// extern CF_AVAILABLE(10_7, 3_0) const CFStringRef kCFProxyAutoConfigurationJavaScriptKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3, 0)]
		[Field ("kCFProxyAutoConfigurationJavaScriptKey", "__Internal")]
		unsafe CFStringRef* kCFProxyAutoConfigurationJavaScriptKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyUsernameKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyUsernameKey", "__Internal")]
		unsafe CFStringRef* kCFProxyUsernameKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyPasswordKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyPasswordKey", "__Internal")]
		unsafe CFStringRef* kCFProxyPasswordKey { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyTypeNone __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyTypeNone", "__Internal")]
		unsafe CFStringRef* kCFProxyTypeNone { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyTypeHTTP __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyTypeHTTP", "__Internal")]
		unsafe CFStringRef* kCFProxyTypeHTTP { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyTypeHTTPS __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyTypeHTTPS", "__Internal")]
		unsafe CFStringRef* kCFProxyTypeHTTPS { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyTypeSOCKS __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyTypeSOCKS", "__Internal")]
		unsafe CFStringRef* kCFProxyTypeSOCKS { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyTypeFTP __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyTypeFTP", "__Internal")]
		unsafe CFStringRef* kCFProxyTypeFTP { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyTypeAutoConfigurationURL __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyTypeAutoConfigurationURL", "__Internal")]
		unsafe CFStringRef* kCFProxyTypeAutoConfigurationURL { get; }

		// extern CF_AVAILABLE(10_7, 3_0) const CFStringRef kCFProxyTypeAutoConfigurationJavaScript __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3, 0)]
		[Field ("kCFProxyTypeAutoConfigurationJavaScript", "__Internal")]
		unsafe CFStringRef* kCFProxyTypeAutoConfigurationJavaScript { get; }

		// extern CF_AVAILABLE(10_5, 2_0) const CFStringRef kCFProxyAutoConfigurationHTTPResponseKey __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFProxyAutoConfigurationHTTPResponseKey", "__Internal")]
		unsafe CFStringRef* kCFProxyAutoConfigurationHTTPResponseKey { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesExceptionsList __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesExceptionsList", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesExceptionsList { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesExcludeSimpleHostnames __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesExcludeSimpleHostnames", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesExcludeSimpleHostnames { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesFTPEnable __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesFTPEnable", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesFTPEnable { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesFTPPassive __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesFTPPassive", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesFTPPassive { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesFTPPort __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesFTPPort", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesFTPPort { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesFTPProxy __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesFTPProxy", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesFTPProxy { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesGopherEnable __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesGopherEnable", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesGopherEnable { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesGopherPort __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesGopherPort", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesGopherPort { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesGopherProxy __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesGopherProxy", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesGopherProxy { get; }

		// extern CF_AVAILABLE(10_6, 2_0) const CFStringRef kCFNetworkProxiesHTTPEnable __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFNetworkProxiesHTTPEnable", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesHTTPEnable { get; }

		// extern CF_AVAILABLE(10_6, 2_0) const CFStringRef kCFNetworkProxiesHTTPPort __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFNetworkProxiesHTTPPort", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesHTTPPort { get; }

		// extern CF_AVAILABLE(10_6, 2_0) const CFStringRef kCFNetworkProxiesHTTPProxy __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFNetworkProxiesHTTPProxy", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesHTTPProxy { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesHTTPSEnable __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesHTTPSEnable", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesHTTPSEnable { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesHTTPSPort __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesHTTPSPort", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesHTTPSPort { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesHTTPSProxy __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesHTTPSProxy", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesHTTPSProxy { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesRTSPEnable __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesRTSPEnable", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesRTSPEnable { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesRTSPPort __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesRTSPPort", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesRTSPPort { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesRTSPProxy __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesRTSPProxy", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesRTSPProxy { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesSOCKSEnable __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesSOCKSEnable", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesSOCKSEnable { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesSOCKSPort __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesSOCKSPort", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesSOCKSPort { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesSOCKSProxy __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesSOCKSProxy", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesSOCKSProxy { get; }

		// extern CF_AVAILABLE(10_6, 2_0) const CFStringRef kCFNetworkProxiesProxyAutoConfigEnable __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFNetworkProxiesProxyAutoConfigEnable", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesProxyAutoConfigEnable { get; }

		// extern CF_AVAILABLE(10_6, 2_0) const CFStringRef kCFNetworkProxiesProxyAutoConfigURLString __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=2.0)));
		[iOS (2, 0)]
		[Field ("kCFNetworkProxiesProxyAutoConfigURLString", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesProxyAutoConfigURLString { get; }

		// extern CF_AVAILABLE(10_7, 3_0) const CFStringRef kCFNetworkProxiesProxyAutoConfigJavaScript __attribute__((visibility("default"))) __attribute__((availability(ios, introduced=3.0)));
		[iOS (3, 0)]
		[Field ("kCFNetworkProxiesProxyAutoConfigJavaScript", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesProxyAutoConfigJavaScript { get; }

		// extern CF_AVAILABLE(10_6, NA) const CFStringRef kCFNetworkProxiesProxyAutoDiscoveryEnable __attribute__((visibility("default"))) __attribute__((availability(ios, unavailable)));
		[NoiOS]
		[Field ("kCFNetworkProxiesProxyAutoDiscoveryEnable", "__Internal")]
		unsafe CFStringRef* kCFNetworkProxiesProxyAutoDiscoveryEnable { get; }

		// extern const NSErrorDomain _Nonnull NSURLErrorDomain;
		[Field ("NSURLErrorDomain", "__Internal")]
		NSString NSURLErrorDomain { get; }

		// extern NSString *const _Nonnull NSURLErrorFailingURLErrorKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLErrorFailingURLErrorKey", "__Internal")]
		NSString NSURLErrorFailingURLErrorKey { get; }

		// extern NSString *const _Nonnull NSURLErrorFailingURLStringErrorKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLErrorFailingURLStringErrorKey", "__Internal")]
		NSString NSURLErrorFailingURLStringErrorKey { get; }

		// extern NSString *const _Nonnull NSErrorFailingURLStringKey __attribute__((availability(macos, introduced=10.0, deprecated=10.6))) __attribute__((availability(ios, introduced=2.0, deprecated=4.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
		[Deprecated (PlatformName.MacOSX, 10, 6, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
		[Deprecated (PlatformName.iOS, 4, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSURLErrorFailingURLStringErrorKey instead")]
		[Field ("NSErrorFailingURLStringKey", "__Internal")]
		NSString NSErrorFailingURLStringKey { get; }

		// extern NSString *const _Nonnull NSURLErrorFailingURLPeerTrustErrorKey __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Field ("NSURLErrorFailingURLPeerTrustErrorKey", "__Internal")]
		NSString NSURLErrorFailingURLPeerTrustErrorKey { get; }

		// extern NSString *const _Nonnull NSURLErrorBackgroundTaskCancelledReasonKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLErrorBackgroundTaskCancelledReasonKey", "__Internal")]
		NSString NSURLErrorBackgroundTaskCancelledReasonKey { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSErrorUserInfoKey _Nonnull NSURLErrorNetworkUnavailableReasonKey __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Field ("NSURLErrorNetworkUnavailableReasonKey", "__Internal")]
		NSString NSURLErrorNetworkUnavailableReasonKey { get; }
	}

	// @protocol NSURLProtocolClient <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[Protocol]
	[BaseType (typeof(NSObject))]
	interface NSURLProtocolClient
	{
		// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol wasRedirectedToRequest:(NSURLRequest * _Nonnull)request redirectResponse:(NSURLResponse * _Nonnull)redirectResponse;
		[Abstract]
		[Export ("URLProtocol:wasRedirectedToRequest:redirectResponse:")]
		void URLProtocol (NSURLProtocol protocol, NSURLRequest request, NSURLResponse redirectResponse);

		// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol cachedResponseIsValid:(NSCachedURLResponse * _Nonnull)cachedResponse;
		[Abstract]
		[Export ("URLProtocol:cachedResponseIsValid:")]
		void URLProtocol (NSURLProtocol protocol, NSCachedURLResponse cachedResponse);

		// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didReceiveResponse:(NSURLResponse * _Nonnull)response cacheStoragePolicy:(NSURLCacheStoragePolicy)policy;
		[Abstract]
		[Export ("URLProtocol:didReceiveResponse:cacheStoragePolicy:")]
		void URLProtocol (NSURLProtocol protocol, NSURLResponse response, NSURLCacheStoragePolicy policy);

		// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didLoadData:(NSData * _Nonnull)data;
		[Abstract]
		[Export ("URLProtocol:didLoadData:")]
		void URLProtocol (NSURLProtocol protocol, NSData data);

		// @required -(void)URLProtocolDidFinishLoading:(NSURLProtocol * _Nonnull)protocol;
		[Abstract]
		[Export ("URLProtocolDidFinishLoading:")]
		void URLProtocolDidFinishLoading (NSURLProtocol protocol);

		// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didFailWithError:(NSError * _Nonnull)error;
		[Abstract]
		[Export ("URLProtocol:didFailWithError:")]
		void URLProtocol (NSURLProtocol protocol, NSError error);

		// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
		[Abstract]
		[Export ("URLProtocol:didReceiveAuthenticationChallenge:")]
		void URLProtocol (NSURLProtocol protocol, NSURLAuthenticationChallenge challenge);

		// @required -(void)URLProtocol:(NSURLProtocol * _Nonnull)protocol didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge;
		[Abstract]
		[Export ("URLProtocol:didCancelAuthenticationChallenge:")]
		void URLProtocol (NSURLProtocol protocol, NSURLAuthenticationChallenge challenge);
	}

	// @interface NSURLProtocol : NSObject
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLProtocol
	{
		// -(instancetype _Nonnull)initWithRequest:(NSURLRequest * _Nonnull)request cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id<NSURLProtocolClient> _Nullable)client __attribute__((objc_designated_initializer));
		[Export ("initWithRequest:cachedResponse:client:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSURLRequest request, [NullAllowed] NSCachedURLResponse cachedResponse, [NullAllowed] NSURLProtocolClient client);

		// @property (readonly, retain) id<NSURLProtocolClient> _Nullable client;
		[NullAllowed, Export ("client", ArgumentSemantic.Retain)]
		NSURLProtocolClient Client { get; }

		// @property (readonly, copy) NSURLRequest * _Nonnull request;
		[Export ("request", ArgumentSemantic.Copy)]
		NSURLRequest Request { get; }

		// @property (readonly, copy) NSCachedURLResponse * _Nullable cachedResponse;
		[NullAllowed, Export ("cachedResponse", ArgumentSemantic.Copy)]
		NSCachedURLResponse CachedResponse { get; }

		// +(BOOL)canInitWithRequest:(NSURLRequest * _Nonnull)request;
		[Static]
		[Export ("canInitWithRequest:")]
		bool CanInitWithRequest (NSURLRequest request);

		// +(NSURLRequest * _Nonnull)canonicalRequestForRequest:(NSURLRequest * _Nonnull)request;
		[Static]
		[Export ("canonicalRequestForRequest:")]
		NSURLRequest CanonicalRequestForRequest (NSURLRequest request);

		// +(BOOL)requestIsCacheEquivalent:(NSURLRequest * _Nonnull)a toRequest:(NSURLRequest * _Nonnull)b;
		[Static]
		[Export ("requestIsCacheEquivalent:toRequest:")]
		bool RequestIsCacheEquivalent (NSURLRequest a, NSURLRequest b);

		// -(void)startLoading;
		[Export ("startLoading")]
		void StartLoading ();

		// -(void)stopLoading;
		[Export ("stopLoading")]
		void StopLoading ();

		// +(id _Nullable)propertyForKey:(NSString * _Nonnull)key inRequest:(NSURLRequest * _Nonnull)request;
		[Static]
		[Export ("propertyForKey:inRequest:")]
		[return: NullAllowed]
		NSObject PropertyForKey (string key, NSURLRequest request);

		// +(void)setProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key inRequest:(NSMutableURLRequest * _Nonnull)request;
		[Static]
		[Export ("setProperty:forKey:inRequest:")]
		void SetProperty (NSObject value, string key, NSMutableURLRequest request);

		// +(void)removePropertyForKey:(NSString * _Nonnull)key inRequest:(NSMutableURLRequest * _Nonnull)request;
		[Static]
		[Export ("removePropertyForKey:inRequest:")]
		void RemovePropertyForKey (string key, NSMutableURLRequest request);

		// +(BOOL)registerClass:(Class _Nonnull)protocolClass;
		[Static]
		[Export ("registerClass:")]
		bool RegisterClass (Class protocolClass);

		// +(void)unregisterClass:(Class _Nonnull)protocolClass;
		[Static]
		[Export ("unregisterClass:")]
		void UnregisterClass (Class protocolClass);
	}

	// @interface NSURLSessionTaskAdditions (NSURLProtocol)
	[Category]
	[BaseType (typeof(NSURLProtocol))]
	interface NSURLProtocol_NSURLSessionTaskAdditions
	{
		// +(BOOL)canInitWithTask:(NSURLSessionTask * _Nonnull)task __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Static]
		[Export ("canInitWithTask:")]
		bool CanInitWithTask (NSURLSessionTask task);

		// -(instancetype _Nonnull)initWithTask:(NSURLSessionTask * _Nonnull)task cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id<NSURLProtocolClient> _Nullable)client __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("initWithTask:cachedResponse:client:")]
		NativeHandle Constructor (NSURLSessionTask task, [NullAllowed] NSCachedURLResponse cachedResponse, [NullAllowed] NSURLProtocolClient client);

		// @property (readonly, copy) NSURLSessionTask * _Nullable task __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[NullAllowed, Export ("task", ArgumentSemantic.Copy)]
		NSURLSessionTask Task { get; }
	}

	// @interface NSURLRequest : NSObject <NSSecureCoding, NSCopying, NSMutableCopying>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLRequest : INSSecureCoding, INSCopying, INSMutableCopying
	{
		// +(instancetype _Nonnull)requestWithURL:(NSURL * _Nonnull)URL;
		[Static]
		[Export ("requestWithURL:")]
		NSURLRequest RequestWithURL (NSURL URL);

		// @property (readonly, class) BOOL supportsSecureCoding;
		[Static]
		[Export ("supportsSecureCoding")]
		bool SupportsSecureCoding { get; }

		// +(instancetype _Nonnull)requestWithURL:(NSURL * _Nonnull)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval;
		[Static]
		[Export ("requestWithURL:cachePolicy:timeoutInterval:")]
		NSURLRequest RequestWithURL (NSURL URL, NSURLRequestCachePolicy cachePolicy, double timeoutInterval);

		// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL;
		[Export ("initWithURL:")]
		NativeHandle Constructor (NSURL URL);

		// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval __attribute__((objc_designated_initializer));
		[Export ("initWithURL:cachePolicy:timeoutInterval:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSURL URL, NSURLRequestCachePolicy cachePolicy, double timeoutInterval);

		// @property (readonly, copy) NSURL * _Nullable URL;
		[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
		NSURL URL { get; }

		// @property (readonly) NSURLRequestCachePolicy cachePolicy;
		[Export ("cachePolicy")]
		NSURLRequestCachePolicy CachePolicy { get; }

		// @property (readonly) NSTimeInterval timeoutInterval;
		[Export ("timeoutInterval")]
		double TimeoutInterval { get; }

		// @property (readonly, copy) NSURL * _Nullable mainDocumentURL;
		[NullAllowed, Export ("mainDocumentURL", ArgumentSemantic.Copy)]
		NSURL MainDocumentURL { get; }

		// @property (readonly) NSURLRequestNetworkServiceType networkServiceType __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Export ("networkServiceType")]
		NSURLRequestNetworkServiceType NetworkServiceType { get; }

		// @property (readonly) BOOL allowsCellularAccess __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Export ("allowsCellularAccess")]
		bool AllowsCellularAccess { get; }

		// @property (readonly) BOOL allowsExpensiveNetworkAccess __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("allowsExpensiveNetworkAccess")]
		bool AllowsExpensiveNetworkAccess { get; }

		// @property (readonly) BOOL allowsConstrainedNetworkAccess __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("allowsConstrainedNetworkAccess")]
		bool AllowsConstrainedNetworkAccess { get; }

		// @property (readonly) BOOL assumesHTTP3Capable __attribute__((availability(macos, introduced=11.3))) __attribute__((availability(ios, introduced=14.5))) __attribute__((availability(watchos, introduced=7.4))) __attribute__((availability(tvos, introduced=14.5)));
		[Watch (7, 4), TV (14, 5), Mac (11, 3), iOS (14, 5)]
		[Export ("assumesHTTP3Capable")]
		bool AssumesHTTP3Capable { get; }

		// @property (readonly) NSURLRequestAttribution attribution __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Export ("attribution")]
		NSURLRequestAttribution Attribution { get; }

		// @property (readonly) BOOL requiresDNSSECValidation __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.1))) __attribute__((availability(watchos, introduced=9.1))) __attribute__((availability(tvos, introduced=16.1)));
		[Watch (9, 1), TV (16, 1), Mac (13, 0), iOS (16, 1)]
		[Export ("requiresDNSSECValidation")]
		bool RequiresDNSSECValidation { get; }
	}

	// @interface NSMutableURLRequest : NSURLRequest
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSURLRequest))]
	interface NSMutableURLRequest
	{
		// @property (copy) NSURL * _Nullable URL;
		[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
		NSURL URL { get; set; }

		// @property NSURLRequestCachePolicy cachePolicy;
		[Export ("cachePolicy", ArgumentSemantic.Assign)]
		NSURLRequestCachePolicy CachePolicy { get; set; }

		// @property NSTimeInterval timeoutInterval;
		[Export ("timeoutInterval")]
		double TimeoutInterval { get; set; }

		// @property (copy) NSURL * _Nullable mainDocumentURL;
		[NullAllowed, Export ("mainDocumentURL", ArgumentSemantic.Copy)]
		NSURL MainDocumentURL { get; set; }

		// @property NSURLRequestNetworkServiceType networkServiceType __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Export ("networkServiceType", ArgumentSemantic.Assign)]
		NSURLRequestNetworkServiceType NetworkServiceType { get; set; }

		// @property BOOL allowsCellularAccess __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Export ("allowsCellularAccess")]
		bool AllowsCellularAccess { get; set; }

		// @property BOOL allowsExpensiveNetworkAccess __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("allowsExpensiveNetworkAccess")]
		bool AllowsExpensiveNetworkAccess { get; set; }

		// @property BOOL allowsConstrainedNetworkAccess __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("allowsConstrainedNetworkAccess")]
		bool AllowsConstrainedNetworkAccess { get; set; }

		// @property BOOL assumesHTTP3Capable __attribute__((availability(macos, introduced=11.3))) __attribute__((availability(ios, introduced=14.5))) __attribute__((availability(watchos, introduced=7.4))) __attribute__((availability(tvos, introduced=14.5)));
		[Watch (7, 4), TV (14, 5), Mac (11, 3), iOS (14, 5)]
		[Export ("assumesHTTP3Capable")]
		bool AssumesHTTP3Capable { get; set; }

		// @property NSURLRequestAttribution attribution __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[Export ("attribution", ArgumentSemantic.Assign)]
		NSURLRequestAttribution Attribution { get; set; }

		// @property BOOL requiresDNSSECValidation __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.1))) __attribute__((availability(watchos, introduced=9.1))) __attribute__((availability(tvos, introduced=16.1)));
		[Watch (9, 1), TV (16, 1), Mac (13, 0), iOS (16, 1)]
		[Export ("requiresDNSSECValidation")]
		bool RequiresDNSSECValidation { get; set; }
	}

	// @interface NSHTTPURLRequest (NSURLRequest)
	[Category]
	[BaseType (typeof(NSURLRequest))]
	interface NSURLRequest_NSHTTPURLRequest
	{
		// @property (readonly, copy) NSString * _Nullable HTTPMethod;
		[NullAllowed, Export ("HTTPMethod")]
		string HTTPMethod { get; }

		// @property (readonly, copy) NSDictionary<NSString *,NSString *> * _Nullable allHTTPHeaderFields;
		[NullAllowed, Export ("allHTTPHeaderFields", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSString> AllHTTPHeaderFields { get; }

		// -(NSString * _Nullable)valueForHTTPHeaderField:(NSString * _Nonnull)field;
		[Export ("valueForHTTPHeaderField:")]
		[return: NullAllowed]
		string ValueForHTTPHeaderField (string field);

		// @property (readonly, copy) NSData * _Nullable HTTPBody;
		[NullAllowed, Export ("HTTPBody", ArgumentSemantic.Copy)]
		NSData HTTPBody { get; }

		// @property (readonly, retain) NSInputStream * _Nullable HTTPBodyStream;
		[NullAllowed, Export ("HTTPBodyStream", ArgumentSemantic.Retain)]
		NSInputStream HTTPBodyStream { get; }

		// @property (readonly) BOOL HTTPShouldHandleCookies;
		[Export ("HTTPShouldHandleCookies")]
		bool HTTPShouldHandleCookies { get; }

		// @property (readonly) BOOL HTTPShouldUsePipelining __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Export ("HTTPShouldUsePipelining")]
		bool HTTPShouldUsePipelining { get; }
	}

	// @interface NSMutableHTTPURLRequest (NSMutableURLRequest)
	[Category]
	[BaseType (typeof(NSMutableURLRequest))]
	interface NSMutableURLRequest_NSMutableHTTPURLRequest
	{
		// @property (copy) NSString * _Nonnull HTTPMethod;
		[Export ("HTTPMethod")]
		string HTTPMethod { get; set; }

		// @property (copy) NSDictionary<NSString *,NSString *> * _Nullable allHTTPHeaderFields;
		[NullAllowed, Export ("allHTTPHeaderFields", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSString> AllHTTPHeaderFields { get; set; }

		// -(void)setValue:(NSString * _Nullable)value forHTTPHeaderField:(NSString * _Nonnull)field;
		[Export ("setValue:forHTTPHeaderField:")]
		void SetValue ([NullAllowed] string value, string field);

		// -(void)addValue:(NSString * _Nonnull)value forHTTPHeaderField:(NSString * _Nonnull)field;
		[Export ("addValue:forHTTPHeaderField:")]
		void AddValue (string value, string field);

		// @property (copy) NSData * _Nullable HTTPBody;
		[NullAllowed, Export ("HTTPBody", ArgumentSemantic.Copy)]
		NSData HTTPBody { get; set; }

		// @property (retain) NSInputStream * _Nullable HTTPBodyStream;
		[NullAllowed, Export ("HTTPBodyStream", ArgumentSemantic.Retain)]
		NSInputStream HTTPBodyStream { get; set; }

		// @property BOOL HTTPShouldHandleCookies;
		[Export ("HTTPShouldHandleCookies")]
		bool HTTPShouldHandleCookies { get; set; }

		// @property BOOL HTTPShouldUsePipelining __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (4, 0)]
		[Export ("HTTPShouldUsePipelining")]
		bool HTTPShouldUsePipelining { get; set; }
	}

	// @interface NSURLResponse : NSObject <NSSecureCoding, NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLResponse : INSSecureCoding, INSCopying
	{
		// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)URL MIMEType:(NSString * _Nullable)MIMEType expectedContentLength:(NSInteger)length textEncodingName:(NSString * _Nullable)name __attribute__((objc_designated_initializer));
		[Export ("initWithURL:MIMEType:expectedContentLength:textEncodingName:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSURL URL, [NullAllowed] string MIMEType, nint length, [NullAllowed] string name);

		// @property (readonly, copy) NSURL * _Nullable URL;
		[NullAllowed, Export ("URL", ArgumentSemantic.Copy)]
		NSURL URL { get; }

		// @property (readonly, copy) NSString * _Nullable MIMEType;
		[NullAllowed, Export ("MIMEType")]
		string MIMEType { get; }

		// @property (readonly) long long expectedContentLength;
		[Export ("expectedContentLength")]
		long ExpectedContentLength { get; }

		// @property (readonly, copy) NSString * _Nullable textEncodingName;
		[NullAllowed, Export ("textEncodingName")]
		string TextEncodingName { get; }

		// @property (readonly, copy) NSString * _Nullable suggestedFilename;
		[NullAllowed, Export ("suggestedFilename")]
		string SuggestedFilename { get; }
	}

	// @interface NSHTTPURLResponse : NSURLResponse
	[Watch (2,0), TV (9,0), Mac (10,2), iOS (2,0)]
	[BaseType (typeof(NSURLResponse))]
	interface NSHTTPURLResponse
	{
		// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url statusCode:(NSInteger)statusCode HTTPVersion:(NSString * _Nullable)HTTPVersion headerFields:(NSDictionary<NSString *,NSString *> * _Nullable)headerFields __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("initWithURL:statusCode:HTTPVersion:headerFields:")]
		NativeHandle Constructor (NSURL url, nint statusCode, [NullAllowed] string HTTPVersion, [NullAllowed] NSDictionary<NSString, NSString> headerFields);

		// @property (readonly) NSInteger statusCode;
		[Export ("statusCode")]
		nint StatusCode { get; }

		// @property (readonly, copy) NSDictionary * _Nonnull allHeaderFields;
		[Export ("allHeaderFields", ArgumentSemantic.Copy)]
		NSDictionary AllHeaderFields { get; }

		// -(NSString * _Nullable)valueForHTTPHeaderField:(NSString * _Nonnull)field __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("valueForHTTPHeaderField:")]
		[return: NullAllowed]
		string ValueForHTTPHeaderField (string field);

		// +(NSString * _Nonnull)localizedStringForStatusCode:(NSInteger)statusCode;
		[Static]
		[Export ("localizedStringForStatusCode:")]
		string LocalizedStringForStatusCode (nint statusCode);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSGlobalDomain;
		[Field ("NSGlobalDomain", "__Internal")]
		NSString NSGlobalDomain { get; }

		// extern NSString *const _Nonnull NSArgumentDomain;
		[Field ("NSArgumentDomain", "__Internal")]
		NSString NSArgumentDomain { get; }

		// extern NSString *const _Nonnull NSRegistrationDomain;
		[Field ("NSRegistrationDomain", "__Internal")]
		NSString NSRegistrationDomain { get; }
	}

	// @interface NSUserDefaults : NSObject
	[BaseType (typeof(NSObject))]
	interface NSUserDefaults
	{
		// @property (readonly, strong, class) NSUserDefaults * _Nonnull standardUserDefaults;
		[Static]
		[Export ("standardUserDefaults", ArgumentSemantic.Strong)]
		NSUserDefaults StandardUserDefaults { get; }

		// +(void)resetStandardUserDefaults;
		[Static]
		[Export ("resetStandardUserDefaults")]
		void ResetStandardUserDefaults ();

		// -(instancetype _Nullable)initWithSuiteName:(NSString * _Nullable)suitename __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((objc_designated_initializer));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("initWithSuiteName:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] string suitename);

		// -(id _Nullable)initWithUser:(NSString * _Nonnull)username __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Use -init instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use -init instead")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Use -init instead")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use -init instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use -init instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use -init instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use -init instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use -init instead")]
		[Export ("initWithUser:")]
		NativeHandle Constructor (string username);

		// -(id _Nullable)objectForKey:(NSString * _Nonnull)defaultName;
		[Export ("objectForKey:")]
		[return: NullAllowed]
		NSObject ObjectForKey (string defaultName);

		// -(void)setObject:(id _Nullable)value forKey:(NSString * _Nonnull)defaultName;
		[Export ("setObject:forKey:")]
		void SetObject ([NullAllowed] NSObject value, string defaultName);

		// -(void)removeObjectForKey:(NSString * _Nonnull)defaultName;
		[Export ("removeObjectForKey:")]
		void RemoveObjectForKey (string defaultName);

		// -(NSString * _Nullable)stringForKey:(NSString * _Nonnull)defaultName;
		[Export ("stringForKey:")]
		[return: NullAllowed]
		string StringForKey (string defaultName);

		// -(NSArray * _Nullable)arrayForKey:(NSString * _Nonnull)defaultName;
		[Export ("arrayForKey:")]
		[return: NullAllowed]
		NSObject[] ArrayForKey (string defaultName);

		// -(NSDictionary<NSString *,id> * _Nullable)dictionaryForKey:(NSString * _Nonnull)defaultName;
		[Export ("dictionaryForKey:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> DictionaryForKey (string defaultName);

		// -(NSData * _Nullable)dataForKey:(NSString * _Nonnull)defaultName;
		[Export ("dataForKey:")]
		[return: NullAllowed]
		NSData DataForKey (string defaultName);

		// -(NSArray<NSString *> * _Nullable)stringArrayForKey:(NSString * _Nonnull)defaultName;
		[Export ("stringArrayForKey:")]
		[return: NullAllowed]
		string[] StringArrayForKey (string defaultName);

		// -(NSInteger)integerForKey:(NSString * _Nonnull)defaultName;
		[Export ("integerForKey:")]
		nint IntegerForKey (string defaultName);

		// -(float)floatForKey:(NSString * _Nonnull)defaultName;
		[Export ("floatForKey:")]
		float FloatForKey (string defaultName);

		// -(double)doubleForKey:(NSString * _Nonnull)defaultName;
		[Export ("doubleForKey:")]
		double DoubleForKey (string defaultName);

		// -(BOOL)boolForKey:(NSString * _Nonnull)defaultName;
		[Export ("boolForKey:")]
		bool BoolForKey (string defaultName);

		// -(NSURL * _Nullable)URLForKey:(NSString * _Nonnull)defaultName __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("URLForKey:")]
		[return: NullAllowed]
		NSURL URLForKey (string defaultName);

		// -(void)setInteger:(NSInteger)value forKey:(NSString * _Nonnull)defaultName;
		[Export ("setInteger:forKey:")]
		void SetInteger (nint value, string defaultName);

		// -(void)setFloat:(float)value forKey:(NSString * _Nonnull)defaultName;
		[Export ("setFloat:forKey:")]
		void SetFloat (float value, string defaultName);

		// -(void)setDouble:(double)value forKey:(NSString * _Nonnull)defaultName;
		[Export ("setDouble:forKey:")]
		void SetDouble (double value, string defaultName);

		// -(void)setBool:(BOOL)value forKey:(NSString * _Nonnull)defaultName;
		[Export ("setBool:forKey:")]
		void SetBool (bool value, string defaultName);

		// -(void)setURL:(NSURL * _Nullable)url forKey:(NSString * _Nonnull)defaultName __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("setURL:forKey:")]
		void SetURL ([NullAllowed] NSURL url, string defaultName);

		// -(void)registerDefaults:(NSDictionary<NSString *,id> * _Nonnull)registrationDictionary;
		[Export ("registerDefaults:")]
		void RegisterDefaults (NSDictionary<NSString, NSObject> registrationDictionary);

		// -(void)addSuiteNamed:(NSString * _Nonnull)suiteName;
		[Export ("addSuiteNamed:")]
		void AddSuiteNamed (string suiteName);

		// -(void)removeSuiteNamed:(NSString * _Nonnull)suiteName;
		[Export ("removeSuiteNamed:")]
		void RemoveSuiteNamed (string suiteName);

		// -(NSDictionary<NSString *,id> * _Nonnull)dictionaryRepresentation;
		[Export ("dictionaryRepresentation")]
		NSDictionary<NSString, NSObject> DictionaryRepresentation { get; }

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull volatileDomainNames;
		[Export ("volatileDomainNames", ArgumentSemantic.Copy)]
		string[] VolatileDomainNames { get; }

		// -(NSDictionary<NSString *,id> * _Nonnull)volatileDomainForName:(NSString * _Nonnull)domainName;
		[Export ("volatileDomainForName:")]
		NSDictionary<NSString, NSObject> VolatileDomainForName (string domainName);

		// -(void)setVolatileDomain:(NSDictionary<NSString *,id> * _Nonnull)domain forName:(NSString * _Nonnull)domainName;
		[Export ("setVolatileDomain:forName:")]
		void SetVolatileDomain (NSDictionary<NSString, NSObject> domain, string domainName);

		// -(void)removeVolatileDomainForName:(NSString * _Nonnull)domainName;
		[Export ("removeVolatileDomainForName:")]
		void RemoveVolatileDomainForName (string domainName);

		// -(NSArray * _Nonnull)persistentDomainNames __attribute__((availability(macos, introduced=10.0, deprecated=10.9))) __attribute__((availability(ios, introduced=2.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 0, message: "Not recommended")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Not recommended")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not recommended")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Not recommended")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not recommended")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not recommended")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not recommended")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not recommended")]
		[Export ("persistentDomainNames")]
		NSObject[] PersistentDomainNames { get; }

		// -(NSDictionary<NSString *,id> * _Nullable)persistentDomainForName:(NSString * _Nonnull)domainName;
		[Export ("persistentDomainForName:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> PersistentDomainForName (string domainName);

		// -(void)setPersistentDomain:(NSDictionary<NSString *,id> * _Nonnull)domain forName:(NSString * _Nonnull)domainName;
		[Export ("setPersistentDomain:forName:")]
		void SetPersistentDomain (NSDictionary<NSString, NSObject> domain, string domainName);

		// -(void)removePersistentDomainForName:(NSString * _Nonnull)domainName;
		[Export ("removePersistentDomainForName:")]
		void RemovePersistentDomainForName (string domainName);

		// -(BOOL)synchronize;
		[Export ("synchronize")]
		bool Synchronize { get; }

		// -(BOOL)objectIsForcedForKey:(NSString * _Nonnull)key;
		[Export ("objectIsForcedForKey:")]
		bool ObjectIsForcedForKey (string key);

		// -(BOOL)objectIsForcedForKey:(NSString * _Nonnull)key inDomain:(NSString * _Nonnull)domain;
		[Export ("objectIsForcedForKey:inDomain:")]
		bool ObjectIsForcedForKey (string key, string domain);
	}

	[Static]
	partial interface Constants
	{
		// extern API_UNAVAILABLE(macos) const NSNotificationName NSUserDefaultsSizeLimitExceededNotification __attribute__((availability(ios, introduced=9.3))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 3)]
		[Field ("NSUserDefaultsSizeLimitExceededNotification", "__Internal")]
		NSString NSUserDefaultsSizeLimitExceededNotification { get; }

		// extern API_UNAVAILABLE(macos) const NSNotificationName NSUbiquitousUserDefaultsNoCloudAccountNotification __attribute__((availability(ios, introduced=9.3))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 3)]
		[Field ("NSUbiquitousUserDefaultsNoCloudAccountNotification", "__Internal")]
		NSString NSUbiquitousUserDefaultsNoCloudAccountNotification { get; }

		// extern API_UNAVAILABLE(macos) const NSNotificationName NSUbiquitousUserDefaultsDidChangeAccountsNotification __attribute__((availability(ios, introduced=9.3))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 3)]
		[Field ("NSUbiquitousUserDefaultsDidChangeAccountsNotification", "__Internal")]
		NSString NSUbiquitousUserDefaultsDidChangeAccountsNotification { get; }

		// extern API_UNAVAILABLE(macos) const NSNotificationName NSUbiquitousUserDefaultsCompletedInitialSyncNotification __attribute__((availability(ios, introduced=9.3))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (9, 3)]
		[Field ("NSUbiquitousUserDefaultsCompletedInitialSyncNotification", "__Internal")]
		NSString NSUbiquitousUserDefaultsCompletedInitialSyncNotification { get; }

		// extern const NSNotificationName _Nonnull NSUserDefaultsDidChangeNotification;
		[Field ("NSUserDefaultsDidChangeNotification", "__Internal")]
		NSString NSUserDefaultsDidChangeNotification { get; }

		// extern const NSValueTransformerName _Nonnull NSNegateBooleanTransformerName __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (3, 0)]
		[Field ("NSNegateBooleanTransformerName", "__Internal")]
		NSString NSNegateBooleanTransformerName { get; }

		// extern const NSValueTransformerName _Nonnull NSIsNilTransformerName __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (3, 0)]
		[Field ("NSIsNilTransformerName", "__Internal")]
		NSString NSIsNilTransformerName { get; }

		// extern const NSValueTransformerName _Nonnull NSIsNotNilTransformerName __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (3, 0)]
		[Field ("NSIsNotNilTransformerName", "__Internal")]
		NSString NSIsNotNilTransformerName { get; }

		// extern const NSValueTransformerName _Nonnull NSUnarchiveFromDataTransformerName __attribute__((availability(macos, introduced=10.3, deprecated=10.14))) __attribute__((availability(ios, introduced=3.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 3)]
		[Deprecated (PlatformName.MacOSX, 10, 14)]
		[Introduced (PlatformName.iOS, 3, 0)]
		[Deprecated (PlatformName.iOS, 12, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 5, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 12, 0)]
		[Field ("NSUnarchiveFromDataTransformerName", "__Internal")]
		NSString NSUnarchiveFromDataTransformerName { get; }

		// extern const NSValueTransformerName _Nonnull NSKeyedUnarchiveFromDataTransformerName __attribute__((availability(macos, introduced=10.3, deprecated=10.14))) __attribute__((availability(ios, introduced=3.0, deprecated=12.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=5.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=12.0)));
		[Introduced (PlatformName.MacOSX, 10, 3)]
		[Deprecated (PlatformName.MacOSX, 10, 14)]
		[Introduced (PlatformName.iOS, 3, 0)]
		[Deprecated (PlatformName.iOS, 12, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 5, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 12, 0)]
		[Field ("NSKeyedUnarchiveFromDataTransformerName", "__Internal")]
		NSString NSKeyedUnarchiveFromDataTransformerName { get; }

		// extern const NSValueTransformerName _Nonnull NSSecureUnarchiveFromDataTransformerName __attribute__((availability(macos, introduced=10.14))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, introduced=12.0)));
		[Watch (5, 0), TV (12, 0), Mac (10, 14), iOS (12, 0)]
		[Field ("NSSecureUnarchiveFromDataTransformerName", "__Internal")]
		NSString NSSecureUnarchiveFromDataTransformerName { get; }
	}

	// @interface NSValueTransformer : NSObject
	[Watch (2,0), TV (9,0), Mac (10,3), iOS (3,0)]
	[BaseType (typeof(NSObject))]
	interface NSValueTransformer
	{
		// +(void)setValueTransformer:(NSValueTransformer * _Nullable)transformer forName:(NSValueTransformerName _Nonnull)name;
		[Static]
		[Export ("setValueTransformer:forName:")]
		void SetValueTransformer ([NullAllowed] NSValueTransformer transformer, string name);

		// +(NSValueTransformer * _Nullable)valueTransformerForName:(NSValueTransformerName _Nonnull)name;
		[Static]
		[Export ("valueTransformerForName:")]
		[return: NullAllowed]
		NSValueTransformer ValueTransformerForName (string name);

		// +(NSArray<NSValueTransformerName> * _Nonnull)valueTransformerNames;
		[Static]
		[Export ("valueTransformerNames")]
		string[] ValueTransformerNames { get; }

		// +(Class _Nonnull)transformedValueClass;
		[Static]
		[Export ("transformedValueClass")]
		Class TransformedValueClass { get; }

		// +(BOOL)allowsReverseTransformation;
		[Static]
		[Export ("allowsReverseTransformation")]
		bool AllowsReverseTransformation { get; }

		// -(id _Nullable)transformedValue:(id _Nullable)value;
		[Export ("transformedValue:")]
		[return: NullAllowed]
		NSObject TransformedValue ([NullAllowed] NSObject value);

		// -(id _Nullable)reverseTransformedValue:(id _Nullable)value;
		[Export ("reverseTransformedValue:")]
		[return: NullAllowed]
		NSObject ReverseTransformedValue ([NullAllowed] NSObject value);
	}

	// @interface NSSecureUnarchiveFromDataTransformer : NSValueTransformer
	[Watch (5,0), TV (12,0), Mac (10,14), iOS (12,0)]
	[BaseType (typeof(NSValueTransformer))]
	interface NSSecureUnarchiveFromDataTransformer
	{
		// @property (readonly, copy, class) NSArray<Class> * _Nonnull allowedTopLevelClasses;
		[Static]
		[Export ("allowedTopLevelClasses", ArgumentSemantic.Copy)]
		Class[] AllowedTopLevelClasses { get; }
	}

	// @interface NSXMLParser : NSObject
	[BaseType (typeof(NSObject))]
	interface NSXMLParser
	{
		// -(instancetype _Nullable)initWithContentsOfURL:(NSURL * _Nonnull)url;
		[Export ("initWithContentsOfURL:")]
		NativeHandle Constructor (NSURL url);

		// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
		[Export ("initWithData:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSData data);

		// -(instancetype _Nonnull)initWithStream:(NSInputStream * _Nonnull)stream __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("initWithStream:")]
		NativeHandle Constructor (NSInputStream stream);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSXMLParserDelegate Delegate { get; set; }

		// @property (assign) id<NSXMLParserDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// @property BOOL shouldProcessNamespaces;
		[Export ("shouldProcessNamespaces")]
		bool ShouldProcessNamespaces { get; set; }

		// @property BOOL shouldReportNamespacePrefixes;
		[Export ("shouldReportNamespacePrefixes")]
		bool ShouldReportNamespacePrefixes { get; set; }

		// @property NSXMLParserExternalEntityResolvingPolicy externalEntityResolvingPolicy __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[Export ("externalEntityResolvingPolicy", ArgumentSemantic.Assign)]
		NSXMLParserExternalEntityResolvingPolicy ExternalEntityResolvingPolicy { get; set; }

		// @property (copy) NSSet<NSURL *> * _Nullable allowedExternalEntityURLs __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[NullAllowed, Export ("allowedExternalEntityURLs", ArgumentSemantic.Copy)]
		NSSet<NSURL> AllowedExternalEntityURLs { get; set; }

		// -(BOOL)parse;
		[Export ("parse")]
		bool Parse { get; }

		// -(void)abortParsing;
		[Export ("abortParsing")]
		void AbortParsing ();

		// @property (readonly, copy) NSError * _Nullable parserError;
		[NullAllowed, Export ("parserError", ArgumentSemantic.Copy)]
		NSError ParserError { get; }

		// @property BOOL shouldResolveExternalEntities;
		[Export ("shouldResolveExternalEntities")]
		bool ShouldResolveExternalEntities { get; set; }
	}

	// @interface NSXMLParserLocatorAdditions (NSXMLParser)
	[Category]
	[BaseType (typeof(NSXMLParser))]
	interface NSXMLParser_NSXMLParserLocatorAdditions
	{
		// @property (readonly, copy) NSString * _Nullable publicID;
		[NullAllowed, Export ("publicID")]
		string PublicID { get; }

		// @property (readonly, copy) NSString * _Nullable systemID;
		[NullAllowed, Export ("systemID")]
		string SystemID { get; }

		// @property (readonly) NSInteger lineNumber;
		[Export ("lineNumber")]
		nint LineNumber { get; }

		// @property (readonly) NSInteger columnNumber;
		[Export ("columnNumber")]
		nint ColumnNumber { get; }
	}

	// @protocol NSXMLParserDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSXMLParserDelegate
	{
		// @optional -(void)parserDidStartDocument:(NSXMLParser * _Nonnull)parser;
		[Export ("parserDidStartDocument:")]
		void ParserDidStartDocument (NSXMLParser parser);

		// @optional -(void)parserDidEndDocument:(NSXMLParser * _Nonnull)parser;
		[Export ("parserDidEndDocument:")]
		void ParserDidEndDocument (NSXMLParser parser);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundNotationDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID;
		[Export ("parser:foundNotationDeclarationWithName:publicID:systemID:")]
		void Parser (NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundUnparsedEntityDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID notationName:(NSString * _Nullable)notationName;
		[Export ("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:")]
		void Parser (NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID, [NullAllowed] string notationName);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundAttributeDeclarationWithName:(NSString * _Nonnull)attributeName forElement:(NSString * _Nonnull)elementName type:(NSString * _Nullable)type defaultValue:(NSString * _Nullable)defaultValue;
		[Export ("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:")]
		void Parser (NSXMLParser parser, string attributeName, string elementName, [NullAllowed] string type, [NullAllowed] string defaultValue);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundElementDeclarationWithName:(NSString * _Nonnull)elementName model:(NSString * _Nonnull)model;
		[Export ("parser:foundElementDeclarationWithName:model:")]
		void Parser (NSXMLParser parser, string elementName, string model);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundInternalEntityDeclarationWithName:(NSString * _Nonnull)name value:(NSString * _Nullable)value;
		[Export ("parser:foundInternalEntityDeclarationWithName:value:")]
		void Parser (NSXMLParser parser, string name, [NullAllowed] string value);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundExternalEntityDeclarationWithName:(NSString * _Nonnull)name publicID:(NSString * _Nullable)publicID systemID:(NSString * _Nullable)systemID;
		[Export ("parser:foundExternalEntityDeclarationWithName:publicID:systemID:")]
		void Parser (NSXMLParser parser, string name, [NullAllowed] string publicID, [NullAllowed] string systemID);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *,NSString *> * _Nonnull)attributeDict;
		[Export ("parser:didStartElement:namespaceURI:qualifiedName:attributes:")]
		void Parser (NSXMLParser parser, string elementName, [NullAllowed] string namespaceURI, [NullAllowed] string qName, NSDictionary<NSString, NSString> attributeDict);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
		[Export ("parser:didEndElement:namespaceURI:qualifiedName:")]
		void Parser (NSXMLParser parser, string elementName, [NullAllowed] string namespaceURI, [NullAllowed] string qName);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser didStartMappingPrefix:(NSString * _Nonnull)prefix toURI:(NSString * _Nonnull)namespaceURI;
		[Export ("parser:didStartMappingPrefix:toURI:")]
		void Parser (NSXMLParser parser, string prefix, string namespaceURI);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser didEndMappingPrefix:(NSString * _Nonnull)prefix;
		[Export ("parser:didEndMappingPrefix:")]
		void Parser (NSXMLParser parser, string prefix);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
		[Export ("parser:foundCharacters:")]
		void Parser (NSXMLParser parser, string @string);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundIgnorableWhitespace:(NSString * _Nonnull)whitespaceString;
		[Export ("parser:foundIgnorableWhitespace:")]
		void Parser (NSXMLParser parser, string whitespaceString);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundProcessingInstructionWithTarget:(NSString * _Nonnull)target data:(NSString * _Nullable)data;
		[Export ("parser:foundProcessingInstructionWithTarget:data:")]
		void Parser (NSXMLParser parser, string target, [NullAllowed] string data);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundComment:(NSString * _Nonnull)comment;
		[Export ("parser:foundComment:")]
		void Parser (NSXMLParser parser, string comment);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
		[Export ("parser:foundCDATA:")]
		void Parser (NSXMLParser parser, NSData CDATABlock);

		// @optional -(NSData * _Nullable)parser:(NSXMLParser * _Nonnull)parser resolveExternalEntityName:(NSString * _Nonnull)name systemID:(NSString * _Nullable)systemID;
		[Export ("parser:resolveExternalEntityName:systemID:")]
		[return: NullAllowed]
		NSData Parser (NSXMLParser parser, string name, [NullAllowed] string systemID);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
		[Export ("parser:parseErrorOccurred:")]
		void Parser (NSXMLParser parser, NSError parseError);

		// @optional -(void)parser:(NSXMLParser * _Nonnull)parser validationErrorOccurred:(NSError * _Nonnull)validationError;
		[Export ("parser:validationErrorOccurred:")]
		void Parser (NSXMLParser parser, NSError validationError);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSErrorDomain _Nonnull NSXMLParserErrorDomain __attribute__((availability(macos, introduced=10.3))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 3), iOS (2, 0)]
		[Field ("NSXMLParserErrorDomain", "__Internal")]
		NSString NSXMLParserErrorDomain { get; }
	}

	// @protocol NSXPCProxyCreating
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	interface NSXPCProxyCreating
	{
		// @required -(id _Nonnull)remoteObjectProxy;
		[Abstract]
		[Export ("remoteObjectProxy")]
		NSObject RemoteObjectProxy { get; }

		// @required -(id _Nonnull)remoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler;
		[Abstract]
		[Export ("remoteObjectProxyWithErrorHandler:")]
		NSObject RemoteObjectProxyWithErrorHandler (Action<NSError> handler);

		// @optional -(id _Nonnull)synchronousRemoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("synchronousRemoteObjectProxyWithErrorHandler:")]
		NSObject SynchronousRemoteObjectProxyWithErrorHandler (Action<NSError> handler);
	}

	// @interface NSXPCConnection : NSObject <NSXPCProxyCreating>
	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSXPCConnection : INSXPCProxyCreating
	{
		// -(instancetype _Nonnull)initWithServiceName:(NSString * _Nonnull)serviceName __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS]
		[Export ("initWithServiceName:")]
		NativeHandle Constructor (string serviceName);

		// @property (readonly, copy) NSString * _Nullable serviceName;
		[NullAllowed, Export ("serviceName")]
		string ServiceName { get; }

		// -(instancetype _Nonnull)initWithMachServiceName:(NSString * _Nonnull)name options:(NSXPCConnectionOptions)options __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS]
		[Export ("initWithMachServiceName:options:")]
		NativeHandle Constructor (string name, NSXPCConnectionOptions options);

		// -(instancetype _Nonnull)initWithListenerEndpoint:(NSXPCListenerEndpoint * _Nonnull)endpoint;
		[Export ("initWithListenerEndpoint:")]
		NativeHandle Constructor (NSXPCListenerEndpoint endpoint);

		// @property (readonly, retain) NSXPCListenerEndpoint * _Nonnull endpoint;
		[Export ("endpoint", ArgumentSemantic.Retain)]
		NSXPCListenerEndpoint Endpoint { get; }

		// @property (retain) NSXPCInterface * _Nullable exportedInterface;
		[NullAllowed, Export ("exportedInterface", ArgumentSemantic.Retain)]
		NSXPCInterface ExportedInterface { get; set; }

		// @property (retain) id _Nullable exportedObject;
		[NullAllowed, Export ("exportedObject", ArgumentSemantic.Retain)]
		NSObject ExportedObject { get; set; }

		// @property (retain) NSXPCInterface * _Nullable remoteObjectInterface;
		[NullAllowed, Export ("remoteObjectInterface", ArgumentSemantic.Retain)]
		NSXPCInterface RemoteObjectInterface { get; set; }

		// @property (readonly, retain) id _Nonnull remoteObjectProxy;
		[Export ("remoteObjectProxy", ArgumentSemantic.Retain)]
		NSObject RemoteObjectProxy { get; }

		// -(id _Nonnull)remoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler;
		[Export ("remoteObjectProxyWithErrorHandler:")]
		NSObject RemoteObjectProxyWithErrorHandler (Action<NSError> handler);

		// -(id _Nonnull)synchronousRemoteObjectProxyWithErrorHandler:(void (^ _Nonnull)(NSError * _Nonnull))handler __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("synchronousRemoteObjectProxyWithErrorHandler:")]
		NSObject SynchronousRemoteObjectProxyWithErrorHandler (Action<NSError> handler);

		// @property (copy) void (^ _Nullable)(void) interruptionHandler;
		[NullAllowed, Export ("interruptionHandler", ArgumentSemantic.Copy)]
		Action InterruptionHandler { get; set; }

		// @property (copy) void (^ _Nullable)(void) invalidationHandler;
		[NullAllowed, Export ("invalidationHandler", ArgumentSemantic.Copy)]
		Action InvalidationHandler { get; set; }

		// -(void)resume;
		[Export ("resume")]
		void Resume ();

		// -(void)suspend;
		[Export ("suspend")]
		void Suspend ();

		// -(void)activate __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Export ("activate")]
		void Activate ();

		// -(void)invalidate;
		[Export ("invalidate")]
		void Invalidate ();

		// @property (readonly) au_asid_t auditSessionIdentifier;
		[Export ("auditSessionIdentifier")]
		int AuditSessionIdentifier { get; }

		// @property (readonly) pid_t processIdentifier;
		[Export ("processIdentifier")]
		int ProcessIdentifier { get; }

		// @property (readonly) uid_t effectiveUserIdentifier;
		[Export ("effectiveUserIdentifier")]
		uint EffectiveUserIdentifier { get; }

		// @property (readonly) gid_t effectiveGroupIdentifier;
		[Export ("effectiveGroupIdentifier")]
		uint EffectiveGroupIdentifier { get; }

		// +(NSXPCConnection * _Nullable)currentConnection __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_attr("@_unavailableFromAsync(message: "currentConnection cannot be used from async contexts.")")));
		[Watch (2, 0), TV (9, 0), Mac (10, 8), iOS (6, 0)]
		[Static]
		[NullAllowed, Export ("currentConnection")]
		NSXPCConnection CurrentConnection { get; }

		// -(void)scheduleSendBarrierBlock:(void (^ _Nonnull)(void))block __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("scheduleSendBarrierBlock:")]
		void ScheduleSendBarrierBlock (Action block);

		// -(void)setCodeSigningRequirement:(NSString * _Nonnull)requirement __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (13,0)]
		[Export ("setCodeSigningRequirement:")]
		void SetCodeSigningRequirement (string requirement);
	}

	// @interface NSXPCListener : NSObject
	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSXPCListener
	{
		// +(NSXPCListener * _Nonnull)serviceListener;
		[Static]
		[Export ("serviceListener")]
		NSXPCListener ServiceListener { get; }

		// +(NSXPCListener * _Nonnull)anonymousListener;
		[Static]
		[Export ("anonymousListener")]
		NSXPCListener AnonymousListener { get; }

		// -(instancetype _Nonnull)initWithMachServiceName:(NSString * _Nonnull)name __attribute__((objc_designated_initializer)) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS]
		[Export ("initWithMachServiceName:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string name);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSXPCListenerDelegate Delegate { get; set; }

		// @property (weak) id<NSXPCListenerDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (readonly, retain) NSXPCListenerEndpoint * _Nonnull endpoint;
		[Export ("endpoint", ArgumentSemantic.Retain)]
		NSXPCListenerEndpoint Endpoint { get; }

		// -(void)resume;
		[Export ("resume")]
		void Resume ();

		// -(void)suspend;
		[Export ("suspend")]
		void Suspend ();

		// -(void)activate __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7,0), TV (14,0), Mac (11,0), iOS (14,0)]
		[Export ("activate")]
		void Activate ();

		// -(void)invalidate;
		[Export ("invalidate")]
		void Invalidate ();

		// -(void)setConnectionCodeSigningRequirement:(NSString * _Nonnull)requirement __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, unavailable))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (13,0)]
		[Export ("setConnectionCodeSigningRequirement:")]
		void SetConnectionCodeSigningRequirement (string requirement);
	}

	// @protocol NSXPCListenerDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSXPCListenerDelegate
	{
		// @optional -(BOOL)listener:(NSXPCListener * _Nonnull)listener shouldAcceptNewConnection:(NSXPCConnection * _Nonnull)newConnection;
		[Export ("listener:shouldAcceptNewConnection:")]
		bool ShouldAcceptNewConnection (NSXPCListener listener, NSXPCConnection newConnection);
	}

	// @interface NSXPCInterface : NSObject
	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSXPCInterface
	{
		// +(NSXPCInterface * _Nonnull)interfaceWithProtocol:(Protocol * _Nonnull)protocol;
		[Static]
		[Export ("interfaceWithProtocol:")]
		NSXPCInterface InterfaceWithProtocol (Protocol protocol);

		// @property (assign) Protocol * _Nonnull protocol;
		[Export ("protocol", ArgumentSemantic.Assign)]
		Protocol Protocol { get; set; }

		// -(void)setClasses:(NSSet<Class> * _Nonnull)classes forSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
		[Export ("setClasses:forSelector:argumentIndex:ofReply:")]
		void SetClasses (NSSet<Class> classes, Selector sel, nuint arg, bool ofReply);

		// -(NSSet<Class> * _Nonnull)classesForSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
		[Export ("classesForSelector:argumentIndex:ofReply:")]
		NSSet<Class> ClassesForSelector (Selector sel, nuint arg, bool ofReply);

		// -(void)setInterface:(NSXPCInterface * _Nonnull)ifc forSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
		[Export ("setInterface:forSelector:argumentIndex:ofReply:")]
		void SetInterface (NSXPCInterface ifc, Selector sel, nuint arg, bool ofReply);

		// -(NSXPCInterface * _Nullable)interfaceForSelector:(SEL _Nonnull)sel argumentIndex:(NSUInteger)arg ofReply:(BOOL)ofReply;
		[Export ("interfaceForSelector:argumentIndex:ofReply:")]
		[return: NullAllowed]
		NSXPCInterface InterfaceForSelector (Selector sel, nuint arg, bool ofReply);
	}

	// @interface NSXPCListenerEndpoint : NSObject <NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSXPCListenerEndpoint : INSSecureCoding
	{
	}

	// @interface NSXPCCoder : NSCoder
	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	[BaseType (typeof(NSCoder))]
	interface NSXPCCoder
	{
		// @property (retain) id<NSObject> _Nullable userInfo;
		[NullAllowed, Export ("userInfo", ArgumentSemantic.Retain)]
		NSObject UserInfo { get; set; }

		// @property (readonly, strong) NSXPCConnection * _Nullable connection __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 12), iOS (10, 0)]
		[NullAllowed, Export ("connection", ArgumentSemantic.Strong)]
		NSXPCConnection Connection { get; }
	}

	// @interface NSByteCountFormatter : NSFormatter
	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSByteCountFormatter
	{
		// +(NSString * _Nonnull)stringFromByteCount:(long long)byteCount countStyle:(NSByteCountFormatterCountStyle)countStyle;
		[Static]
		[Export ("stringFromByteCount:countStyle:")]
		string StringFromByteCount (long byteCount, NSByteCountFormatterCountStyle countStyle);

		// -(NSString * _Nonnull)stringFromByteCount:(long long)byteCount;
		[Export ("stringFromByteCount:")]
		string StringFromByteCount (long byteCount);

		// +(NSString * _Nonnull)stringFromMeasurement:(NSMeasurement<NSUnitInformationStorage *> * _Nonnull)measurement countStyle:(NSByteCountFormatterCountStyle)countStyle __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Static]
		[Export ("stringFromMeasurement:countStyle:")]
		string StringFromMeasurement (NSMeasurement<NSUnitInformationStorage> measurement, NSByteCountFormatterCountStyle countStyle);

		// -(NSString * _Nonnull)stringFromMeasurement:(NSMeasurement<NSUnitInformationStorage *> * _Nonnull)measurement __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(tvos, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("stringFromMeasurement:")]
		string StringFromMeasurement (NSMeasurement<NSUnitInformationStorage> measurement);

		// -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
		[Export ("stringForObjectValue:")]
		[return: NullAllowed]
		string StringForObjectValue ([NullAllowed] NSObject obj);

		// @property NSByteCountFormatterUnits allowedUnits;
		[Export ("allowedUnits", ArgumentSemantic.Assign)]
		NSByteCountFormatterUnits AllowedUnits { get; set; }

		// @property NSByteCountFormatterCountStyle countStyle;
		[Export ("countStyle", ArgumentSemantic.Assign)]
		NSByteCountFormatterCountStyle CountStyle { get; set; }

		// @property BOOL allowsNonnumericFormatting;
		[Export ("allowsNonnumericFormatting")]
		bool AllowsNonnumericFormatting { get; set; }

		// @property BOOL includesUnit;
		[Export ("includesUnit")]
		bool IncludesUnit { get; set; }

		// @property BOOL includesCount;
		[Export ("includesCount")]
		bool IncludesCount { get; set; }

		// @property BOOL includesActualByteCount;
		[Export ("includesActualByteCount")]
		bool IncludesActualByteCount { get; set; }

		// @property (getter = isAdaptive) BOOL adaptive;
		[Export ("adaptive")]
		bool Adaptive { [Bind ("isAdaptive")] get; set; }

		// @property BOOL zeroPadsFractionDigits;
		[Export ("zeroPadsFractionDigits")]
		bool ZeroPadsFractionDigits { get; set; }

		// @property NSFormattingContext formattingContext __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("formattingContext", ArgumentSemantic.Assign)]
		NSFormattingContext FormattingContext { get; set; }
	}

	// audit-objc-generics: @interface NSCache<KeyType, ObjectType> : NSObject
	[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
	[BaseType (typeof(NSObject))]
	interface NSCache
	{
		// @property (copy) NSString * _Nonnull name;
		[Export ("name")]
		string Name { get; set; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSCacheDelegate Delegate { get; set; }

		// @property (assign) id<NSCacheDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// -(ObjectType _Nullable)objectForKey:(KeyType _Nonnull)key;
		[Export ("objectForKey:")]
		[return: NullAllowed]
		NSObject ObjectForKey (NSObject key);

		// -(void)setObject:(ObjectType _Nonnull)obj forKey:(KeyType _Nonnull)key;
		[Export ("setObject:forKey:")]
		void SetObject (NSObject obj, NSObject key);

		// -(void)setObject:(ObjectType _Nonnull)obj forKey:(KeyType _Nonnull)key cost:(NSUInteger)g;
		[Export ("setObject:forKey:cost:")]
		void SetObject (NSObject obj, NSObject key, nuint g);

		// -(void)removeObjectForKey:(KeyType _Nonnull)key;
		[Export ("removeObjectForKey:")]
		void RemoveObjectForKey (NSObject key);

		// -(void)removeAllObjects;
		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		// @property NSUInteger totalCostLimit;
		[Export ("totalCostLimit")]
		nuint TotalCostLimit { get; set; }

		// @property NSUInteger countLimit;
		[Export ("countLimit")]
		nuint CountLimit { get; set; }

		// @property BOOL evictsObjectsWithDiscardedContent;
		[Export ("evictsObjectsWithDiscardedContent")]
		bool EvictsObjectsWithDiscardedContent { get; set; }
	}

	// @protocol NSCacheDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSCacheDelegate
	{
		// @optional -(void)cache:(NSCache * _Nonnull)cache willEvictObject:(id _Nonnull)obj;
		[Export ("cache:willEvictObject:")]
		void WillEvictObject (NSCache cache, NSObject obj);
	}

	// @interface NSPredicate : NSObject <NSSecureCoding, NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,4), iOS (3,0)]
	[BaseType (typeof(NSObject))]
	interface NSPredicate : INSSecureCoding, INSCopying
	{
		[StructLayout (LayoutKind.Sequential)]
		public struct _predicateFlags
		{
			public uint _evaluationBlocked;

			public uint _reservedPredicateFlags;
		}


		// +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat argumentArray:(NSArray * _Nullable)arguments;
		[Static]
		[Export ("predicateWithFormat:argumentArray:")]
		NSPredicate PredicateWithFormat (string predicateFormat, [NullAllowed] NSObject[] arguments);

		// +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat, ...;
		[Static, Internal]
		[Export ("predicateWithFormat:", IsVariadic = true)]
		NSPredicate PredicateWithFormat (string predicateFormat, IntPtr varArgs);

		// +(NSPredicate * _Nonnull)predicateWithFormat:(NSString * _Nonnull)predicateFormat arguments:(va_list)argList;
		[Static]
		[Export ("predicateWithFormat:arguments:")]
		unsafe NSPredicate PredicateWithFormat (string predicateFormat, sbyte* argList);

		// +(NSPredicate * _Nullable)predicateFromMetadataQueryString:(NSString * _Nonnull)queryString __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,9)]
		[Static]
		[Export ("predicateFromMetadataQueryString:")]
		[return: NullAllowed]
		NSPredicate PredicateFromMetadataQueryString (string queryString);

		// +(NSPredicate * _Nonnull)predicateWithValue:(BOOL)value;
		[Static]
		[Export ("predicateWithValue:")]
		NSPredicate PredicateWithValue (bool value);

		// +(NSPredicate * _Nonnull)predicateWithBlock:(BOOL (^ _Nonnull)(id _Nullable, NSDictionary<NSString *,id> * _Nullable))block __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("predicateWithBlock:")]
		NSPredicate PredicateWithBlock (Func<NSObject, NSDictionary<NSString, NSObject>, bool> block);

		// @property (readonly, copy) NSString * _Nonnull predicateFormat;
		[Export ("predicateFormat")]
		string PredicateFormat { get; }

		// -(instancetype _Nonnull)predicateWithSubstitutionVariables:(NSDictionary<NSString *,id> * _Nonnull)variables;
		[Export ("predicateWithSubstitutionVariables:")]
		NSPredicate PredicateWithSubstitutionVariables (NSDictionary<NSString, NSObject> variables);

		// -(BOOL)evaluateWithObject:(id _Nullable)object;
		[Export ("evaluateWithObject:")]
		bool EvaluateWithObject ([NullAllowed] NSObject @object);

		// -(BOOL)evaluateWithObject:(id _Nullable)object substitutionVariables:(NSDictionary<NSString *,id> * _Nullable)bindings __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Export ("evaluateWithObject:substitutionVariables:")]
		bool EvaluateWithObject ([NullAllowed] NSObject @object, [NullAllowed] NSDictionary<NSString, NSObject> bindings);

		// -(void)allowEvaluation __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("allowEvaluation")]
		void AllowEvaluation ();
	}

	// @interface NSPredicateSupport (NSArray)
	[Category]
	[BaseType (typeof(NSArray))]
	interface NSArray_NSPredicateSupport
	{
		// -(NSArray<ObjectType> * _Nonnull)filteredArrayUsingPredicate:(NSPredicate * _Nonnull)predicate;
		[Export ("filteredArrayUsingPredicate:")]
		NSObject[] FilteredArrayUsingPredicate (NSPredicate predicate);
	}

	// @interface NSPredicateSupport (NSMutableArray)
	[Category]
	[BaseType (typeof(NSMutableArray))]
	interface NSMutableArray_NSPredicateSupport
	{
		// -(void)filterUsingPredicate:(NSPredicate * _Nonnull)predicate;
		[Export ("filterUsingPredicate:")]
		void FilterUsingPredicate (NSPredicate predicate);
	}

	// @interface NSPredicateSupport (NSSet)
	[Category]
	[BaseType (typeof(NSSet))]
	interface NSSet_NSPredicateSupport
	{
		// -(NSSet<ObjectType> * _Nonnull)filteredSetUsingPredicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Export ("filteredSetUsingPredicate:")]
		NSSet<NSObject> FilteredSetUsingPredicate (NSPredicate predicate);
	}

	// @interface NSPredicateSupport (NSMutableSet)
	[Category]
	[BaseType (typeof(NSMutableSet))]
	interface NSMutableSet_NSPredicateSupport
	{
		// -(void)filterUsingPredicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Export ("filterUsingPredicate:")]
		void FilterUsingPredicate (NSPredicate predicate);
	}

	// @interface NSPredicateSupport (NSOrderedSet)
	[Category]
	[BaseType (typeof(NSOrderedSet))]
	interface NSOrderedSet_NSPredicateSupport
	{
		// -(NSOrderedSet<ObjectType> * _Nonnull)filteredOrderedSetUsingPredicate:(NSPredicate * _Nonnull)p __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("filteredOrderedSetUsingPredicate:")]
		NSOrderedSet<NSObject> FilteredOrderedSetUsingPredicate (NSPredicate p);
	}

	// @interface NSPredicateSupport (NSMutableOrderedSet)
	[Category]
	[BaseType (typeof(NSMutableOrderedSet))]
	interface NSMutableOrderedSet_NSPredicateSupport
	{
		// -(void)filterUsingPredicate:(NSPredicate * _Nonnull)p __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("filterUsingPredicate:")]
		void FilterUsingPredicate (NSPredicate p);
	}

	// @interface NSComparisonPredicate : NSPredicate
	[Watch (2,0), TV (9,0), Mac (10,4), iOS (3,0)]
	[BaseType (typeof(NSPredicate))]
	interface NSComparisonPredicate
	{
		// +(NSComparisonPredicate * _Nonnull)predicateWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options;
		[Static]
		[Export ("predicateWithLeftExpression:rightExpression:modifier:type:options:")]
		NSComparisonPredicate PredicateWithLeftExpression (NSExpression lhs, NSExpression rhs, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, NSComparisonPredicateOptions options);

		// +(NSComparisonPredicate * _Nonnull)predicateWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs customSelector:(SEL _Nonnull)selector;
		[Static]
		[Export ("predicateWithLeftExpression:rightExpression:customSelector:")]
		NSComparisonPredicate PredicateWithLeftExpression (NSExpression lhs, NSExpression rhs, Selector selector);

		// -(instancetype _Nonnull)initWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options __attribute__((objc_designated_initializer));
		[Export ("initWithLeftExpression:rightExpression:modifier:type:options:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSExpression lhs, NSExpression rhs, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, NSComparisonPredicateOptions options);

		// -(instancetype _Nonnull)initWithLeftExpression:(NSExpression * _Nonnull)lhs rightExpression:(NSExpression * _Nonnull)rhs customSelector:(SEL _Nonnull)selector __attribute__((objc_designated_initializer));
		[Export ("initWithLeftExpression:rightExpression:customSelector:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSExpression lhs, NSExpression rhs, Selector selector);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// @property (readonly) NSPredicateOperatorType predicateOperatorType;
		[Export ("predicateOperatorType")]
		NSPredicateOperatorType PredicateOperatorType { get; }

		// @property (readonly) NSComparisonPredicateModifier comparisonPredicateModifier;
		[Export ("comparisonPredicateModifier")]
		NSComparisonPredicateModifier ComparisonPredicateModifier { get; }

		// @property (readonly, retain) NSExpression * _Nonnull leftExpression;
		[Export ("leftExpression", ArgumentSemantic.Retain)]
		NSExpression LeftExpression { get; }

		// @property (readonly, retain) NSExpression * _Nonnull rightExpression;
		[Export ("rightExpression", ArgumentSemantic.Retain)]
		NSExpression RightExpression { get; }

		// @property (readonly) SEL _Nullable customSelector;
		[NullAllowed, Export ("customSelector")]
		Selector CustomSelector { get; }

		// @property (readonly) NSComparisonPredicateOptions options;
		[Export ("options")]
		NSComparisonPredicateOptions Options { get; }
	}

	// @interface NSCompoundPredicate : NSPredicate
	[Watch (2,0), TV (9,0), Mac (10,4), iOS (3,0)]
	[BaseType (typeof(NSPredicate))]
	interface NSCompoundPredicate
	{
		// -(instancetype _Nonnull)initWithType:(NSCompoundPredicateType)type subpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates __attribute__((objc_designated_initializer));
		[Export ("initWithType:subpredicates:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCompoundPredicateType type, NSPredicate[] subpredicates);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// @property (readonly) NSCompoundPredicateType compoundPredicateType;
		[Export ("compoundPredicateType")]
		NSCompoundPredicateType CompoundPredicateType { get; }

		// @property (readonly, copy) NSArray * _Nonnull subpredicates;
		[Export ("subpredicates", ArgumentSemantic.Copy)]
		NSObject[] Subpredicates { get; }

		// +(NSCompoundPredicate * _Nonnull)andPredicateWithSubpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates __attribute__((swift_name("init(andPredicateWithSubpredicates:)")));
		[Static]
		[Export ("andPredicateWithSubpredicates:")]
		NSCompoundPredicate AndPredicateWithSubpredicates (NSPredicate[] subpredicates);

		// +(NSCompoundPredicate * _Nonnull)orPredicateWithSubpredicates:(NSArray<NSPredicate *> * _Nonnull)subpredicates __attribute__((swift_name("init(orPredicateWithSubpredicates:)")));
		[Static]
		[Export ("orPredicateWithSubpredicates:")]
		NSCompoundPredicate OrPredicateWithSubpredicates (NSPredicate[] subpredicates);

		// +(NSCompoundPredicate * _Nonnull)notPredicateWithSubpredicate:(NSPredicate * _Nonnull)predicate __attribute__((swift_name("init(notPredicateWithSubpredicate:)")));
		[Static]
		[Export ("notPredicateWithSubpredicate:")]
		NSCompoundPredicate NotPredicateWithSubpredicate (NSPredicate predicate);
	}

	// @interface NSDateComponentsFormatter : NSFormatter
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSFormatter))]
	interface NSDateComponentsFormatter
	{
		// -(NSString * _Nullable)stringForObjectValue:(id _Nullable)obj;
		[Export ("stringForObjectValue:")]
		[return: NullAllowed]
		string StringForObjectValue ([NullAllowed] NSObject obj);

		// -(NSString * _Nullable)stringFromDateComponents:(NSDateComponents * _Nonnull)components;
		[Export ("stringFromDateComponents:")]
		[return: NullAllowed]
		string StringFromDateComponents (NSDateComponents components);

		// -(NSString * _Nullable)stringFromDate:(NSDate * _Nonnull)startDate toDate:(NSDate * _Nonnull)endDate;
		[Export ("stringFromDate:toDate:")]
		[return: NullAllowed]
		string StringFromDate (NSDate startDate, NSDate endDate);

		// -(NSString * _Nullable)stringFromTimeInterval:(NSTimeInterval)ti;
		[Export ("stringFromTimeInterval:")]
		[return: NullAllowed]
		string StringFromTimeInterval (double ti);

		// +(NSString * _Nullable)localizedStringFromDateComponents:(NSDateComponents * _Nonnull)components unitsStyle:(NSDateComponentsFormatterUnitsStyle)unitsStyle;
		[Static]
		[Export ("localizedStringFromDateComponents:unitsStyle:")]
		[return: NullAllowed]
		string LocalizedStringFromDateComponents (NSDateComponents components, NSDateComponentsFormatterUnitsStyle unitsStyle);

		// @property NSDateComponentsFormatterUnitsStyle unitsStyle;
		[Export ("unitsStyle", ArgumentSemantic.Assign)]
		NSDateComponentsFormatterUnitsStyle UnitsStyle { get; set; }

		// @property NSCalendarUnit allowedUnits;
		[Export ("allowedUnits", ArgumentSemantic.Assign)]
		NSCalendarUnit AllowedUnits { get; set; }

		// @property NSDateComponentsFormatterZeroFormattingBehavior zeroFormattingBehavior;
		[Export ("zeroFormattingBehavior", ArgumentSemantic.Assign)]
		NSDateComponentsFormatterZeroFormattingBehavior ZeroFormattingBehavior { get; set; }

		// @property (copy) NSCalendar * _Nullable calendar;
		[NullAllowed, Export ("calendar", ArgumentSemantic.Copy)]
		NSCalendar Calendar { get; set; }

		// @property (copy) NSDate * _Nullable referenceDate __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[NullAllowed, Export ("referenceDate", ArgumentSemantic.Copy)]
		NSDate ReferenceDate { get; set; }

		// @property BOOL allowsFractionalUnits;
		[Export ("allowsFractionalUnits")]
		bool AllowsFractionalUnits { get; set; }

		// @property NSInteger maximumUnitCount;
		[Export ("maximumUnitCount")]
		nint MaximumUnitCount { get; set; }

		// @property BOOL collapsesLargestUnit;
		[Export ("collapsesLargestUnit")]
		bool CollapsesLargestUnit { get; set; }

		// @property BOOL includesApproximationPhrase;
		[Export ("includesApproximationPhrase")]
		bool IncludesApproximationPhrase { get; set; }

		// @property BOOL includesTimeRemainingPhrase;
		[Export ("includesTimeRemainingPhrase")]
		bool IncludesTimeRemainingPhrase { get; set; }

		// @property NSFormattingContext formattingContext;
		[Export ("formattingContext", ArgumentSemantic.Assign)]
		NSFormattingContext FormattingContext { get; set; }

		// -(BOOL)getObjectValue:(id  _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error;
		[Export ("getObjectValue:forString:errorDescription:")]
		bool GetObjectValue ([NullAllowed] out NSObject obj, string @string, [NullAllowed] out string error);
	}

	// @interface NSExpression : NSObject <NSSecureCoding, NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,4), iOS (3,0)]
	[BaseType (typeof(NSObject))]
	interface NSExpression : INSSecureCoding, INSCopying
	{
		[StructLayout (LayoutKind.Sequential)]
		public struct _expressionFlags
		{
			public uint _evaluationBlocked;

			public uint _usesKVC;

			public uint _validatedExpression;

			public uint _validatedKeys;

			public uint _reservedExpressionFlags;
		}


		// +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat argumentArray:(NSArray * _Nonnull)arguments __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("expressionWithFormat:argumentArray:")]
		NSExpression ExpressionWithFormat (string expressionFormat, NSObject[] arguments);

		// +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat, ... __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static, Internal]
		[Export ("expressionWithFormat:", IsVariadic = true)]
		NSExpression ExpressionWithFormat (string expressionFormat, IntPtr varArgs);

		// +(NSExpression * _Nonnull)expressionWithFormat:(NSString * _Nonnull)expressionFormat arguments:(va_list)argList __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("expressionWithFormat:arguments:")]
		unsafe NSExpression ExpressionWithFormat (string expressionFormat, sbyte* argList);

		// +(NSExpression * _Nonnull)expressionForConstantValue:(id _Nullable)obj;
		[Static]
		[Export ("expressionForConstantValue:")]
		NSExpression ExpressionForConstantValue ([NullAllowed] NSObject obj);

		// +(NSExpression * _Nonnull)expressionForEvaluatedObject;
		[Static]
		[Export ("expressionForEvaluatedObject")]
		NSExpression ExpressionForEvaluatedObject { get; }

		// +(NSExpression * _Nonnull)expressionForVariable:(NSString * _Nonnull)string;
		[Static]
		[Export ("expressionForVariable:")]
		NSExpression ExpressionForVariable (string @string);

		// +(NSExpression * _Nonnull)expressionForKeyPath:(NSString * _Nonnull)keyPath;
		[Static]
		[Export ("expressionForKeyPath:")]
		NSExpression ExpressionForKeyPath (string keyPath);

		// +(NSExpression * _Nonnull)expressionForFunction:(NSString * _Nonnull)name arguments:(NSArray * _Nonnull)parameters;
		[Static]
		[Export ("expressionForFunction:arguments:")]
		NSExpression ExpressionForFunction (string name, NSObject[] parameters);

		// +(NSExpression * _Nonnull)expressionForAggregate:(NSArray<NSExpression *> * _Nonnull)subexpressions __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Static]
		[Export ("expressionForAggregate:")]
		NSExpression ExpressionForAggregate (NSExpression[] subexpressions);

		// +(NSExpression * _Nonnull)expressionForUnionSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Static]
		[Export ("expressionForUnionSet:with:")]
		NSExpression ExpressionForUnionSet (NSExpression left, NSExpression right);

		// +(NSExpression * _Nonnull)expressionForIntersectSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Static]
		[Export ("expressionForIntersectSet:with:")]
		NSExpression ExpressionForIntersectSet (NSExpression left, NSExpression right);

		// +(NSExpression * _Nonnull)expressionForMinusSet:(NSExpression * _Nonnull)left with:(NSExpression * _Nonnull)right __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Static]
		[Export ("expressionForMinusSet:with:")]
		NSExpression ExpressionForMinusSet (NSExpression left, NSExpression right);

		// +(NSExpression * _Nonnull)expressionForSubquery:(NSExpression * _Nonnull)expression usingIteratorVariable:(NSString * _Nonnull)variable predicate:(NSPredicate * _Nonnull)predicate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Static]
		[Export ("expressionForSubquery:usingIteratorVariable:predicate:")]
		NSExpression ExpressionForSubquery (NSExpression expression, string variable, NSPredicate predicate);

		// +(NSExpression * _Nonnull)expressionForFunction:(NSExpression * _Nonnull)target selectorName:(NSString * _Nonnull)name arguments:(NSArray * _Nullable)parameters __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (3,0)]
		[Static]
		[Export ("expressionForFunction:selectorName:arguments:")]
		NSExpression ExpressionForFunction (NSExpression target, string name, [NullAllowed] NSObject[] parameters);

		// +(NSExpression * _Nonnull)expressionForAnyKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Static]
		[Export ("expressionForAnyKey")]
		NSExpression ExpressionForAnyKey { get; }

		// +(NSExpression * _Nonnull)expressionForBlock:(id  _Nonnull (^ _Nonnull)(id _Nullable, NSArray<NSExpression *> * _Nonnull, NSMutableDictionary * _Nullable))block arguments:(NSArray<NSExpression *> * _Nullable)arguments __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Static]
		[Export ("expressionForBlock:arguments:")]
		NSExpression ExpressionForBlock (Func<NSObject, NSArray<NSExpression>, NSMutableDictionary, NSObject> block, [NullAllowed] NSExpression[] arguments);

		// +(NSExpression * _Nonnull)expressionForConditional:(NSPredicate * _Nonnull)predicate trueExpression:(NSExpression * _Nonnull)trueExpression falseExpression:(NSExpression * _Nonnull)falseExpression __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Static]
		[Export ("expressionForConditional:trueExpression:falseExpression:")]
		NSExpression ExpressionForConditional (NSPredicate predicate, NSExpression trueExpression, NSExpression falseExpression);

		// -(instancetype _Nonnull)initWithExpressionType:(NSExpressionType)type __attribute__((objc_designated_initializer));
		[Export ("initWithExpressionType:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSExpressionType type);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)coder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder coder);

		// @property (readonly) NSExpressionType expressionType;
		[Export ("expressionType")]
		NSExpressionType ExpressionType { get; }

		// @property (readonly, retain) id _Nullable constantValue;
		[NullAllowed, Export ("constantValue", ArgumentSemantic.Retain)]
		NSObject ConstantValue { get; }

		// @property (readonly, copy) NSString * _Nonnull keyPath;
		[Export ("keyPath")]
		string KeyPath { get; }

		// @property (readonly, copy) NSString * _Nonnull function;
		[Export ("function")]
		string Function { get; }

		// @property (readonly, copy) NSString * _Nonnull variable;
		[Export ("variable")]
		string Variable { get; }

		// @property (readonly, copy) NSExpression * _Nonnull operand;
		[Export ("operand", ArgumentSemantic.Copy)]
		NSExpression Operand { get; }

		// @property (readonly, copy) NSArray<NSExpression *> * _Nullable arguments;
		[NullAllowed, Export ("arguments", ArgumentSemantic.Copy)]
		NSExpression[] Arguments { get; }

		// @property (readonly, retain) id _Nonnull collection __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (3, 0)]
		[Export ("collection", ArgumentSemantic.Retain)]
		NSObject Collection { get; }

		// @property (readonly, copy) NSPredicate * _Nonnull predicate __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (3, 0)]
		[Export ("predicate", ArgumentSemantic.Copy)]
		NSPredicate Predicate { get; }

		// @property (readonly, copy) NSExpression * _Nonnull leftExpression __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (3, 0)]
		[Export ("leftExpression", ArgumentSemantic.Copy)]
		NSExpression LeftExpression { get; }

		// @property (readonly, copy) NSExpression * _Nonnull rightExpression __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (3, 0)]
		[Export ("rightExpression", ArgumentSemantic.Copy)]
		NSExpression RightExpression { get; }

		// @property (readonly, copy) NSExpression * _Nonnull trueExpression __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("trueExpression", ArgumentSemantic.Copy)]
		NSExpression TrueExpression { get; }

		// @property (readonly, copy) NSExpression * _Nonnull falseExpression __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("falseExpression", ArgumentSemantic.Copy)]
		NSExpression FalseExpression { get; }

		// @property (readonly, copy) id  _Nonnull (^ _Nonnull)(id _Nullable, NSArray<NSExpression *> * _Nonnull, NSMutableDictionary * _Nullable) expressionBlock __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[Export ("expressionBlock", ArgumentSemantic.Copy)]
		Func<NSObject, NSArray<NSExpression>, NSMutableDictionary, NSObject> ExpressionBlock { get; }

		// -(id _Nullable)expressionValueWithObject:(id _Nullable)object context:(NSMutableDictionary * _Nullable)context;
		[Export ("expressionValueWithObject:context:")]
		[return: NullAllowed]
		NSObject ExpressionValueWithObject ([NullAllowed] NSObject @object, [NullAllowed] NSMutableDictionary context);

		// -(void)allowEvaluation __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("allowEvaluation")]
		void AllowEvaluation ();
	}

	// @interface NSExtensionContext : NSObject
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSObject))]
	interface NSExtensionContext
	{
		// @property (readonly, copy, nonatomic) NSArray * _Nonnull inputItems;
		[Export ("inputItems", ArgumentSemantic.Copy)]
		NSObject[] InputItems { get; }

		// -(void)completeRequestReturningItems:(NSArray * _Nullable)items completionHandler:(void (^ _Nullable)(BOOL))completionHandler __attribute__((swift_async("none")));
		[Export ("completeRequestReturningItems:completionHandler:")]
		void CompleteRequestReturningItems ([NullAllowed] NSObject[] items, [NullAllowed] Action<bool> completionHandler);

		// -(void)cancelRequestWithError:(NSError * _Nonnull)error;
		[Export ("cancelRequestWithError:")]
		void CancelRequestWithError (NSError error);

		// -(void)openURL:(NSURL * _Nonnull)URL completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
		[Export ("openURL:completionHandler:")]
		void OpenURL (NSURL URL, [NullAllowed] Action<bool> completionHandler);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Null_unspecified NSExtensionItemsAndErrorsKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSExtensionItemsAndErrorsKey", "__Internal")]
		NSString NSExtensionItemsAndErrorsKey { get; }

		// extern API_UNAVAILABLE(macos) NSString *const NSExtensionHostWillEnterForegroundNotification __attribute__((availability(ios, introduced=8.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (8, 2)]
		[Field ("NSExtensionHostWillEnterForegroundNotification", "__Internal")]
		NSString NSExtensionHostWillEnterForegroundNotification { get; }

		// extern API_UNAVAILABLE(macos) NSString *const NSExtensionHostDidEnterBackgroundNotification __attribute__((availability(ios, introduced=8.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (8, 2)]
		[Field ("NSExtensionHostDidEnterBackgroundNotification", "__Internal")]
		NSString NSExtensionHostDidEnterBackgroundNotification { get; }

		// extern API_UNAVAILABLE(macos) NSString *const NSExtensionHostWillResignActiveNotification __attribute__((availability(ios, introduced=8.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (8, 2)]
		[Field ("NSExtensionHostWillResignActiveNotification", "__Internal")]
		NSString NSExtensionHostWillResignActiveNotification { get; }

		// extern API_UNAVAILABLE(macos) NSString *const NSExtensionHostDidBecomeActiveNotification __attribute__((availability(ios, introduced=8.2))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(macos, unavailable)));
		[Watch (2, 0), TV (9, 0), NoMac, iOS (8, 2)]
		[Field ("NSExtensionHostDidBecomeActiveNotification", "__Internal")]
		NSString NSExtensionHostDidBecomeActiveNotification { get; }
	}

	// @interface NSExtensionItem : NSObject <NSCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSObject))]
	interface NSExtensionItem : INSCopying, INSSecureCoding
	{
		// @property (copy, nonatomic) NSAttributedString * _Nullable attributedTitle;
		[NullAllowed, Export ("attributedTitle", ArgumentSemantic.Copy)]
		NSAttributedString AttributedTitle { get; set; }

		// @property (copy, nonatomic) NSAttributedString * _Nullable attributedContentText;
		[NullAllowed, Export ("attributedContentText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedContentText { get; set; }

		// @property (copy, nonatomic) NSArray<NSItemProvider *> * _Nullable attachments;
		[NullAllowed, Export ("attachments", ArgumentSemantic.Copy)]
		NSItemProvider[] Attachments { get; set; }

		// @property (copy, nonatomic) NSDictionary * _Nullable userInfo;
		[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary UserInfo { get; set; }
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Null_unspecified NSExtensionItemAttributedTitleKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSExtensionItemAttributedTitleKey", "__Internal")]
		NSString NSExtensionItemAttributedTitleKey { get; }

		// extern NSString *const _Null_unspecified NSExtensionItemAttributedContentTextKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSExtensionItemAttributedContentTextKey", "__Internal")]
		NSString NSExtensionItemAttributedContentTextKey { get; }

		// extern NSString *const _Null_unspecified NSExtensionItemAttachmentsKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSExtensionItemAttachmentsKey", "__Internal")]
		NSString NSExtensionItemAttachmentsKey { get; }
	}

	// @protocol NSExtensionRequestHandling <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface NSExtensionRequestHandling
	{
		// @required -(void)beginRequestWithExtensionContext:(NSExtensionContext * _Nonnull)context;
		[Abstract]
		[Export ("beginRequestWithExtensionContext:")]
		void BeginRequestWithExtensionContext (NSExtensionContext context);
	}

	// @interface NSFileAccessIntent : NSObject
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSObject))]
	interface NSFileAccessIntent
	{
		// +(instancetype _Nonnull)readingIntentWithURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorReadingOptions)options;
		[Static]
		[Export ("readingIntentWithURL:options:")]
		NSFileAccessIntent ReadingIntentWithURL (NSURL url, NSFileCoordinatorReadingOptions options);

		// +(instancetype _Nonnull)writingIntentWithURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorWritingOptions)options;
		[Static]
		[Export ("writingIntentWithURL:options:")]
		NSFileAccessIntent WritingIntentWithURL (NSURL url, NSFileCoordinatorWritingOptions options);

		// @property (readonly, copy) NSURL * _Nonnull URL;
		[Export ("URL", ArgumentSemantic.Copy)]
		NSURL URL { get; }
	}

	// @interface NSFileCoordinator : NSObject
	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSFileCoordinator
	{
		// +(void)addFilePresenter:(id<NSFilePresenter> _Nonnull)filePresenter;
		[Static]
		[Export ("addFilePresenter:")]
		void AddFilePresenter (NSFilePresenter filePresenter);

		// +(void)removeFilePresenter:(id<NSFilePresenter> _Nonnull)filePresenter;
		[Static]
		[Export ("removeFilePresenter:")]
		void RemoveFilePresenter (NSFilePresenter filePresenter);

		// @property (readonly, copy, class) NSArray<id<NSFilePresenter>> * _Nonnull filePresenters;
		[Static]
		[Export ("filePresenters", ArgumentSemantic.Copy)]
		NSFilePresenter[] FilePresenters { get; }

		// -(instancetype _Nonnull)initWithFilePresenter:(id<NSFilePresenter> _Nullable)filePresenterOrNil __attribute__((objc_designated_initializer));
		[Export ("initWithFilePresenter:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] NSFilePresenter filePresenterOrNil);

		// @property (copy) NSString * _Nonnull purposeIdentifier __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("purposeIdentifier")]
		string PurposeIdentifier { get; set; }

		// -(void)coordinateAccessWithIntents:(NSArray<NSFileAccessIntent *> * _Nonnull)intents queue:(NSOperationQueue * _Nonnull)queue byAccessor:(void (^ _Nonnull)(NSError * _Nullable))accessor __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Export ("coordinateAccessWithIntents:queue:byAccessor:")]
		void CoordinateAccessWithIntents (NSFileAccessIntent[] intents, NSOperationQueue queue, Action<NSError> accessor);

		// -(void)coordinateReadingItemAtURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorReadingOptions)options error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull))reader;
		[Export ("coordinateReadingItemAtURL:options:error:byAccessor:")]
		void CoordinateReadingItemAtURL (NSURL url, NSFileCoordinatorReadingOptions options, [NullAllowed] out NSError outError, Action<NSURL> reader);

		// -(void)coordinateWritingItemAtURL:(NSURL * _Nonnull)url options:(NSFileCoordinatorWritingOptions)options error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull))writer;
		[Export ("coordinateWritingItemAtURL:options:error:byAccessor:")]
		void CoordinateWritingItemAtURL (NSURL url, NSFileCoordinatorWritingOptions options, [NullAllowed] out NSError outError, Action<NSURL> writer);

		// -(void)coordinateReadingItemAtURL:(NSURL * _Nonnull)readingURL options:(NSFileCoordinatorReadingOptions)readingOptions writingItemAtURL:(NSURL * _Nonnull)writingURL options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull, NSURL * _Nonnull))readerWriter;
		[Export ("coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")]
		void CoordinateReadingItemAtURL (NSURL readingURL, NSFileCoordinatorReadingOptions readingOptions, NSURL writingURL, NSFileCoordinatorWritingOptions writingOptions, [NullAllowed] out NSError outError, Action<NSURL, NSURL> readerWriter);

		// -(void)coordinateWritingItemAtURL:(NSURL * _Nonnull)url1 options:(NSFileCoordinatorWritingOptions)options1 writingItemAtURL:(NSURL * _Nonnull)url2 options:(NSFileCoordinatorWritingOptions)options2 error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(NSURL * _Nonnull, NSURL * _Nonnull))writer;
		[Export ("coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")]
		void CoordinateWritingItemAtURL (NSURL url1, NSFileCoordinatorWritingOptions options1, NSURL url2, NSFileCoordinatorWritingOptions options2, [NullAllowed] out NSError outError, Action<NSURL, NSURL> writer);

		// -(void)prepareForReadingItemsAtURLs:(NSArray<NSURL *> * _Nonnull)readingURLs options:(NSFileCoordinatorReadingOptions)readingOptions writingItemsAtURLs:(NSArray<NSURL *> * _Nonnull)writingURLs options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError * _Nullable * _Nullable)outError byAccessor:(void (^ _Nonnull)(void (^ _Nonnull)(void)))batchAccessor;
		[Export ("prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:")]
		void PrepareForReadingItemsAtURLs (NSURL[] readingURLs, NSFileCoordinatorReadingOptions readingOptions, NSURL[] writingURLs, NSFileCoordinatorWritingOptions writingOptions, [NullAllowed] out NSError outError, Action<Action> batchAccessor);

		// -(void)itemAtURL:(NSURL * _Nonnull)oldURL willMoveToURL:(NSURL * _Nonnull)newURL __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, introduced=6.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
		[Export ("itemAtURL:willMoveToURL:")]
		void ItemAtURL (NSURL oldURL, NSURL newURL);

		// -(void)itemAtURL:(NSURL * _Nonnull)oldURL didMoveToURL:(NSURL * _Nonnull)newURL;
		[Export ("itemAtURL:didMoveToURL:")]
		void ItemAtURL (NSURL oldURL, NSURL newURL);

		// -(void)itemAtURL:(NSURL * _Nonnull)url didChangeUbiquityAttributes:(NSSet<NSURLResourceKey> * _Nonnull)attributes __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10,13), iOS (11,0)]
		[Export ("itemAtURL:didChangeUbiquityAttributes:")]
		void ItemAtURL (NSURL url, NSSet<NSString> attributes);

		// -(void)cancel;
		[Export ("cancel")]
		void Cancel ();
	}

	// @protocol NSFilePresenter <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface NSFilePresenter
	{
		// @required @property (readonly, copy) NSURL * _Nullable presentedItemURL;
		[Abstract]
		[NullAllowed, Export ("presentedItemURL", ArgumentSemantic.Copy)]
		NSURL PresentedItemURL { get; }

		// @required @property (readonly, retain) NSOperationQueue * _Nonnull presentedItemOperationQueue;
		[Abstract]
		[Export ("presentedItemOperationQueue", ArgumentSemantic.Retain)]
		NSOperationQueue PresentedItemOperationQueue { get; }

		// @optional @property (readonly, copy) API_AVAILABLE(macos(10.8)) NSURL * primaryPresentedItemURL __attribute__((availability(macos, introduced=10.8))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 8)]
		[Export ("primaryPresentedItemURL", ArgumentSemantic.Copy)]
		NSURL PrimaryPresentedItemURL { get; }

		// @optional -(void)relinquishPresentedItemToReader:(void (^ _Nonnull)(void (^ _Nullable)(void)))reader;
		[Export ("relinquishPresentedItemToReader:")]
		void RelinquishPresentedItemToReader (Action<Action> reader);

		// @optional -(void)relinquishPresentedItemToWriter:(void (^ _Nonnull)(void (^ _Nullable)(void)))writer;
		[Export ("relinquishPresentedItemToWriter:")]
		void RelinquishPresentedItemToWriter (Action<Action> writer);

		// @optional -(void)savePresentedItemChangesWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
		[Export ("savePresentedItemChangesWithCompletionHandler:")]
		void SavePresentedItemChangesWithCompletionHandler (Action<NSError> completionHandler);

		// @optional -(void)accommodatePresentedItemDeletionWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
		[Export ("accommodatePresentedItemDeletionWithCompletionHandler:")]
		void AccommodatePresentedItemDeletionWithCompletionHandler (Action<NSError> completionHandler);

		// @optional -(void)presentedItemDidMoveToURL:(NSURL * _Nonnull)newURL;
		[Export ("presentedItemDidMoveToURL:")]
		void PresentedItemDidMoveToURL (NSURL newURL);

		// @optional -(void)presentedItemDidChange;
		[Export ("presentedItemDidChange")]
		void PresentedItemDidChange ();

		// @optional -(void)presentedItemDidChangeUbiquityAttributes:(NSSet<NSURLResourceKey> * _Nonnull)attributes __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10,13), iOS (11,0)]
		[Export ("presentedItemDidChangeUbiquityAttributes:")]
		void PresentedItemDidChangeUbiquityAttributes (NSSet<NSString> attributes);

		// @optional @property (readonly, strong) NSSet<NSURLResourceKey> * _Nonnull observedPresentedItemUbiquityAttributes __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 13), iOS (11, 0)]
		[Export ("observedPresentedItemUbiquityAttributes", ArgumentSemantic.Strong)]
		NSSet<NSString> ObservedPresentedItemUbiquityAttributes { get; }

		// @optional -(void)presentedItemDidGainVersion:(NSFileVersion * _Nonnull)version;
		[Export ("presentedItemDidGainVersion:")]
		void PresentedItemDidGainVersion (NSFileVersion version);

		// @optional -(void)presentedItemDidLoseVersion:(NSFileVersion * _Nonnull)version;
		[Export ("presentedItemDidLoseVersion:")]
		void PresentedItemDidLoseVersion (NSFileVersion version);

		// @optional -(void)presentedItemDidResolveConflictVersion:(NSFileVersion * _Nonnull)version;
		[Export ("presentedItemDidResolveConflictVersion:")]
		void PresentedItemDidResolveConflictVersion (NSFileVersion version);

		// @optional -(void)accommodatePresentedSubitemDeletionAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
		[Export ("accommodatePresentedSubitemDeletionAtURL:completionHandler:")]
		void AccommodatePresentedSubitemDeletionAtURL (NSURL url, Action<NSError> completionHandler);

		// @optional -(void)presentedSubitemDidAppearAtURL:(NSURL * _Nonnull)url;
		[Export ("presentedSubitemDidAppearAtURL:")]
		void PresentedSubitemDidAppearAtURL (NSURL url);

		// @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)oldURL didMoveToURL:(NSURL * _Nonnull)newURL;
		[Export ("presentedSubitemAtURL:didMoveToURL:")]
		void PresentedSubitemAtURL (NSURL oldURL, NSURL newURL);

		// @optional -(void)presentedSubitemDidChangeAtURL:(NSURL * _Nonnull)url;
		[Export ("presentedSubitemDidChangeAtURL:")]
		void PresentedSubitemDidChangeAtURL (NSURL url);

		// @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didGainVersion:(NSFileVersion * _Nonnull)version;
		[Export ("presentedSubitemAtURL:didGainVersion:")]
		void PresentedSubitemAtURL (NSURL url, NSFileVersion version);

		// @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didLoseVersion:(NSFileVersion * _Nonnull)version;
		[Export ("presentedSubitemAtURL:didLoseVersion:")]
		void PresentedSubitemAtURL (NSURL url, NSFileVersion version);

		// @optional -(void)presentedSubitemAtURL:(NSURL * _Nonnull)url didResolveConflictVersion:(NSFileVersion * _Nonnull)version;
		[Export ("presentedSubitemAtURL:didResolveConflictVersion:")]
		void PresentedSubitemAtURL (NSURL url, NSFileVersion version);
	}

	// @interface NSFileVersion : NSObject
	[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSFileVersion
	{
		// +(NSFileVersion * _Nullable)currentVersionOfItemAtURL:(NSURL * _Nonnull)url;
		[Static]
		[Export ("currentVersionOfItemAtURL:")]
		[return: NullAllowed]
		NSFileVersion CurrentVersionOfItemAtURL (NSURL url);

		// +(NSArray<NSFileVersion *> * _Nullable)otherVersionsOfItemAtURL:(NSURL * _Nonnull)url;
		[Static]
		[Export ("otherVersionsOfItemAtURL:")]
		[return: NullAllowed]
		NSFileVersion[] OtherVersionsOfItemAtURL (NSURL url);

		// +(NSArray<NSFileVersion *> * _Nullable)unresolvedConflictVersionsOfItemAtURL:(NSURL * _Nonnull)url;
		[Static]
		[Export ("unresolvedConflictVersionsOfItemAtURL:")]
		[return: NullAllowed]
		NSFileVersion[] UnresolvedConflictVersionsOfItemAtURL (NSURL url);

		// +(void)getNonlocalVersionsOfItemAtURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSArray<NSFileVersion *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Static]
		[Export ("getNonlocalVersionsOfItemAtURL:completionHandler:")]
		void GetNonlocalVersionsOfItemAtURL (NSURL url, Action<NSArray<NSFileVersion>, NSError> completionHandler);

		// +(NSFileVersion * _Nullable)versionOfItemAtURL:(NSURL * _Nonnull)url forPersistentIdentifier:(id _Nonnull)persistentIdentifier;
		[Static]
		[Export ("versionOfItemAtURL:forPersistentIdentifier:")]
		[return: NullAllowed]
		NSFileVersion VersionOfItemAtURL (NSURL url, NSObject persistentIdentifier);

		// +(NSFileVersion * _Nullable)addVersionOfItemAtURL:(NSURL * _Nonnull)url withContentsOfURL:(NSURL * _Nonnull)contentsURL options:(NSFileVersionAddingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,7)]
		[Static]
		[Export ("addVersionOfItemAtURL:withContentsOfURL:options:error:")]
		[return: NullAllowed]
		NSFileVersion AddVersionOfItemAtURL (NSURL url, NSURL contentsURL, NSFileVersionAddingOptions options, [NullAllowed] out NSError outError);

		// +(NSURL * _Nonnull)temporaryDirectoryURLForNewVersionOfItemAtURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,7)]
		[Static]
		[Export ("temporaryDirectoryURLForNewVersionOfItemAtURL:")]
		NSURL TemporaryDirectoryURLForNewVersionOfItemAtURL (NSURL url);

		// @property (readonly, copy) NSURL * _Nonnull URL;
		[Export ("URL", ArgumentSemantic.Copy)]
		NSURL URL { get; }

		// @property (readonly, copy) NSString * _Nullable localizedName;
		[NullAllowed, Export ("localizedName")]
		string LocalizedName { get; }

		// @property (readonly, copy) NSString * _Nullable localizedNameOfSavingComputer;
		[NullAllowed, Export ("localizedNameOfSavingComputer")]
		string LocalizedNameOfSavingComputer { get; }

		// @property (readonly, copy) NSPersonNameComponents * _Nullable originatorNameComponents __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[NullAllowed, Export ("originatorNameComponents", ArgumentSemantic.Copy)]
		NSPersonNameComponents OriginatorNameComponents { get; }

		// @property (readonly, copy) NSDate * _Nullable modificationDate;
		[NullAllowed, Export ("modificationDate", ArgumentSemantic.Copy)]
		NSDate ModificationDate { get; }

		// @property (readonly, retain) id<NSCoding> _Nonnull persistentIdentifier;
		[Export ("persistentIdentifier", ArgumentSemantic.Retain)]
		NSCoding PersistentIdentifier { get; }

		// @property (readonly, getter = isConflict) BOOL conflict;
		[Export ("conflict")]
		bool Conflict { [Bind ("isConflict")] get; }

		// @property (getter = isResolved) BOOL resolved;
		[Export ("resolved")]
		bool Resolved { [Bind ("isResolved")] get; set; }

		// @property (getter = isDiscardable) BOOL discardable __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 7)]
		[Export ("discardable")]
		bool Discardable { [Bind ("isDiscardable")] get; set; }

		// @property (readonly) BOOL hasLocalContents __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("hasLocalContents")]
		bool HasLocalContents { get; }

		// @property (readonly) BOOL hasThumbnail __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("hasThumbnail")]
		bool HasThumbnail { get; }

		// -(NSURL * _Nullable)replaceItemAtURL:(NSURL * _Nonnull)url options:(NSFileVersionReplacingOptions)options error:(NSError * _Nullable * _Nullable)error;
		[Export ("replaceItemAtURL:options:error:")]
		[return: NullAllowed]
		NSURL ReplaceItemAtURL (NSURL url, NSFileVersionReplacingOptions options, [NullAllowed] out NSError error);

		// -(BOOL)removeAndReturnError:(NSError * _Nullable * _Nullable)outError;
		[Export ("removeAndReturnError:")]
		bool RemoveAndReturnError ([NullAllowed] out NSError outError);

		// +(BOOL)removeOtherVersionsOfItemAtURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)outError;
		[Static]
		[Export ("removeOtherVersionsOfItemAtURL:error:")]
		bool RemoveOtherVersionsOfItemAtURL (NSURL url, [NullAllowed] out NSError outError);
	}

	// @interface NSFileWrapper : NSObject <NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,0), iOS (4,0)]
	[BaseType (typeof(NSObject))]
	interface NSFileWrapper : INSSecureCoding
	{
		// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url options:(NSFileWrapperReadingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((objc_designated_initializer)) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initWithURL:options:error:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSURL url, NSFileWrapperReadingOptions options, [NullAllowed] out NSError outError);

		// -(instancetype _Nonnull)initDirectoryWithFileWrappers:(NSDictionary<NSString *,NSFileWrapper *> * _Nonnull)childrenByPreferredName __attribute__((objc_designated_initializer));
		[Export ("initDirectoryWithFileWrappers:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSDictionary<NSString, NSFileWrapper> childrenByPreferredName);

		// -(instancetype _Nonnull)initRegularFileWithContents:(NSData * _Nonnull)contents __attribute__((objc_designated_initializer));
		[Export ("initRegularFileWithContents:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSData contents);

		// -(instancetype _Nonnull)initSymbolicLinkWithDestinationURL:(NSURL * _Nonnull)url __attribute__((objc_designated_initializer)) __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("initSymbolicLinkWithDestinationURL:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSURL url);

		// -(instancetype _Nullable)initWithSerializedRepresentation:(NSData * _Nonnull)serializeRepresentation __attribute__((objc_designated_initializer));
		[Export ("initWithSerializedRepresentation:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSData serializeRepresentation);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)inCoder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSCoder inCoder);

		// @property (readonly, getter = isDirectory) BOOL directory;
		[Export ("directory")]
		bool Directory { [Bind ("isDirectory")] get; }

		// @property (readonly, getter = isRegularFile) BOOL regularFile;
		[Export ("regularFile")]
		bool RegularFile { [Bind ("isRegularFile")] get; }

		// @property (readonly, getter = isSymbolicLink) BOOL symbolicLink;
		[Export ("symbolicLink")]
		bool SymbolicLink { [Bind ("isSymbolicLink")] get; }

		// @property (copy) NSString * _Nullable preferredFilename;
		[NullAllowed, Export ("preferredFilename")]
		string PreferredFilename { get; set; }

		// @property (copy) NSString * _Nullable filename;
		[NullAllowed, Export ("filename")]
		string Filename { get; set; }

		// @property (copy) NSDictionary<NSString *,id> * _Nonnull fileAttributes;
		[Export ("fileAttributes", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> FileAttributes { get; set; }

		// -(BOOL)matchesContentsOfURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("matchesContentsOfURL:")]
		bool MatchesContentsOfURL (NSURL url);

		// -(BOOL)readFromURL:(NSURL * _Nonnull)url options:(NSFileWrapperReadingOptions)options error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("readFromURL:options:error:")]
		bool ReadFromURL (NSURL url, NSFileWrapperReadingOptions options, [NullAllowed] out NSError outError);

		// -(BOOL)writeToURL:(NSURL * _Nonnull)url options:(NSFileWrapperWritingOptions)options originalContentsURL:(NSURL * _Nullable)originalContentsURL error:(NSError * _Nullable * _Nullable)outError __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,6), iOS (4,0)]
		[Export ("writeToURL:options:originalContentsURL:error:")]
		bool WriteToURL (NSURL url, NSFileWrapperWritingOptions options, [NullAllowed] NSURL originalContentsURL, [NullAllowed] out NSError outError);

		// @property (readonly, copy) NSData * _Nullable serializedRepresentation;
		[NullAllowed, Export ("serializedRepresentation", ArgumentSemantic.Copy)]
		NSData SerializedRepresentation { get; }

		// -(NSString * _Nonnull)addFileWrapper:(NSFileWrapper * _Nonnull)child;
		[Export ("addFileWrapper:")]
		string AddFileWrapper (NSFileWrapper child);

		// -(NSString * _Nonnull)addRegularFileWithContents:(NSData * _Nonnull)data preferredFilename:(NSString * _Nonnull)fileName;
		[Export ("addRegularFileWithContents:preferredFilename:")]
		string AddRegularFileWithContents (NSData data, string fileName);

		// -(void)removeFileWrapper:(NSFileWrapper * _Nonnull)child;
		[Export ("removeFileWrapper:")]
		void RemoveFileWrapper (NSFileWrapper child);

		// @property (readonly, copy) NSDictionary<NSString *,NSFileWrapper *> * _Nullable fileWrappers;
		[NullAllowed, Export ("fileWrappers", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSFileWrapper> FileWrappers { get; }

		// -(NSString * _Nullable)keyForFileWrapper:(NSFileWrapper * _Nonnull)child;
		[Export ("keyForFileWrapper:")]
		[return: NullAllowed]
		string KeyForFileWrapper (NSFileWrapper child);

		// @property (readonly, copy) NSData * _Nullable regularFileContents;
		[NullAllowed, Export ("regularFileContents", ArgumentSemantic.Copy)]
		NSData RegularFileContents { get; }

		// @property (readonly, copy) NSURL * _Nullable symbolicLinkDestinationURL __attribute__((availability(macos, introduced=10.6))) __attribute__((availability(ios, introduced=4.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 6), iOS (4, 0)]
		[NullAllowed, Export ("symbolicLinkDestinationURL", ArgumentSemantic.Copy)]
		NSURL SymbolicLinkDestinationURL { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeTokenType __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagSchemeTokenType", "__Internal")]
		NSString NSLinguisticTagSchemeTokenType { get; }

		// extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeLexicalClass __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagSchemeLexicalClass", "__Internal")]
		NSString NSLinguisticTagSchemeLexicalClass { get; }

		// extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeNameType __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagSchemeNameType", "__Internal")]
		NSString NSLinguisticTagSchemeNameType { get; }

		// extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeNameTypeOrLexicalClass __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagSchemeNameTypeOrLexicalClass", "__Internal")]
		NSString NSLinguisticTagSchemeNameTypeOrLexicalClass { get; }

		// extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeLemma __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagSchemeLemma", "__Internal")]
		NSString NSLinguisticTagSchemeLemma { get; }

		// extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeLanguage __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagSchemeLanguage", "__Internal")]
		NSString NSLinguisticTagSchemeLanguage { get; }

		// extern const NSLinguisticTagScheme _Nonnull NSLinguisticTagSchemeScript __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagSchemeScript", "__Internal")]
		NSString NSLinguisticTagSchemeScript { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagWord __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagWord", "__Internal")]
		NSString NSLinguisticTagWord { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagPunctuation __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagPunctuation", "__Internal")]
		NSString NSLinguisticTagPunctuation { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagWhitespace __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagWhitespace", "__Internal")]
		NSString NSLinguisticTagWhitespace { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagOther __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagOther", "__Internal")]
		NSString NSLinguisticTagOther { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagNoun __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagNoun", "__Internal")]
		NSString NSLinguisticTagNoun { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagVerb __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagVerb", "__Internal")]
		NSString NSLinguisticTagVerb { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagAdjective __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagAdjective", "__Internal")]
		NSString NSLinguisticTagAdjective { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagAdverb __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagAdverb", "__Internal")]
		NSString NSLinguisticTagAdverb { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagPronoun __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagPronoun", "__Internal")]
		NSString NSLinguisticTagPronoun { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagDeterminer __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagDeterminer", "__Internal")]
		NSString NSLinguisticTagDeterminer { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagParticle __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagParticle", "__Internal")]
		NSString NSLinguisticTagParticle { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagPreposition __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagPreposition", "__Internal")]
		NSString NSLinguisticTagPreposition { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagNumber __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagNumber", "__Internal")]
		NSString NSLinguisticTagNumber { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagConjunction __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagConjunction", "__Internal")]
		NSString NSLinguisticTagConjunction { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagInterjection __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagInterjection", "__Internal")]
		NSString NSLinguisticTagInterjection { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagClassifier __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagClassifier", "__Internal")]
		NSString NSLinguisticTagClassifier { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagIdiom __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagIdiom", "__Internal")]
		NSString NSLinguisticTagIdiom { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagOtherWord __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagOtherWord", "__Internal")]
		NSString NSLinguisticTagOtherWord { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagSentenceTerminator __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagSentenceTerminator", "__Internal")]
		NSString NSLinguisticTagSentenceTerminator { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagOpenQuote __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagOpenQuote", "__Internal")]
		NSString NSLinguisticTagOpenQuote { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagCloseQuote __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagCloseQuote", "__Internal")]
		NSString NSLinguisticTagCloseQuote { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagOpenParenthesis __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagOpenParenthesis", "__Internal")]
		NSString NSLinguisticTagOpenParenthesis { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagCloseParenthesis __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagCloseParenthesis", "__Internal")]
		NSString NSLinguisticTagCloseParenthesis { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagWordJoiner __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagWordJoiner", "__Internal")]
		NSString NSLinguisticTagWordJoiner { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagDash __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagDash", "__Internal")]
		NSString NSLinguisticTagDash { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagOtherPunctuation __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagOtherPunctuation", "__Internal")]
		NSString NSLinguisticTagOtherPunctuation { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagParagraphBreak __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagParagraphBreak", "__Internal")]
		NSString NSLinguisticTagParagraphBreak { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagOtherWhitespace __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagOtherWhitespace", "__Internal")]
		NSString NSLinguisticTagOtherWhitespace { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagPersonalName __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagPersonalName", "__Internal")]
		NSString NSLinguisticTagPersonalName { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagPlaceName __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagPlaceName", "__Internal")]
		NSString NSLinguisticTagPlaceName { get; }

		// extern const NSLinguisticTag _Nonnull NSLinguisticTagOrganizationName __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Field ("NSLinguisticTagOrganizationName", "__Internal")]
		NSString NSLinguisticTagOrganizationName { get; }
	}

	// @interface NSLinguisticTagger : NSObject
	[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
	[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
	[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
	[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
	[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
	[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
	[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
	[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
	[BaseType (typeof(NSObject))]
	interface NSLinguisticTagger
	{
		// -(instancetype _Nonnull)initWithTagSchemes:(NSArray<NSLinguisticTagScheme> * _Nonnull)tagSchemes options:(NSUInteger)opts __attribute__((objc_designated_initializer)) __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("initWithTagSchemes:options:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string[] tagSchemes, nuint opts);

		// @property (readonly, copy) NSArray<NSLinguisticTagScheme> * _Nonnull tagSchemes __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("tagSchemes", ArgumentSemantic.Copy)]
		string[] TagSchemes { get; }

		// @property (retain) NSString * _Nullable string __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[NullAllowed, Export ("string", ArgumentSemantic.Retain)]
		string String { get; set; }

		// +(NSArray<NSLinguisticTagScheme> * _Nonnull)availableTagSchemesForUnit:(NSLinguisticTaggerUnit)unit language:(NSString * _Nonnull)language __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Static]
		[Export ("availableTagSchemesForUnit:language:")]
		string[] AvailableTagSchemesForUnit (NSLinguisticTaggerUnit unit, string language);

		// +(NSArray<NSLinguisticTagScheme> * _Nonnull)availableTagSchemesForLanguage:(NSString * _Nonnull)language __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Static]
		[Export ("availableTagSchemesForLanguage:")]
		string[] AvailableTagSchemesForLanguage (string language);

		// -(void)setOrthography:(NSOrthography * _Nullable)orthography range:(NSRange)range __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("setOrthography:range:")]
		void SetOrthography ([NullAllowed] NSOrthography orthography, NSRange range);

		// -(NSOrthography * _Nullable)orthographyAtIndex:(NSUInteger)charIndex effectiveRange:(NSRangePointer _Nullable)effectiveRange __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("orthographyAtIndex:effectiveRange:")]
		[return: NullAllowed]
		unsafe NSOrthography OrthographyAtIndex (nuint charIndex, [NullAllowed] NSRangePointer* effectiveRange);

		// -(void)stringEditedInRange:(NSRange)newRange changeInLength:(NSInteger)delta __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("stringEditedInRange:changeInLength:")]
		void StringEditedInRange (NSRange newRange, nint delta);

		// -(NSRange)tokenRangeAtIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("tokenRangeAtIndex:unit:")]
		NSRange TokenRangeAtIndex (nuint charIndex, NSLinguisticTaggerUnit unit);

		// -(NSRange)sentenceRangeForRange:(NSRange)range __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("sentenceRangeForRange:")]
		NSRange SentenceRangeForRange (NSRange range);

		// -(void)enumerateTagsInRange:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("enumerateTagsInRange:unit:scheme:options:usingBlock:")]
		unsafe void EnumerateTagsInRange (NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, Action<NSString, NSRange, bool*> block);

		// -(NSLinguisticTag _Nullable)tagAtIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme tokenRange:(NSRangePointer _Nullable)tokenRange __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("tagAtIndex:unit:scheme:tokenRange:")]
		[return: NullAllowed]
		unsafe string TagAtIndex (nuint charIndex, NSLinguisticTaggerUnit unit, string scheme, [NullAllowed] NSRangePointer* tokenRange);

		// -(NSArray<NSLinguisticTag> * _Nonnull)tagsInRange:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("tagsInRange:unit:scheme:options:tokenRanges:")]
		string[] TagsInRange (NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] out NSValue[] tokenRanges);

		// -(void)enumerateTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)tagScheme options:(NSLinguisticTaggerOptions)opts usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("enumerateTagsInRange:scheme:options:usingBlock:")]
		unsafe void EnumerateTagsInRange (NSRange range, string tagScheme, NSLinguisticTaggerOptions opts, Action<NSString, NSRange, NSRange, bool*> block);

		// -(NSLinguisticTag _Nullable)tagAtIndex:(NSUInteger)charIndex scheme:(NSLinguisticTagScheme _Nonnull)scheme tokenRange:(NSRangePointer _Nullable)tokenRange sentenceRange:(NSRangePointer _Nullable)sentenceRange __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("tagAtIndex:scheme:tokenRange:sentenceRange:")]
		[return: NullAllowed]
		unsafe string TagAtIndex (nuint charIndex, string scheme, [NullAllowed] NSRangePointer* tokenRange, [NullAllowed] NSRangePointer* sentenceRange);

		// -(NSArray<NSString *> * _Nonnull)tagsInRange:(NSRange)range scheme:(NSString * _Nonnull)tagScheme options:(NSLinguisticTaggerOptions)opts tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("tagsInRange:scheme:options:tokenRanges:")]
		string[] TagsInRange (NSRange range, string tagScheme, NSLinguisticTaggerOptions opts, [NullAllowed] out NSValue[] tokenRanges);

		// @property (readonly, copy) NSString * _Nullable dominantLanguage __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[NullAllowed, Export ("dominantLanguage")]
		string DominantLanguage { get; }

		// +(NSString * _Nullable)dominantLanguageForString:(NSString * _Nonnull)string __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Static]
		[Export ("dominantLanguageForString:")]
		[return: NullAllowed]
		string DominantLanguageForString (string @string);

		// +(NSLinguisticTag _Nullable)tagForString:(NSString * _Nonnull)string atIndex:(NSUInteger)charIndex unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme orthography:(NSOrthography * _Nullable)orthography tokenRange:(NSRangePointer _Nullable)tokenRange __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Static]
		[Export ("tagForString:atIndex:unit:scheme:orthography:tokenRange:")]
		[return: NullAllowed]
		unsafe string TagForString (string @string, nuint charIndex, NSLinguisticTaggerUnit unit, string scheme, [NullAllowed] NSOrthography orthography, [NullAllowed] NSRangePointer* tokenRange);

		// +(NSArray<NSLinguisticTag> * _Nonnull)tagsForString:(NSString * _Nonnull)string range:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Static]
		[Export ("tagsForString:range:unit:scheme:options:orthography:tokenRanges:")]
		string[] TagsForString (string @string, NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, [NullAllowed] out NSValue[] tokenRanges);

		// +(void)enumerateTagsForString:(NSString * _Nonnull)string range:(NSRange)range unit:(NSLinguisticTaggerUnit)unit scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.13, deprecated=100000))) __attribute__((availability(ios, introduced=11.0, deprecated=100000))) __attribute__((availability(watchos, introduced=4.0, deprecated=100000))) __attribute__((availability(tvos, introduced=11.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 13, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 4, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 11, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Static]
		[Export ("enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:")]
		unsafe void EnumerateTagsForString (string @string, NSRange range, NSLinguisticTaggerUnit unit, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, Action<NSString, NSRange, bool*> block);

		// -(NSArray<NSString *> * _Nullable)possibleTagsAtIndex:(NSUInteger)charIndex scheme:(NSString * _Nonnull)tagScheme tokenRange:(NSRangePointer _Nullable)tokenRange sentenceRange:(NSRangePointer _Nullable)sentenceRange scores:(NSArray<NSValue *> * _Nullable * _Nullable)scores __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:")]
		[return: NullAllowed]
		unsafe string[] PossibleTagsAtIndex (nuint charIndex, string tagScheme, [NullAllowed] NSRangePointer* tokenRange, [NullAllowed] NSRangePointer* sentenceRange, [NullAllowed] out NSValue[] scores);
	}

	// @interface NSLinguisticAnalysis (NSString)
	[Category]
	[BaseType (typeof(NSString))]
	interface NSString_NSLinguisticAnalysis
	{
		// -(NSArray<NSLinguisticTag> * _Nonnull)linguisticTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography tokenRanges:(NSArray<NSValue *> * _Nullable * _Nullable)tokenRanges __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("linguisticTagsInRange:scheme:options:orthography:tokenRanges:")]
		string[] LinguisticTagsInRange (NSRange range, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, [NullAllowed] out NSValue[] tokenRanges);

		// -(void)enumerateLinguisticTagsInRange:(NSRange)range scheme:(NSLinguisticTagScheme _Nonnull)scheme options:(NSLinguisticTaggerOptions)options orthography:(NSOrthography * _Nullable)orthography usingBlock:(void (^ _Nonnull)(NSLinguisticTag _Nullable, NSRange, NSRange, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.7, deprecated=100000))) __attribute__((availability(ios, introduced=5.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.iOS, 5, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.WatchOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "All NSLinguisticTagger API should be replaced with NaturalLanguage.framework API")]
		[Export ("enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:")]
		unsafe void EnumerateLinguisticTagsInRange (NSRange range, string scheme, NSLinguisticTaggerOptions options, [NullAllowed] NSOrthography orthography, Action<NSString, NSRange, NSRange, bool*> block);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSMetadataItemFSNameKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataItemFSNameKey", "__Internal")]
		NSString NSMetadataItemFSNameKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemDisplayNameKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataItemDisplayNameKey", "__Internal")]
		NSString NSMetadataItemDisplayNameKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemURLKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataItemURLKey", "__Internal")]
		NSString NSMetadataItemURLKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemPathKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataItemPathKey", "__Internal")]
		NSString NSMetadataItemPathKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemFSSizeKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataItemFSSizeKey", "__Internal")]
		NSString NSMetadataItemFSSizeKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemFSCreationDateKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataItemFSCreationDateKey", "__Internal")]
		NSString NSMetadataItemFSCreationDateKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemFSContentChangeDateKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataItemFSContentChangeDateKey", "__Internal")]
		NSString NSMetadataItemFSContentChangeDateKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemContentTypeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[Field ("NSMetadataItemContentTypeKey", "__Internal")]
		NSString NSMetadataItemContentTypeKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemContentTypeTreeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[Field ("NSMetadataItemContentTypeTreeKey", "__Internal")]
		NSString NSMetadataItemContentTypeTreeKey { get; }

		// extern NSString *const _Nonnull NSMetadataItemIsUbiquitousKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataItemIsUbiquitousKey", "__Internal")]
		NSString NSMetadataItemIsUbiquitousKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemHasUnresolvedConflictsKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataUbiquitousItemHasUnresolvedConflictsKey", "__Internal")]
		NSString NSMetadataUbiquitousItemHasUnresolvedConflictsKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemIsDownloadedKey __attribute__((availability(macos, introduced=10.7, deprecated=10.9))) __attribute__((availability(ios, introduced=5.0, deprecated=7.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 7, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.MacOSX, 10, 9, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.iOS, 5, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use NSMetadataUbiquitousItemDownloadingStatusKey instead")]
		[Field ("NSMetadataUbiquitousItemIsDownloadedKey", "__Internal")]
		NSString NSMetadataUbiquitousItemIsDownloadedKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingStatusKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSMetadataUbiquitousItemDownloadingStatusKey", "__Internal")]
		NSString NSMetadataUbiquitousItemDownloadingStatusKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingStatusNotDownloaded __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSMetadataUbiquitousItemDownloadingStatusNotDownloaded", "__Internal")]
		NSString NSMetadataUbiquitousItemDownloadingStatusNotDownloaded { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingStatusDownloaded __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSMetadataUbiquitousItemDownloadingStatusDownloaded", "__Internal")]
		NSString NSMetadataUbiquitousItemDownloadingStatusDownloaded { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingStatusCurrent __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSMetadataUbiquitousItemDownloadingStatusCurrent", "__Internal")]
		NSString NSMetadataUbiquitousItemDownloadingStatusCurrent { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemIsDownloadingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataUbiquitousItemIsDownloadingKey", "__Internal")]
		NSString NSMetadataUbiquitousItemIsDownloadingKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemIsUploadedKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataUbiquitousItemIsUploadedKey", "__Internal")]
		NSString NSMetadataUbiquitousItemIsUploadedKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemIsUploadingKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataUbiquitousItemIsUploadingKey", "__Internal")]
		NSString NSMetadataUbiquitousItemIsUploadingKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemPercentDownloadedKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataUbiquitousItemPercentDownloadedKey", "__Internal")]
		NSString NSMetadataUbiquitousItemPercentDownloadedKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemPercentUploadedKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataUbiquitousItemPercentUploadedKey", "__Internal")]
		NSString NSMetadataUbiquitousItemPercentUploadedKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadingErrorKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSMetadataUbiquitousItemDownloadingErrorKey", "__Internal")]
		NSString NSMetadataUbiquitousItemDownloadingErrorKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemUploadingErrorKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSMetadataUbiquitousItemUploadingErrorKey", "__Internal")]
		NSString NSMetadataUbiquitousItemUploadingErrorKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemDownloadRequestedKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSMetadataUbiquitousItemDownloadRequestedKey", "__Internal")]
		NSString NSMetadataUbiquitousItemDownloadRequestedKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemIsExternalDocumentKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSMetadataUbiquitousItemIsExternalDocumentKey", "__Internal")]
		NSString NSMetadataUbiquitousItemIsExternalDocumentKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemContainerDisplayNameKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSMetadataUbiquitousItemContainerDisplayNameKey", "__Internal")]
		NSString NSMetadataUbiquitousItemContainerDisplayNameKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemURLInLocalContainerKey __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSMetadataUbiquitousItemURLInLocalContainerKey", "__Internal")]
		NSString NSMetadataUbiquitousItemURLInLocalContainerKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousItemIsSharedKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousItemIsSharedKey", "__Internal")]
		NSString NSMetadataUbiquitousItemIsSharedKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemCurrentUserRoleKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousSharedItemCurrentUserRoleKey", "__Internal")]
		NSString NSMetadataUbiquitousSharedItemCurrentUserRoleKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey", "__Internal")]
		NSString NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemOwnerNameComponentsKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousSharedItemOwnerNameComponentsKey", "__Internal")]
		NSString NSMetadataUbiquitousSharedItemOwnerNameComponentsKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey", "__Internal")]
		NSString NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemRoleOwner __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousSharedItemRoleOwner", "__Internal")]
		NSString NSMetadataUbiquitousSharedItemRoleOwner { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemRoleParticipant __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousSharedItemRoleParticipant", "__Internal")]
		NSString NSMetadataUbiquitousSharedItemRoleParticipant { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemPermissionsReadOnly __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousSharedItemPermissionsReadOnly", "__Internal")]
		NSString NSMetadataUbiquitousSharedItemPermissionsReadOnly { get; }

		// extern NSString *const _Nonnull NSMetadataUbiquitousSharedItemPermissionsReadWrite __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, Mac (10, 12), iOS (10, 0)]
		[Field ("NSMetadataUbiquitousSharedItemPermissionsReadWrite", "__Internal")]
		NSString NSMetadataUbiquitousSharedItemPermissionsReadWrite { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAttributeChangeDateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAttributeChangeDateKey", "__Internal")]
		NSString NSMetadataItemAttributeChangeDateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemKeywordsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemKeywordsKey", "__Internal")]
		NSString NSMetadataItemKeywordsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemTitleKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemTitleKey", "__Internal")]
		NSString NSMetadataItemTitleKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAuthorsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAuthorsKey", "__Internal")]
		NSString NSMetadataItemAuthorsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemEditorsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemEditorsKey", "__Internal")]
		NSString NSMetadataItemEditorsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemParticipantsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemParticipantsKey", "__Internal")]
		NSString NSMetadataItemParticipantsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemProjectsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemProjectsKey", "__Internal")]
		NSString NSMetadataItemProjectsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemDownloadedDateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemDownloadedDateKey", "__Internal")]
		NSString NSMetadataItemDownloadedDateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemWhereFromsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemWhereFromsKey", "__Internal")]
		NSString NSMetadataItemWhereFromsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCommentKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCommentKey", "__Internal")]
		NSString NSMetadataItemCommentKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCopyrightKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCopyrightKey", "__Internal")]
		NSString NSMetadataItemCopyrightKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemLastUsedDateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemLastUsedDateKey", "__Internal")]
		NSString NSMetadataItemLastUsedDateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemContentCreationDateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemContentCreationDateKey", "__Internal")]
		NSString NSMetadataItemContentCreationDateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemContentModificationDateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemContentModificationDateKey", "__Internal")]
		NSString NSMetadataItemContentModificationDateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemDateAddedKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemDateAddedKey", "__Internal")]
		NSString NSMetadataItemDateAddedKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemDurationSecondsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemDurationSecondsKey", "__Internal")]
		NSString NSMetadataItemDurationSecondsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemContactKeywordsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemContactKeywordsKey", "__Internal")]
		NSString NSMetadataItemContactKeywordsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemVersionKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemVersionKey", "__Internal")]
		NSString NSMetadataItemVersionKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemPixelHeightKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemPixelHeightKey", "__Internal")]
		NSString NSMetadataItemPixelHeightKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemPixelWidthKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemPixelWidthKey", "__Internal")]
		NSString NSMetadataItemPixelWidthKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemPixelCountKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemPixelCountKey", "__Internal")]
		NSString NSMetadataItemPixelCountKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemColorSpaceKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemColorSpaceKey", "__Internal")]
		NSString NSMetadataItemColorSpaceKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemBitsPerSampleKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemBitsPerSampleKey", "__Internal")]
		NSString NSMetadataItemBitsPerSampleKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemFlashOnOffKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemFlashOnOffKey", "__Internal")]
		NSString NSMetadataItemFlashOnOffKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemFocalLengthKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemFocalLengthKey", "__Internal")]
		NSString NSMetadataItemFocalLengthKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAcquisitionMakeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAcquisitionMakeKey", "__Internal")]
		NSString NSMetadataItemAcquisitionMakeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAcquisitionModelKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAcquisitionModelKey", "__Internal")]
		NSString NSMetadataItemAcquisitionModelKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemISOSpeedKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemISOSpeedKey", "__Internal")]
		NSString NSMetadataItemISOSpeedKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemOrientationKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemOrientationKey", "__Internal")]
		NSString NSMetadataItemOrientationKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemLayerNamesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemLayerNamesKey", "__Internal")]
		NSString NSMetadataItemLayerNamesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemWhiteBalanceKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemWhiteBalanceKey", "__Internal")]
		NSString NSMetadataItemWhiteBalanceKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemApertureKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemApertureKey", "__Internal")]
		NSString NSMetadataItemApertureKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemProfileNameKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemProfileNameKey", "__Internal")]
		NSString NSMetadataItemProfileNameKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemResolutionWidthDPIKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemResolutionWidthDPIKey", "__Internal")]
		NSString NSMetadataItemResolutionWidthDPIKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemResolutionHeightDPIKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemResolutionHeightDPIKey", "__Internal")]
		NSString NSMetadataItemResolutionHeightDPIKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemExposureModeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemExposureModeKey", "__Internal")]
		NSString NSMetadataItemExposureModeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemExposureTimeSecondsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemExposureTimeSecondsKey", "__Internal")]
		NSString NSMetadataItemExposureTimeSecondsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemEXIFVersionKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemEXIFVersionKey", "__Internal")]
		NSString NSMetadataItemEXIFVersionKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCameraOwnerKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCameraOwnerKey", "__Internal")]
		NSString NSMetadataItemCameraOwnerKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemFocalLength35mmKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemFocalLength35mmKey", "__Internal")]
		NSString NSMetadataItemFocalLength35mmKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemLensModelKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemLensModelKey", "__Internal")]
		NSString NSMetadataItemLensModelKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemEXIFGPSVersionKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemEXIFGPSVersionKey", "__Internal")]
		NSString NSMetadataItemEXIFGPSVersionKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAltitudeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAltitudeKey", "__Internal")]
		NSString NSMetadataItemAltitudeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemLatitudeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemLatitudeKey", "__Internal")]
		NSString NSMetadataItemLatitudeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemLongitudeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemLongitudeKey", "__Internal")]
		NSString NSMetadataItemLongitudeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemSpeedKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemSpeedKey", "__Internal")]
		NSString NSMetadataItemSpeedKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemTimestampKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemTimestampKey", "__Internal")]
		NSString NSMetadataItemTimestampKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSTrackKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSTrackKey", "__Internal")]
		NSString NSMetadataItemGPSTrackKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemImageDirectionKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemImageDirectionKey", "__Internal")]
		NSString NSMetadataItemImageDirectionKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemNamedLocationKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemNamedLocationKey", "__Internal")]
		NSString NSMetadataItemNamedLocationKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSStatusKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSStatusKey", "__Internal")]
		NSString NSMetadataItemGPSStatusKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSMeasureModeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSMeasureModeKey", "__Internal")]
		NSString NSMetadataItemGPSMeasureModeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSDOPKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSDOPKey", "__Internal")]
		NSString NSMetadataItemGPSDOPKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSMapDatumKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSMapDatumKey", "__Internal")]
		NSString NSMetadataItemGPSMapDatumKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSDestLatitudeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSDestLatitudeKey", "__Internal")]
		NSString NSMetadataItemGPSDestLatitudeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSDestLongitudeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSDestLongitudeKey", "__Internal")]
		NSString NSMetadataItemGPSDestLongitudeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSDestBearingKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSDestBearingKey", "__Internal")]
		NSString NSMetadataItemGPSDestBearingKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSDestDistanceKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSDestDistanceKey", "__Internal")]
		NSString NSMetadataItemGPSDestDistanceKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSProcessingMethodKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSProcessingMethodKey", "__Internal")]
		NSString NSMetadataItemGPSProcessingMethodKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSAreaInformationKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSAreaInformationKey", "__Internal")]
		NSString NSMetadataItemGPSAreaInformationKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSDateStampKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSDateStampKey", "__Internal")]
		NSString NSMetadataItemGPSDateStampKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGPSDifferentalKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGPSDifferentalKey", "__Internal")]
		NSString NSMetadataItemGPSDifferentalKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCodecsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCodecsKey", "__Internal")]
		NSString NSMetadataItemCodecsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemMediaTypesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemMediaTypesKey", "__Internal")]
		NSString NSMetadataItemMediaTypesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemStreamableKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemStreamableKey", "__Internal")]
		NSString NSMetadataItemStreamableKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemTotalBitRateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemTotalBitRateKey", "__Internal")]
		NSString NSMetadataItemTotalBitRateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemVideoBitRateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemVideoBitRateKey", "__Internal")]
		NSString NSMetadataItemVideoBitRateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAudioBitRateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAudioBitRateKey", "__Internal")]
		NSString NSMetadataItemAudioBitRateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemDeliveryTypeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemDeliveryTypeKey", "__Internal")]
		NSString NSMetadataItemDeliveryTypeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAlbumKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAlbumKey", "__Internal")]
		NSString NSMetadataItemAlbumKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemHasAlphaChannelKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemHasAlphaChannelKey", "__Internal")]
		NSString NSMetadataItemHasAlphaChannelKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemRedEyeOnOffKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemRedEyeOnOffKey", "__Internal")]
		NSString NSMetadataItemRedEyeOnOffKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemMeteringModeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemMeteringModeKey", "__Internal")]
		NSString NSMetadataItemMeteringModeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemMaxApertureKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemMaxApertureKey", "__Internal")]
		NSString NSMetadataItemMaxApertureKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemFNumberKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemFNumberKey", "__Internal")]
		NSString NSMetadataItemFNumberKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemExposureProgramKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemExposureProgramKey", "__Internal")]
		NSString NSMetadataItemExposureProgramKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemExposureTimeStringKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemExposureTimeStringKey", "__Internal")]
		NSString NSMetadataItemExposureTimeStringKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemHeadlineKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemHeadlineKey", "__Internal")]
		NSString NSMetadataItemHeadlineKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemInstructionsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemInstructionsKey", "__Internal")]
		NSString NSMetadataItemInstructionsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCityKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCityKey", "__Internal")]
		NSString NSMetadataItemCityKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemStateOrProvinceKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemStateOrProvinceKey", "__Internal")]
		NSString NSMetadataItemStateOrProvinceKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCountryKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCountryKey", "__Internal")]
		NSString NSMetadataItemCountryKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemTextContentKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemTextContentKey", "__Internal")]
		NSString NSMetadataItemTextContentKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAudioSampleRateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAudioSampleRateKey", "__Internal")]
		NSString NSMetadataItemAudioSampleRateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAudioChannelCountKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAudioChannelCountKey", "__Internal")]
		NSString NSMetadataItemAudioChannelCountKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemTempoKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemTempoKey", "__Internal")]
		NSString NSMetadataItemTempoKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemKeySignatureKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemKeySignatureKey", "__Internal")]
		NSString NSMetadataItemKeySignatureKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemTimeSignatureKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemTimeSignatureKey", "__Internal")]
		NSString NSMetadataItemTimeSignatureKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAudioEncodingApplicationKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAudioEncodingApplicationKey", "__Internal")]
		NSString NSMetadataItemAudioEncodingApplicationKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemComposerKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemComposerKey", "__Internal")]
		NSString NSMetadataItemComposerKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemLyricistKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemLyricistKey", "__Internal")]
		NSString NSMetadataItemLyricistKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAudioTrackNumberKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAudioTrackNumberKey", "__Internal")]
		NSString NSMetadataItemAudioTrackNumberKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemRecordingDateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemRecordingDateKey", "__Internal")]
		NSString NSMetadataItemRecordingDateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemMusicalGenreKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemMusicalGenreKey", "__Internal")]
		NSString NSMetadataItemMusicalGenreKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemIsGeneralMIDISequenceKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemIsGeneralMIDISequenceKey", "__Internal")]
		NSString NSMetadataItemIsGeneralMIDISequenceKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemRecordingYearKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemRecordingYearKey", "__Internal")]
		NSString NSMetadataItemRecordingYearKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemOrganizationsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemOrganizationsKey", "__Internal")]
		NSString NSMetadataItemOrganizationsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemLanguagesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemLanguagesKey", "__Internal")]
		NSString NSMetadataItemLanguagesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemRightsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemRightsKey", "__Internal")]
		NSString NSMetadataItemRightsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemPublishersKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemPublishersKey", "__Internal")]
		NSString NSMetadataItemPublishersKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemContributorsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemContributorsKey", "__Internal")]
		NSString NSMetadataItemContributorsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCoverageKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCoverageKey", "__Internal")]
		NSString NSMetadataItemCoverageKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemSubjectKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemSubjectKey", "__Internal")]
		NSString NSMetadataItemSubjectKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemThemeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemThemeKey", "__Internal")]
		NSString NSMetadataItemThemeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemDescriptionKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemDescriptionKey", "__Internal")]
		NSString NSMetadataItemDescriptionKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemIdentifierKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemIdentifierKey", "__Internal")]
		NSString NSMetadataItemIdentifierKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAudiencesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAudiencesKey", "__Internal")]
		NSString NSMetadataItemAudiencesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemNumberOfPagesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemNumberOfPagesKey", "__Internal")]
		NSString NSMetadataItemNumberOfPagesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemPageWidthKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemPageWidthKey", "__Internal")]
		NSString NSMetadataItemPageWidthKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemPageHeightKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemPageHeightKey", "__Internal")]
		NSString NSMetadataItemPageHeightKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemSecurityMethodKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemSecurityMethodKey", "__Internal")]
		NSString NSMetadataItemSecurityMethodKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCreatorKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCreatorKey", "__Internal")]
		NSString NSMetadataItemCreatorKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemEncodingApplicationsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemEncodingApplicationsKey", "__Internal")]
		NSString NSMetadataItemEncodingApplicationsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemDueDateKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemDueDateKey", "__Internal")]
		NSString NSMetadataItemDueDateKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemStarRatingKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemStarRatingKey", "__Internal")]
		NSString NSMetadataItemStarRatingKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemPhoneNumbersKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemPhoneNumbersKey", "__Internal")]
		NSString NSMetadataItemPhoneNumbersKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemEmailAddressesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemEmailAddressesKey", "__Internal")]
		NSString NSMetadataItemEmailAddressesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemInstantMessageAddressesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemInstantMessageAddressesKey", "__Internal")]
		NSString NSMetadataItemInstantMessageAddressesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemKindKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemKindKey", "__Internal")]
		NSString NSMetadataItemKindKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemRecipientsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemRecipientsKey", "__Internal")]
		NSString NSMetadataItemRecipientsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemFinderCommentKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemFinderCommentKey", "__Internal")]
		NSString NSMetadataItemFinderCommentKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemFontsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemFontsKey", "__Internal")]
		NSString NSMetadataItemFontsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAppleLoopsRootKeyKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAppleLoopsRootKeyKey", "__Internal")]
		NSString NSMetadataItemAppleLoopsRootKeyKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAppleLoopsKeyFilterTypeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAppleLoopsKeyFilterTypeKey", "__Internal")]
		NSString NSMetadataItemAppleLoopsKeyFilterTypeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAppleLoopsLoopModeKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAppleLoopsLoopModeKey", "__Internal")]
		NSString NSMetadataItemAppleLoopsLoopModeKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAppleLoopDescriptorsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAppleLoopDescriptorsKey", "__Internal")]
		NSString NSMetadataItemAppleLoopDescriptorsKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemMusicalInstrumentCategoryKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemMusicalInstrumentCategoryKey", "__Internal")]
		NSString NSMetadataItemMusicalInstrumentCategoryKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemMusicalInstrumentNameKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemMusicalInstrumentNameKey", "__Internal")]
		NSString NSMetadataItemMusicalInstrumentNameKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemCFBundleIdentifierKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemCFBundleIdentifierKey", "__Internal")]
		NSString NSMetadataItemCFBundleIdentifierKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemInformationKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemInformationKey", "__Internal")]
		NSString NSMetadataItemInformationKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemDirectorKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemDirectorKey", "__Internal")]
		NSString NSMetadataItemDirectorKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemProducerKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemProducerKey", "__Internal")]
		NSString NSMetadataItemProducerKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemGenreKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemGenreKey", "__Internal")]
		NSString NSMetadataItemGenreKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemPerformersKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemPerformersKey", "__Internal")]
		NSString NSMetadataItemPerformersKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemOriginalFormatKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemOriginalFormatKey", "__Internal")]
		NSString NSMetadataItemOriginalFormatKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemOriginalSourceKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemOriginalSourceKey", "__Internal")]
		NSString NSMetadataItemOriginalSourceKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAuthorEmailAddressesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAuthorEmailAddressesKey", "__Internal")]
		NSString NSMetadataItemAuthorEmailAddressesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemRecipientEmailAddressesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemRecipientEmailAddressesKey", "__Internal")]
		NSString NSMetadataItemRecipientEmailAddressesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemAuthorAddressesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemAuthorAddressesKey", "__Internal")]
		NSString NSMetadataItemAuthorAddressesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemRecipientAddressesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemRecipientAddressesKey", "__Internal")]
		NSString NSMetadataItemRecipientAddressesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemIsLikelyJunkKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemIsLikelyJunkKey", "__Internal")]
		NSString NSMetadataItemIsLikelyJunkKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemExecutableArchitecturesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemExecutableArchitecturesKey", "__Internal")]
		NSString NSMetadataItemExecutableArchitecturesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemExecutablePlatformKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemExecutablePlatformKey", "__Internal")]
		NSString NSMetadataItemExecutablePlatformKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemApplicationCategoriesKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemApplicationCategoriesKey", "__Internal")]
		NSString NSMetadataItemApplicationCategoriesKey { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataItemIsApplicationManagedKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataItemIsApplicationManagedKey", "__Internal")]
		NSString NSMetadataItemIsApplicationManagedKey { get; }
	}

	// @interface NSMetadataQuery : NSObject
	[Watch (2,0), TV (9,0), Mac (10,4), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSMetadataQuery
	{
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSMetadataQueryDelegate Delegate { get; set; }

		// @property (assign) id<NSMetadataQueryDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// @property (copy) NSPredicate * _Nullable predicate;
		[NullAllowed, Export ("predicate", ArgumentSemantic.Copy)]
		NSPredicate Predicate { get; set; }

		// @property (copy) NSArray<NSSortDescriptor *> * _Nonnull sortDescriptors;
		[Export ("sortDescriptors", ArgumentSemantic.Copy)]
		NSSortDescriptor[] SortDescriptors { get; set; }

		// @property (copy) NSArray<NSString *> * _Nonnull valueListAttributes;
		[Export ("valueListAttributes", ArgumentSemantic.Copy)]
		string[] ValueListAttributes { get; set; }

		// @property (copy) NSArray<NSString *> * _Nullable groupingAttributes;
		[NullAllowed, Export ("groupingAttributes", ArgumentSemantic.Copy)]
		string[] GroupingAttributes { get; set; }

		// @property NSTimeInterval notificationBatchingInterval;
		[Export ("notificationBatchingInterval")]
		double NotificationBatchingInterval { get; set; }

		// @property (copy) NSArray * _Nonnull searchScopes;
		[Export ("searchScopes", ArgumentSemantic.Copy)]
		NSObject[] SearchScopes { get; set; }

		// @property (copy) NSArray * _Nullable searchItems __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[NullAllowed, Export ("searchItems", ArgumentSemantic.Copy)]
		NSObject[] SearchItems { get; set; }

		// @property (retain) NSOperationQueue * _Nullable operationQueue __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[NullAllowed, Export ("operationQueue", ArgumentSemantic.Retain)]
		NSOperationQueue OperationQueue { get; set; }

		// -(BOOL)startQuery;
		[Export ("startQuery")]
		bool StartQuery { get; }

		// -(void)stopQuery;
		[Export ("stopQuery")]
		void StopQuery ();

		// @property (readonly, getter = isStarted) BOOL started;
		[Export ("started")]
		bool Started { [Bind ("isStarted")] get; }

		// @property (readonly, getter = isGathering) BOOL gathering;
		[Export ("gathering")]
		bool Gathering { [Bind ("isGathering")] get; }

		// @property (readonly, getter = isStopped) BOOL stopped;
		[Export ("stopped")]
		bool Stopped { [Bind ("isStopped")] get; }

		// -(void)disableUpdates;
		[Export ("disableUpdates")]
		void DisableUpdates ();

		// -(void)enableUpdates;
		[Export ("enableUpdates")]
		void EnableUpdates ();

		// @property (readonly) NSUInteger resultCount;
		[Export ("resultCount")]
		nuint ResultCount { get; }

		// -(id _Nonnull)resultAtIndex:(NSUInteger)idx;
		[Export ("resultAtIndex:")]
		NSObject ResultAtIndex (nuint idx);

		// -(void)enumerateResultsUsingBlock:(void (^ _Nonnull)(id _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("enumerateResultsUsingBlock:")]
		unsafe void EnumerateResultsUsingBlock (Action<NSObject, nuint, bool*> block);

		// -(void)enumerateResultsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^ _Nonnull)(id _Nonnull, NSUInteger, BOOL * _Nonnull))block __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("enumerateResultsWithOptions:usingBlock:")]
		unsafe void EnumerateResultsWithOptions (NSEnumerationOptions opts, Action<NSObject, nuint, bool*> block);

		// @property (readonly, copy) NSArray * _Nonnull results;
		[Export ("results", ArgumentSemantic.Copy)]
		NSObject[] Results { get; }

		// -(NSUInteger)indexOfResult:(id _Nonnull)result;
		[Export ("indexOfResult:")]
		nuint IndexOfResult (NSObject result);

		// @property (readonly, copy) NSDictionary<NSString *,NSArray<NSMetadataQueryAttributeValueTuple *> *> * _Nonnull valueLists;
		[Export ("valueLists", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSArray<NSMetadataQueryAttributeValueTuple>> ValueLists { get; }

		// @property (readonly, copy) NSArray<NSMetadataQueryResultGroup *> * _Nonnull groupedResults;
		[Export ("groupedResults", ArgumentSemantic.Copy)]
		NSMetadataQueryResultGroup[] GroupedResults { get; }

		// -(id _Nullable)valueOfAttribute:(NSString * _Nonnull)attrName forResultAtIndex:(NSUInteger)idx;
		[Export ("valueOfAttribute:forResultAtIndex:")]
		[return: NullAllowed]
		NSObject ValueOfAttribute (string attrName, nuint idx);
	}

	// @protocol NSMetadataQueryDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSMetadataQueryDelegate
	{
		// @optional -(id _Nonnull)metadataQuery:(NSMetadataQuery * _Nonnull)query replacementObjectForResultObject:(NSMetadataItem * _Nonnull)result;
		[Export ("metadataQuery:replacementObjectForResultObject:")]
		NSObject ReplacementObjectForResultObject (NSMetadataQuery query, NSMetadataItem result);

		// @optional -(id _Nonnull)metadataQuery:(NSMetadataQuery * _Nonnull)query replacementValueForAttribute:(NSString * _Nonnull)attrName value:(id _Nonnull)attrValue;
		[Export ("metadataQuery:replacementValueForAttribute:value:")]
		NSObject ReplacementValueForAttribute (NSMetadataQuery query, string attrName, NSObject attrValue);
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSMetadataQueryDidStartGatheringNotification __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 4), iOS (5, 0)]
		[Field ("NSMetadataQueryDidStartGatheringNotification", "__Internal")]
		NSString NSMetadataQueryDidStartGatheringNotification { get; }

		// extern const NSNotificationName _Nonnull NSMetadataQueryGatheringProgressNotification __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 4), iOS (5, 0)]
		[Field ("NSMetadataQueryGatheringProgressNotification", "__Internal")]
		NSString NSMetadataQueryGatheringProgressNotification { get; }

		// extern const NSNotificationName _Nonnull NSMetadataQueryDidFinishGatheringNotification __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 4), iOS (5, 0)]
		[Field ("NSMetadataQueryDidFinishGatheringNotification", "__Internal")]
		NSString NSMetadataQueryDidFinishGatheringNotification { get; }

		// extern const NSNotificationName _Nonnull NSMetadataQueryDidUpdateNotification __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 4), iOS (5, 0)]
		[Field ("NSMetadataQueryDidUpdateNotification", "__Internal")]
		NSString NSMetadataQueryDidUpdateNotification { get; }

		// extern NSString *const _Nonnull NSMetadataQueryUpdateAddedItemsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[Field ("NSMetadataQueryUpdateAddedItemsKey", "__Internal")]
		NSString NSMetadataQueryUpdateAddedItemsKey { get; }

		// extern NSString *const _Nonnull NSMetadataQueryUpdateChangedItemsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[Field ("NSMetadataQueryUpdateChangedItemsKey", "__Internal")]
		NSString NSMetadataQueryUpdateChangedItemsKey { get; }

		// extern NSString *const _Nonnull NSMetadataQueryUpdateRemovedItemsKey __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (8, 0)]
		[Field ("NSMetadataQueryUpdateRemovedItemsKey", "__Internal")]
		NSString NSMetadataQueryUpdateRemovedItemsKey { get; }

		// extern NSString *const _Nonnull NSMetadataQueryResultContentRelevanceAttribute __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 4), iOS (5, 0)]
		[Field ("NSMetadataQueryResultContentRelevanceAttribute", "__Internal")]
		NSString NSMetadataQueryResultContentRelevanceAttribute { get; }

		// extern API_AVAILABLE(macos(10.4)) NSString *const NSMetadataQueryUserHomeScope __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 4)]
		[Field ("NSMetadataQueryUserHomeScope", "__Internal")]
		NSString NSMetadataQueryUserHomeScope { get; }

		// extern API_AVAILABLE(macos(10.4)) NSString *const NSMetadataQueryLocalComputerScope __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 4)]
		[Field ("NSMetadataQueryLocalComputerScope", "__Internal")]
		NSString NSMetadataQueryLocalComputerScope { get; }

		// extern API_AVAILABLE(macos(10.4)) NSString *const NSMetadataQueryNetworkScope __attribute__((availability(macos, introduced=10.4))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 4)]
		[Field ("NSMetadataQueryNetworkScope", "__Internal")]
		NSString NSMetadataQueryNetworkScope { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataQueryIndexedLocalComputerScope __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataQueryIndexedLocalComputerScope", "__Internal")]
		NSString NSMetadataQueryIndexedLocalComputerScope { get; }

		// extern API_AVAILABLE(macos(10.9)) NSString *const NSMetadataQueryIndexedNetworkScope __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10, 9)]
		[Field ("NSMetadataQueryIndexedNetworkScope", "__Internal")]
		NSString NSMetadataQueryIndexedNetworkScope { get; }

		// extern NSString *const _Nonnull NSMetadataQueryUbiquitousDocumentsScope __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataQueryUbiquitousDocumentsScope", "__Internal")]
		NSString NSMetadataQueryUbiquitousDocumentsScope { get; }

		// extern NSString *const _Nonnull NSMetadataQueryUbiquitousDataScope __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSMetadataQueryUbiquitousDataScope", "__Internal")]
		NSString NSMetadataQueryUbiquitousDataScope { get; }

		// extern NSString *const _Nonnull NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope", "__Internal")]
		NSString NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope { get; }
	}

	// @interface NSMetadataItem : NSObject
	[Watch (2,0), TV (9,0), Mac (10,4), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSMetadataItem
	{
		// -(instancetype _Nullable)initWithURL:(NSURL * _Nonnull)url __attribute__((objc_designated_initializer)) __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoiOS, Mac (10,9)]
		[Export ("initWithURL:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSURL url);

		// -(id _Nullable)valueForAttribute:(NSString * _Nonnull)key;
		[Export ("valueForAttribute:")]
		[return: NullAllowed]
		NSObject ValueForAttribute (string key);

		// -(NSDictionary<NSString *,id> * _Nullable)valuesForAttributes:(NSArray<NSString *> * _Nonnull)keys;
		[Export ("valuesForAttributes:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> ValuesForAttributes (string[] keys);

		// @property (readonly, copy) NSArray<NSString *> * _Nonnull attributes;
		[Export ("attributes", ArgumentSemantic.Copy)]
		string[] Attributes { get; }
	}

	// @interface NSMetadataQueryAttributeValueTuple : NSObject
	[Watch (2,0), TV (9,0), Mac (10,4), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSMetadataQueryAttributeValueTuple
	{
		// @property (readonly, copy) NSString * _Nonnull attribute;
		[Export ("attribute")]
		string Attribute { get; }

		// @property (readonly, retain) id _Nullable value;
		[NullAllowed, Export ("value", ArgumentSemantic.Retain)]
		NSObject Value { get; }

		// @property (readonly) NSUInteger count;
		[Export ("count")]
		nuint Count { get; }
	}

	// @interface NSMetadataQueryResultGroup : NSObject
	[Watch (2,0), TV (9,0), Mac (10,4), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSMetadataQueryResultGroup
	{
		// @property (readonly, copy) NSString * _Nonnull attribute;
		[Export ("attribute")]
		string Attribute { get; }

		// @property (readonly, retain) id _Nonnull value;
		[Export ("value", ArgumentSemantic.Retain)]
		NSObject Value { get; }

		// @property (readonly, copy) NSArray<NSMetadataQueryResultGroup *> * _Nullable subgroups;
		[NullAllowed, Export ("subgroups", ArgumentSemantic.Copy)]
		NSMetadataQueryResultGroup[] Subgroups { get; }

		// @property (readonly) NSUInteger resultCount;
		[Export ("resultCount")]
		nuint ResultCount { get; }

		// -(id _Nonnull)resultAtIndex:(NSUInteger)idx;
		[Export ("resultAtIndex:")]
		NSObject ResultAtIndex (nuint idx);

		// @property (readonly, copy) NSArray * _Nonnull results;
		[Export ("results", ArgumentSemantic.Copy)]
		NSObject[] Results { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern API_UNAVAILABLE(watchos) NSString *const NSNetServicesErrorCode __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9, 0), NoWatch, Mac (10, 2), iOS (2, 0)]
		[Field ("NSNetServicesErrorCode", "__Internal")]
		NSString NSNetServicesErrorCode { get; }

		// extern API_UNAVAILABLE(watchos) const NSErrorDomain NSNetServicesErrorDomain __attribute__((availability(macos, introduced=10.2))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((availability(watchos, unavailable)));
		[TV (9, 0), NoWatch, Mac (10, 2), iOS (2, 0)]
		[Field ("NSNetServicesErrorDomain", "__Internal")]
		NSString NSNetServicesErrorDomain { get; }
	}

	// @interface NSNetService : NSObject
	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use nw_connection_t or nw_listener_t in Network framework instead")]
	[Deprecated (PlatformName.MacOSX, 100000, 0, message: "Use nw_connection_t or nw_listener_t in Network framework instead")]
	[Introduced (PlatformName.iOS, 2, 0, message: "Use nw_connection_t or nw_listener_t in Network framework instead")]
	[Deprecated (PlatformName.iOS, 100000, 0, message: "Use nw_connection_t or nw_listener_t in Network framework instead")]
	[Introduced (PlatformName.TvOS, 9, 0, message: "Use nw_connection_t or nw_listener_t in Network framework instead")]
	[Deprecated (PlatformName.TvOS, 100000, 0, message: "Use nw_connection_t or nw_listener_t in Network framework instead")]
	[NoWatch]
	[BaseType (typeof(NSObject))]
	interface NSNetService
	{
		// -(instancetype _Nonnull)initWithDomain:(NSString * _Nonnull)domain type:(NSString * _Nonnull)type name:(NSString * _Nonnull)name port:(int)port __attribute__((objc_designated_initializer));
		[Export ("initWithDomain:type:name:port:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string domain, string type, string name, int port);

		// -(instancetype _Nonnull)initWithDomain:(NSString * _Nonnull)domain type:(NSString * _Nonnull)type name:(NSString * _Nonnull)name;
		[Export ("initWithDomain:type:name:")]
		NativeHandle Constructor (string domain, string type, string name);

		// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("scheduleInRunLoop:forMode:")]
		void ScheduleInRunLoop (NSRunLoop aRunLoop, string mode);

		// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("removeFromRunLoop:forMode:")]
		void RemoveFromRunLoop (NSRunLoop aRunLoop, string mode);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSNetServiceDelegate Delegate { get; set; }

		// @property (assign) id<NSNetServiceDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// @property BOOL includesPeerToPeer __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (7, 0)]
		[Export ("includesPeerToPeer")]
		bool IncludesPeerToPeer { get; set; }

		// @property (readonly, copy) NSString * _Nonnull name;
		[Export ("name")]
		string Name { get; }

		// @property (readonly, copy) NSString * _Nonnull type;
		[Export ("type")]
		string Type { get; }

		// @property (readonly, copy) NSString * _Nonnull domain;
		[Export ("domain")]
		string Domain { get; }

		// @property (readonly, copy) NSString * _Nullable hostName;
		[NullAllowed, Export ("hostName")]
		string HostName { get; }

		// @property (readonly, copy) NSArray<NSData *> * _Nullable addresses;
		[NullAllowed, Export ("addresses", ArgumentSemantic.Copy)]
		NSData[] Addresses { get; }

		// @property (readonly) NSInteger port __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 5), iOS (2, 0)]
		[Export ("port")]
		nint Port { get; }

		// -(void)publish;
		[Export ("publish")]
		void Publish ();

		// -(void)publishWithOptions:(NSNetServiceOptions)options __attribute__((availability(macos, introduced=10.5))) __attribute__((availability(ios, introduced=2.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,5), iOS (2,0)]
		[Export ("publishWithOptions:")]
		void PublishWithOptions (NSNetServiceOptions options);

		// -(void)resolve __attribute__((availability(macos, introduced=10.2, deprecated=10.4))) __attribute__((availability(ios, introduced=2.0, deprecated=2.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 4, message: "Not supported")]
		[Introduced (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Export ("resolve")]
		void Resolve ();

		// -(void)stop;
		[Export ("stop")]
		void Stop ();

		// +(NSDictionary<NSString *,NSData *> * _Nonnull)dictionaryFromTXTRecordData:(NSData * _Nonnull)txtData;
		[Static]
		[Export ("dictionaryFromTXTRecordData:")]
		NSDictionary<NSString, NSData> DictionaryFromTXTRecordData (NSData txtData);

		// +(NSData * _Nonnull)dataFromTXTRecordDictionary:(NSDictionary<NSString *,NSData *> * _Nonnull)txtDictionary;
		[Static]
		[Export ("dataFromTXTRecordDictionary:")]
		NSData DataFromTXTRecordDictionary (NSDictionary<NSString, NSData> txtDictionary);

		// -(void)resolveWithTimeout:(NSTimeInterval)timeout;
		[Export ("resolveWithTimeout:")]
		void ResolveWithTimeout (double timeout);

		// -(BOOL)getInputStream:(NSInputStream * _Nullable * _Nullable)inputStream outputStream:(NSOutputStream * _Nullable * _Nullable)outputStream;
		[Export ("getInputStream:outputStream:")]
		bool GetInputStream ([NullAllowed] out NSInputStream inputStream, [NullAllowed] out NSOutputStream outputStream);

		// -(BOOL)setTXTRecordData:(NSData * _Nullable)recordData;
		[Export ("setTXTRecordData:")]
		bool SetTXTRecordData ([NullAllowed] NSData recordData);

		// -(NSData * _Nullable)TXTRecordData;
		[NullAllowed, Export ("TXTRecordData")]
		NSData TXTRecordData { get; }

		// -(void)startMonitoring;
		[Export ("startMonitoring")]
		void StartMonitoring ();

		// -(void)stopMonitoring;
		[Export ("stopMonitoring")]
		void StopMonitoring ();
	}

	// @interface NSNetServiceBrowser : NSObject
	[Introduced (PlatformName.MacOSX, 10, 2, message: "Use nw_browser_t in Network framework instead")]
	[Deprecated (PlatformName.MacOSX, 100000, 0, message: "Use nw_browser_t in Network framework instead")]
	[Introduced (PlatformName.iOS, 2, 0, message: "Use nw_browser_t in Network framework instead")]
	[Deprecated (PlatformName.iOS, 100000, 0, message: "Use nw_browser_t in Network framework instead")]
	[Introduced (PlatformName.TvOS, 9, 0, message: "Use nw_browser_t in Network framework instead")]
	[Deprecated (PlatformName.TvOS, 100000, 0, message: "Use nw_browser_t in Network framework instead")]
	[NoWatch]
	[BaseType (typeof(NSObject))]
	interface NSNetServiceBrowser
	{
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSNetServiceBrowserDelegate Delegate { get; set; }

		// @property (assign) id<NSNetServiceBrowserDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// @property BOOL includesPeerToPeer __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (7, 0)]
		[Export ("includesPeerToPeer")]
		bool IncludesPeerToPeer { get; set; }

		// -(void)scheduleInRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("scheduleInRunLoop:forMode:")]
		void ScheduleInRunLoop (NSRunLoop aRunLoop, string mode);

		// -(void)removeFromRunLoop:(NSRunLoop * _Nonnull)aRunLoop forMode:(NSRunLoopMode _Nonnull)mode;
		[Export ("removeFromRunLoop:forMode:")]
		void RemoveFromRunLoop (NSRunLoop aRunLoop, string mode);

		// -(void)searchForBrowsableDomains;
		[Export ("searchForBrowsableDomains")]
		void SearchForBrowsableDomains ();

		// -(void)searchForRegistrationDomains;
		[Export ("searchForRegistrationDomains")]
		void SearchForRegistrationDomains ();

		// -(void)searchForServicesOfType:(NSString * _Nonnull)type inDomain:(NSString * _Nonnull)domainString;
		[Export ("searchForServicesOfType:inDomain:")]
		void SearchForServicesOfType (string type, string domainString);

		// -(void)stop;
		[Export ("stop")]
		void Stop ();
	}

	// @protocol NSNetServiceDelegate <NSObject>
	[TV (9,0), NoWatch, Mac (10,2), iOS (2,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSNetServiceDelegate
	{
		// @optional -(void)netServiceWillPublish:(NSNetService * _Nonnull)sender;
		[Export ("netServiceWillPublish:")]
		void NetServiceWillPublish (NSNetService sender);

		// @optional -(void)netServiceDidPublish:(NSNetService * _Nonnull)sender;
		[Export ("netServiceDidPublish:")]
		void NetServiceDidPublish (NSNetService sender);

		// @optional -(void)netService:(NSNetService * _Nonnull)sender didNotPublish:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
		[Export ("netService:didNotPublish:")]
		void NetService (NSNetService sender, NSDictionary<NSString, NSNumber> errorDict);

		// @optional -(void)netServiceWillResolve:(NSNetService * _Nonnull)sender;
		[Export ("netServiceWillResolve:")]
		void NetServiceWillResolve (NSNetService sender);

		// @optional -(void)netServiceDidResolveAddress:(NSNetService * _Nonnull)sender;
		[Export ("netServiceDidResolveAddress:")]
		void NetServiceDidResolveAddress (NSNetService sender);

		// @optional -(void)netService:(NSNetService * _Nonnull)sender didNotResolve:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
		[Export ("netService:didNotResolve:")]
		void NetService (NSNetService sender, NSDictionary<NSString, NSNumber> errorDict);

		// @optional -(void)netServiceDidStop:(NSNetService * _Nonnull)sender;
		[Export ("netServiceDidStop:")]
		void NetServiceDidStop (NSNetService sender);

		// @optional -(void)netService:(NSNetService * _Nonnull)sender didUpdateTXTRecordData:(NSData * _Nonnull)data;
		[Export ("netService:didUpdateTXTRecordData:")]
		void NetService (NSNetService sender, NSData data);

		// @optional -(void)netService:(NSNetService * _Nonnull)sender didAcceptConnectionWithInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
		[Export ("netService:didAcceptConnectionWithInputStream:outputStream:")]
		void NetService (NSNetService sender, NSInputStream inputStream, NSOutputStream outputStream);
	}

	// @protocol NSNetServiceBrowserDelegate <NSObject>
	[TV (9,0), NoWatch, Mac (10,2), iOS (2,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSNetServiceBrowserDelegate
	{
		// @optional -(void)netServiceBrowserWillSearch:(NSNetServiceBrowser * _Nonnull)browser;
		[Export ("netServiceBrowserWillSearch:")]
		void NetServiceBrowserWillSearch (NSNetServiceBrowser browser);

		// @optional -(void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser * _Nonnull)browser;
		[Export ("netServiceBrowserDidStopSearch:")]
		void NetServiceBrowserDidStopSearch (NSNetServiceBrowser browser);

		// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didNotSearch:(NSDictionary<NSString *,NSNumber *> * _Nonnull)errorDict;
		[Export ("netServiceBrowser:didNotSearch:")]
		void NetServiceBrowser (NSNetServiceBrowser browser, NSDictionary<NSString, NSNumber> errorDict);

		// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didFindDomain:(NSString * _Nonnull)domainString moreComing:(BOOL)moreComing;
		[Export ("netServiceBrowser:didFindDomain:moreComing:")]
		void NetServiceBrowser (NSNetServiceBrowser browser, string domainString, bool moreComing);

		// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didFindService:(NSNetService * _Nonnull)service moreComing:(BOOL)moreComing;
		[Export ("netServiceBrowser:didFindService:moreComing:")]
		void NetServiceBrowser (NSNetServiceBrowser browser, NSNetService service, bool moreComing);

		// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didRemoveDomain:(NSString * _Nonnull)domainString moreComing:(BOOL)moreComing;
		[Export ("netServiceBrowser:didRemoveDomain:moreComing:")]
		void NetServiceBrowser (NSNetServiceBrowser browser, string domainString, bool moreComing);

		// @optional -(void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didRemoveService:(NSNetService * _Nonnull)service moreComing:(BOOL)moreComing;
		[Export ("netServiceBrowser:didRemoveService:moreComing:")]
		void NetServiceBrowser (NSNetServiceBrowser browser, NSNetService service, bool moreComing);
	}

	// @interface NSUbiquitousKeyValueStore : NSObject
	[Watch (9,0), TV (9,0), Mac (10,7), iOS (5,0)]
	[BaseType (typeof(NSObject))]
	interface NSUbiquitousKeyValueStore
	{
		// @property (readonly, strong, class) NSUbiquitousKeyValueStore * _Nonnull defaultStore;
		[Static]
		[Export ("defaultStore", ArgumentSemantic.Strong)]
		NSUbiquitousKeyValueStore DefaultStore { get; }

		// -(id _Nullable)objectForKey:(NSString * _Nonnull)aKey;
		[Export ("objectForKey:")]
		[return: NullAllowed]
		NSObject ObjectForKey (string aKey);

		// -(void)setObject:(id _Nullable)anObject forKey:(NSString * _Nonnull)aKey;
		[Export ("setObject:forKey:")]
		void SetObject ([NullAllowed] NSObject anObject, string aKey);

		// -(void)removeObjectForKey:(NSString * _Nonnull)aKey;
		[Export ("removeObjectForKey:")]
		void RemoveObjectForKey (string aKey);

		// -(NSString * _Nullable)stringForKey:(NSString * _Nonnull)aKey;
		[Export ("stringForKey:")]
		[return: NullAllowed]
		string StringForKey (string aKey);

		// -(NSArray * _Nullable)arrayForKey:(NSString * _Nonnull)aKey;
		[Export ("arrayForKey:")]
		[return: NullAllowed]
		NSObject[] ArrayForKey (string aKey);

		// -(NSDictionary<NSString *,id> * _Nullable)dictionaryForKey:(NSString * _Nonnull)aKey;
		[Export ("dictionaryForKey:")]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> DictionaryForKey (string aKey);

		// -(NSData * _Nullable)dataForKey:(NSString * _Nonnull)aKey;
		[Export ("dataForKey:")]
		[return: NullAllowed]
		NSData DataForKey (string aKey);

		// -(long long)longLongForKey:(NSString * _Nonnull)aKey;
		[Export ("longLongForKey:")]
		long LongLongForKey (string aKey);

		// -(double)doubleForKey:(NSString * _Nonnull)aKey;
		[Export ("doubleForKey:")]
		double DoubleForKey (string aKey);

		// -(BOOL)boolForKey:(NSString * _Nonnull)aKey;
		[Export ("boolForKey:")]
		bool BoolForKey (string aKey);

		// -(void)setString:(NSString * _Nullable)aString forKey:(NSString * _Nonnull)aKey;
		[Export ("setString:forKey:")]
		void SetString ([NullAllowed] string aString, string aKey);

		// -(void)setData:(NSData * _Nullable)aData forKey:(NSString * _Nonnull)aKey;
		[Export ("setData:forKey:")]
		void SetData ([NullAllowed] NSData aData, string aKey);

		// -(void)setArray:(NSArray * _Nullable)anArray forKey:(NSString * _Nonnull)aKey;
		[Export ("setArray:forKey:")]
		void SetArray ([NullAllowed] NSObject[] anArray, string aKey);

		// -(void)setDictionary:(NSDictionary<NSString *,id> * _Nullable)aDictionary forKey:(NSString * _Nonnull)aKey;
		[Export ("setDictionary:forKey:")]
		void SetDictionary ([NullAllowed] NSDictionary<NSString, NSObject> aDictionary, string aKey);

		// -(void)setLongLong:(long long)value forKey:(NSString * _Nonnull)aKey;
		[Export ("setLongLong:forKey:")]
		void SetLongLong (long value, string aKey);

		// -(void)setDouble:(double)value forKey:(NSString * _Nonnull)aKey;
		[Export ("setDouble:forKey:")]
		void SetDouble (double value, string aKey);

		// -(void)setBool:(BOOL)value forKey:(NSString * _Nonnull)aKey;
		[Export ("setBool:forKey:")]
		void SetBool (bool value, string aKey);

		// @property (readonly, copy) NSDictionary<NSString *,id> * _Nonnull dictionaryRepresentation;
		[Export ("dictionaryRepresentation", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> DictionaryRepresentation { get; }

		// -(BOOL)synchronize;
		[Export ("synchronize")]
		bool Synchronize { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const NSNotificationName _Nonnull NSUbiquitousKeyValueStoreDidChangeExternallyNotification __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSUbiquitousKeyValueStoreDidChangeExternallyNotification", "__Internal")]
		NSString NSUbiquitousKeyValueStoreDidChangeExternallyNotification { get; }

		// extern NSString *const _Nonnull NSUbiquitousKeyValueStoreChangeReasonKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSUbiquitousKeyValueStoreChangeReasonKey", "__Internal")]
		NSString NSUbiquitousKeyValueStoreChangeReasonKey { get; }

		// extern NSString *const _Nonnull NSUbiquitousKeyValueStoreChangedKeysKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSUbiquitousKeyValueStoreChangedKeysKey", "__Internal")]
		NSString NSUbiquitousKeyValueStoreChangedKeysKey { get; }
	}

	// @interface NSUndoManager : NSObject
	[Watch (2,0), TV (9,0), Mac (10,0), iOS (3,0)]
	[BaseType (typeof(NSObject))]
	interface NSUndoManager
	{
		// -(void)beginUndoGrouping;
		[Export ("beginUndoGrouping")]
		void BeginUndoGrouping ();

		// -(void)endUndoGrouping;
		[Export ("endUndoGrouping")]
		void EndUndoGrouping ();

		// @property (readonly) NSInteger groupingLevel;
		[Export ("groupingLevel")]
		nint GroupingLevel { get; }

		// -(void)disableUndoRegistration;
		[Export ("disableUndoRegistration")]
		void DisableUndoRegistration ();

		// -(void)enableUndoRegistration;
		[Export ("enableUndoRegistration")]
		void EnableUndoRegistration ();

		// @property (readonly, getter = isUndoRegistrationEnabled) BOOL undoRegistrationEnabled;
		[Export ("undoRegistrationEnabled")]
		bool UndoRegistrationEnabled { [Bind ("isUndoRegistrationEnabled")] get; }

		// @property BOOL groupsByEvent;
		[Export ("groupsByEvent")]
		bool GroupsByEvent { get; set; }

		// @property NSUInteger levelsOfUndo;
		[Export ("levelsOfUndo")]
		nuint LevelsOfUndo { get; set; }

		// @property (copy) NSArray<NSRunLoopMode> * _Nonnull runLoopModes;
		[Export ("runLoopModes", ArgumentSemantic.Copy)]
		string[] RunLoopModes { get; set; }

		// -(void)undo;
		[Export ("undo")]
		void Undo ();

		// -(void)redo;
		[Export ("redo")]
		void Redo ();

		// -(void)undoNestedGroup;
		[Export ("undoNestedGroup")]
		void UndoNestedGroup ();

		// @property (readonly) BOOL canUndo;
		[Export ("canUndo")]
		bool CanUndo { get; }

		// @property (readonly) BOOL canRedo;
		[Export ("canRedo")]
		bool CanRedo { get; }

		// @property (readonly, getter = isUndoing) BOOL undoing;
		[Export ("undoing")]
		bool Undoing { [Bind ("isUndoing")] get; }

		// @property (readonly, getter = isRedoing) BOOL redoing;
		[Export ("redoing")]
		bool Redoing { [Bind ("isRedoing")] get; }

		// -(void)removeAllActions;
		[Export ("removeAllActions")]
		void RemoveAllActions ();

		// -(void)removeAllActionsWithTarget:(id _Nonnull)target;
		[Export ("removeAllActionsWithTarget:")]
		void RemoveAllActionsWithTarget (NSObject target);

		// -(void)registerUndoWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)selector object:(id _Nullable)anObject;
		[Export ("registerUndoWithTarget:selector:object:")]
		void RegisterUndoWithTarget (NSObject target, Selector selector, [NullAllowed] NSObject anObject);

		// -(id _Nonnull)prepareWithInvocationTarget:(id _Nonnull)target;
		[Export ("prepareWithInvocationTarget:")]
		NSObject PrepareWithInvocationTarget (NSObject target);

		// -(void)registerUndoWithTarget:(id _Nonnull)target handler:(void (^ _Nonnull)(id _Nonnull))undoHandler __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0))) __attribute__((swift_private));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("registerUndoWithTarget:handler:")]
		void RegisterUndoWithTarget (NSObject target, Action<NSObject> undoHandler);

		// -(void)setActionIsDiscardable:(BOOL)discardable __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,7), iOS (5,0)]
		[Export ("setActionIsDiscardable:")]
		void SetActionIsDiscardable (bool discardable);

		// @property (readonly) BOOL undoActionIsDiscardable __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("undoActionIsDiscardable")]
		bool UndoActionIsDiscardable { get; }

		// @property (readonly) BOOL redoActionIsDiscardable __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Export ("redoActionIsDiscardable")]
		bool RedoActionIsDiscardable { get; }

		// @property (readonly, copy) NSString * _Nonnull undoActionName;
		[Export ("undoActionName")]
		string UndoActionName { get; }

		// @property (readonly, copy) NSString * _Nonnull redoActionName;
		[Export ("redoActionName")]
		string RedoActionName { get; }

		// -(void)setActionName:(NSString * _Nonnull)actionName;
		[Export ("setActionName:")]
		void SetActionName (string actionName);

		// @property (readonly, copy) NSString * _Nonnull undoMenuItemTitle;
		[Export ("undoMenuItemTitle")]
		string UndoMenuItemTitle { get; }

		// @property (readonly, copy) NSString * _Nonnull redoMenuItemTitle;
		[Export ("redoMenuItemTitle")]
		string RedoMenuItemTitle { get; }

		// -(NSString * _Nonnull)undoMenuTitleForUndoActionName:(NSString * _Nonnull)actionName;
		[Export ("undoMenuTitleForUndoActionName:")]
		string UndoMenuTitleForUndoActionName (string actionName);

		// -(NSString * _Nonnull)redoMenuTitleForUndoActionName:(NSString * _Nonnull)actionName;
		[Export ("redoMenuTitleForUndoActionName:")]
		string RedoMenuTitleForUndoActionName (string actionName);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSUndoManagerGroupIsDiscardableKey __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSUndoManagerGroupIsDiscardableKey", "__Internal")]
		NSString NSUndoManagerGroupIsDiscardableKey { get; }

		// extern const NSNotificationName _Nonnull NSUndoManagerCheckpointNotification __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 0), iOS (3, 0)]
		[Field ("NSUndoManagerCheckpointNotification", "__Internal")]
		NSString NSUndoManagerCheckpointNotification { get; }

		// extern const NSNotificationName _Nonnull NSUndoManagerWillUndoChangeNotification __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 0), iOS (3, 0)]
		[Field ("NSUndoManagerWillUndoChangeNotification", "__Internal")]
		NSString NSUndoManagerWillUndoChangeNotification { get; }

		// extern const NSNotificationName _Nonnull NSUndoManagerWillRedoChangeNotification __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 0), iOS (3, 0)]
		[Field ("NSUndoManagerWillRedoChangeNotification", "__Internal")]
		NSString NSUndoManagerWillRedoChangeNotification { get; }

		// extern const NSNotificationName _Nonnull NSUndoManagerDidUndoChangeNotification __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 0), iOS (3, 0)]
		[Field ("NSUndoManagerDidUndoChangeNotification", "__Internal")]
		NSString NSUndoManagerDidUndoChangeNotification { get; }

		// extern const NSNotificationName _Nonnull NSUndoManagerDidRedoChangeNotification __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 0), iOS (3, 0)]
		[Field ("NSUndoManagerDidRedoChangeNotification", "__Internal")]
		NSString NSUndoManagerDidRedoChangeNotification { get; }

		// extern const NSNotificationName _Nonnull NSUndoManagerDidOpenUndoGroupNotification __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 0), iOS (3, 0)]
		[Field ("NSUndoManagerDidOpenUndoGroupNotification", "__Internal")]
		NSString NSUndoManagerDidOpenUndoGroupNotification { get; }

		// extern const NSNotificationName _Nonnull NSUndoManagerWillCloseUndoGroupNotification __attribute__((availability(macos, introduced=10.0))) __attribute__((availability(ios, introduced=3.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 0), iOS (3, 0)]
		[Field ("NSUndoManagerWillCloseUndoGroupNotification", "__Internal")]
		NSString NSUndoManagerWillCloseUndoGroupNotification { get; }

		// extern const NSNotificationName _Nonnull NSUndoManagerDidCloseUndoGroupNotification __attribute__((availability(macos, introduced=10.7))) __attribute__((availability(ios, introduced=5.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 7), iOS (5, 0)]
		[Field ("NSUndoManagerDidCloseUndoGroupNotification", "__Internal")]
		NSString NSUndoManagerDidCloseUndoGroupNotification { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const CFStringRef _Nonnull kSSLSessionConfig_default __attribute__((availability(macos, introduced=10.2, deprecated=10.13))) __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_default", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_default { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_ATSv1 __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_ATSv1", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_ATSv1 { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_ATSv1_noPFS __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_ATSv1_noPFS", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_ATSv1_noPFS { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_standard __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_standard", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_standard { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_RC4_fallback __attribute__((availability(macos, introduced=10.2, deprecated=10.13))) __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_RC4_fallback", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_RC4_fallback { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_TLSv1_fallback __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_TLSv1_fallback", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_TLSv1_fallback { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_TLSv1_RC4_fallback __attribute__((availability(macos, introduced=10.2, deprecated=10.13))) __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_TLSv1_RC4_fallback", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_TLSv1_RC4_fallback { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_legacy __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_legacy", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_legacy { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_legacy_DHE __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_legacy_DHE", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_legacy_DHE { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_anonymous __attribute__((availability(macos, introduced=10.2, deprecated=10.15))) __attribute__((availability(ios, introduced=5.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_anonymous", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_anonymous { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_3DES_fallback __attribute__((availability(macos, introduced=10.2, deprecated=10.13))) __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_3DES_fallback", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_3DES_fallback { get; }

		// extern const CFStringRef _Nonnull kSSLSessionConfig_TLSv1_3DES_fallback __attribute__((availability(macos, introduced=10.2, deprecated=10.13))) __attribute__((availability(ios, introduced=5.0, deprecated=11.0)));
		[Introduced (PlatformName.MacOSX, 10, 2, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.MacOSX, 10, 13, message: "No longer supported. Use Network.framework.")]
		[Introduced (PlatformName.iOS, 5, 0, message: "No longer supported. Use Network.framework.")]
		[Deprecated (PlatformName.iOS, 11, 0, message: "No longer supported. Use Network.framework.")]
		[Field ("kSSLSessionConfig_TLSv1_3DES_fallback", "__Internal")]
		unsafe CFStringRef* kSSLSessionConfig_TLSv1_3DES_fallback { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern const int64_t NSURLSessionTransferSizeUnknown __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLSessionTransferSizeUnknown", "__Internal")]
		long NSURLSessionTransferSizeUnknown { get; }
	}

	// @interface NSURLSession : NSObject
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLSession
	{
		// @property (readonly, strong, class) NSURLSession * _Nonnull sharedSession;
		[Static]
		[Export ("sharedSession", ArgumentSemantic.Strong)]
		NSURLSession SharedSession { get; }

		// +(NSURLSession * _Nonnull)sessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration;
		[Static]
		[Export ("sessionWithConfiguration:")]
		NSURLSession SessionWithConfiguration (NSURLSessionConfiguration configuration);

		// +(NSURLSession * _Nonnull)sessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration delegate:(id<NSURLSessionDelegate> _Nullable)delegate delegateQueue:(NSOperationQueue * _Nullable)queue;
		[Static]
		[Export ("sessionWithConfiguration:delegate:delegateQueue:")]
		NSURLSession SessionWithConfiguration (NSURLSessionConfiguration configuration, [NullAllowed] NSURLSessionDelegate @delegate, [NullAllowed] NSOperationQueue queue);

		// @property (readonly, retain) NSOperationQueue * _Nonnull delegateQueue;
		[Export ("delegateQueue", ArgumentSemantic.Retain)]
		NSOperationQueue DelegateQueue { get; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSURLSessionDelegate Delegate { get; }

		// @property (readonly, retain) id<NSURLSessionDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Retain)]
		NSObject WeakDelegate { get; }

		// @property (readonly, copy) NSURLSessionConfiguration * _Nonnull configuration;
		[Export ("configuration", ArgumentSemantic.Copy)]
		NSURLSessionConfiguration Configuration { get; }

		// @property (copy) NSString * _Nullable sessionDescription;
		[NullAllowed, Export ("sessionDescription")]
		string SessionDescription { get; set; }

		// -(void)finishTasksAndInvalidate;
		[Export ("finishTasksAndInvalidate")]
		void FinishTasksAndInvalidate ();

		// -(void)invalidateAndCancel;
		[Export ("invalidateAndCancel")]
		void InvalidateAndCancel ();

		// -(void)resetWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
		[Export ("resetWithCompletionHandler:")]
		void ResetWithCompletionHandler (Action completionHandler);

		// -(void)flushWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
		[Export ("flushWithCompletionHandler:")]
		void FlushWithCompletionHandler (Action completionHandler);

		// -(void)getTasksWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSURLSessionDataTask *> * _Nonnull, NSArray<NSURLSessionUploadTask *> * _Nonnull, NSArray<NSURLSessionDownloadTask *> * _Nonnull))completionHandler __attribute__((swift_async_name("getter:tasks()")));
		[Export ("getTasksWithCompletionHandler:")]
		void GetTasksWithCompletionHandler (Action<NSArray<NSURLSessionDataTask>, NSArray<NSURLSessionUploadTask>, NSArray<NSURLSessionDownloadTask>> completionHandler);

		// -(void)getAllTasksWithCompletionHandler:(void (^ _Nonnull)(NSArray<__kindof NSURLSessionTask *> * _Nonnull))completionHandler __attribute__((swift_async_name("getter:allTasks()"))) __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("getAllTasksWithCompletionHandler:")]
		void GetAllTasksWithCompletionHandler (Action<NSArray<NSURLSessionTask>> completionHandler);

		// -(NSURLSessionDataTask * _Nonnull)dataTaskWithRequest:(NSURLRequest * _Nonnull)request;
		[Export ("dataTaskWithRequest:")]
		NSURLSessionDataTask DataTaskWithRequest (NSURLRequest request);

		// -(NSURLSessionDataTask * _Nonnull)dataTaskWithURL:(NSURL * _Nonnull)url;
		[Export ("dataTaskWithURL:")]
		NSURLSessionDataTask DataTaskWithURL (NSURL url);

		// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromFile:(NSURL * _Nonnull)fileURL;
		[Export ("uploadTaskWithRequest:fromFile:")]
		NSURLSessionUploadTask UploadTaskWithRequest (NSURLRequest request, NSURL fileURL);

		// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromData:(NSData * _Nonnull)bodyData;
		[Export ("uploadTaskWithRequest:fromData:")]
		NSURLSessionUploadTask UploadTaskWithRequest (NSURLRequest request, NSData bodyData);

		// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithStreamedRequest:(NSURLRequest * _Nonnull)request;
		[Export ("uploadTaskWithStreamedRequest:")]
		NSURLSessionUploadTask UploadTaskWithStreamedRequest (NSURLRequest request);

		// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithRequest:(NSURLRequest * _Nonnull)request;
		[Export ("downloadTaskWithRequest:")]
		NSURLSessionDownloadTask DownloadTaskWithRequest (NSURLRequest request);

		// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithURL:(NSURL * _Nonnull)url;
		[Export ("downloadTaskWithURL:")]
		NSURLSessionDownloadTask DownloadTaskWithURL (NSURL url);

		// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithResumeData:(NSData * _Nonnull)resumeData;
		[Export ("downloadTaskWithResumeData:")]
		NSURLSessionDownloadTask DownloadTaskWithResumeData (NSData resumeData);

		// -(NSURLSessionStreamTask * _Nonnull)streamTaskWithHostName:(NSString * _Nonnull)hostname port:(NSInteger)port __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("streamTaskWithHostName:port:")]
		NSURLSessionStreamTask StreamTaskWithHostName (string hostname, nint port);

		// -(NSURLSessionStreamTask * _Nonnull)streamTaskWithNetService:(NSNetService * _Nonnull)service __attribute__((availability(macos, introduced=10.11, deprecated=100000))) __attribute__((availability(ios, introduced=9.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000))) __attribute__((availability(watchos, unavailable)));
		[Introduced (PlatformName.MacOSX, 10, 11, message: "Use nw_connection_t in Network framework instead")]
		[Deprecated (PlatformName.MacOSX, 100000, 0, message: "Use nw_connection_t in Network framework instead")]
		[Introduced (PlatformName.iOS, 9, 0, message: "Use nw_connection_t in Network framework instead")]
		[Deprecated (PlatformName.iOS, 100000, 0, message: "Use nw_connection_t in Network framework instead")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Use nw_connection_t in Network framework instead")]
		[Deprecated (PlatformName.TvOS, 100000, 0, message: "Use nw_connection_t in Network framework instead")]
		[NoWatch]
		[Export ("streamTaskWithNetService:")]
		NSURLSessionStreamTask StreamTaskWithNetService (NSNetService service);

		// -(NSURLSessionWebSocketTask * _Nonnull)webSocketTaskWithURL:(NSURL * _Nonnull)url __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("webSocketTaskWithURL:")]
		NSURLSessionWebSocketTask WebSocketTaskWithURL (NSURL url);

		// -(NSURLSessionWebSocketTask * _Nonnull)webSocketTaskWithURL:(NSURL * _Nonnull)url protocols:(NSArray<NSString *> * _Nonnull)protocols __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("webSocketTaskWithURL:protocols:")]
		NSURLSessionWebSocketTask WebSocketTaskWithURL (NSURL url, string[] protocols);

		// -(NSURLSessionWebSocketTask * _Nonnull)webSocketTaskWithRequest:(NSURLRequest * _Nonnull)request __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
		[Export ("webSocketTaskWithRequest:")]
		NSURLSessionWebSocketTask WebSocketTaskWithRequest (NSURLRequest request);

		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.9, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Please use +[NSURLSession sessionWithConfiguration:] or other class methods to create instances")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Please use +[NSURLSession sessionWithConfiguration:] or other class methods to create instances")]
		[Introduced (PlatformName.iOS, 7, 0, message: "Please use +[NSURLSession sessionWithConfiguration:] or other class methods to create instances")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use +[NSURLSession sessionWithConfiguration:] or other class methods to create instances")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Please use +[NSURLSession sessionWithConfiguration:] or other class methods to create instances")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Please use +[NSURLSession sessionWithConfiguration:] or other class methods to create instances")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Please use +[NSURLSession sessionWithConfiguration:] or other class methods to create instances")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use +[NSURLSession sessionWithConfiguration:] or other class methods to create instances")]
		[Static]
		[Export ("new")]
		NSURLSession New ();
	}

	// @interface NSURLSessionAsynchronousConvenience (NSURLSession)
	[Category]
	[BaseType (typeof(NSURLSession))]
	interface NSURLSession_NSURLSessionAsynchronousConvenience
	{
		// -(NSURLSessionDataTask * _Nonnull)dataTaskWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("dataTaskWithRequest:completionHandler:")]
		NSURLSessionDataTask DataTaskWithRequest (NSURLRequest request, Action<NSData, NSURLResponse, NSError> completionHandler);

		// -(NSURLSessionDataTask * _Nonnull)dataTaskWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("dataTaskWithURL:completionHandler:")]
		NSURLSessionDataTask DataTaskWithURL (NSURL url, Action<NSData, NSURLResponse, NSError> completionHandler);

		// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromFile:(NSURL * _Nonnull)fileURL completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("uploadTaskWithRequest:fromFile:completionHandler:")]
		NSURLSessionUploadTask UploadTaskWithRequest (NSURLRequest request, NSURL fileURL, Action<NSData, NSURLResponse, NSError> completionHandler);

		// -(NSURLSessionUploadTask * _Nonnull)uploadTaskWithRequest:(NSURLRequest * _Nonnull)request fromData:(NSData * _Nullable)bodyData completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("uploadTaskWithRequest:fromData:completionHandler:")]
		NSURLSessionUploadTask UploadTaskWithRequest (NSURLRequest request, [NullAllowed] NSData bodyData, Action<NSData, NSURLResponse, NSError> completionHandler);

		// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("downloadTaskWithRequest:completionHandler:")]
		NSURLSessionDownloadTask DownloadTaskWithRequest (NSURLRequest request, Action<NSURL, NSURLResponse, NSError> completionHandler);

		// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("downloadTaskWithURL:completionHandler:")]
		NSURLSessionDownloadTask DownloadTaskWithURL (NSURL url, Action<NSURL, NSURLResponse, NSError> completionHandler);

		// -(NSURLSessionDownloadTask * _Nonnull)downloadTaskWithResumeData:(NSData * _Nonnull)resumeData completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("downloadTaskWithResumeData:completionHandler:")]
		NSURLSessionDownloadTask DownloadTaskWithResumeData (NSData resumeData, Action<NSURL, NSURLResponse, NSError> completionHandler);
	}

	// @interface NSURLSessionTask : NSObject <NSCopying, NSProgressReporting>
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLSessionTask : INSCopying, INSProgressReporting
	{
		// @property (readonly) NSUInteger taskIdentifier;
		[Export ("taskIdentifier")]
		nuint TaskIdentifier { get; }

		// @property (readonly, copy) NSURLRequest * _Nullable originalRequest;
		[NullAllowed, Export ("originalRequest", ArgumentSemantic.Copy)]
		NSURLRequest OriginalRequest { get; }

		// @property (readonly, copy) NSURLRequest * _Nullable currentRequest;
		[NullAllowed, Export ("currentRequest", ArgumentSemantic.Copy)]
		NSURLRequest CurrentRequest { get; }

		// @property (readonly, copy) NSURLResponse * _Nullable response;
		[NullAllowed, Export ("response", ArgumentSemantic.Copy)]
		NSURLResponse Response { get; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSURLSessionTaskDelegate Delegate { get; set; }

		// @property (retain) id<NSURLSessionTaskDelegate> _Nullable delegate __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8, 0), TV (15, 0), Mac (12, 0), iOS (15, 0)]
		[NullAllowed, Export ("delegate", ArgumentSemantic.Retain)]
		NSObject WeakDelegate { get; set; }

		// @property (readonly, strong) NSProgress * _Nonnull progress __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Export ("progress", ArgumentSemantic.Strong)]
		NSProgress Progress { get; }

		// @property (copy) NSDate * _Nullable earliestBeginDate __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[NullAllowed, Export ("earliestBeginDate", ArgumentSemantic.Copy)]
		NSDate EarliestBeginDate { get; set; }

		// @property int64_t countOfBytesClientExpectsToSend __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Export ("countOfBytesClientExpectsToSend")]
		long CountOfBytesClientExpectsToSend { get; set; }

		// @property int64_t countOfBytesClientExpectsToReceive __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Export ("countOfBytesClientExpectsToReceive")]
		long CountOfBytesClientExpectsToReceive { get; set; }

		// @property (readonly) int64_t countOfBytesSent;
		[Export ("countOfBytesSent")]
		long CountOfBytesSent { get; }

		// @property (readonly) int64_t countOfBytesReceived;
		[Export ("countOfBytesReceived")]
		long CountOfBytesReceived { get; }

		// @property (readonly) int64_t countOfBytesExpectedToSend;
		[Export ("countOfBytesExpectedToSend")]
		long CountOfBytesExpectedToSend { get; }

		// @property (readonly) int64_t countOfBytesExpectedToReceive;
		[Export ("countOfBytesExpectedToReceive")]
		long CountOfBytesExpectedToReceive { get; }

		// @property (copy) NSString * _Nullable taskDescription;
		[NullAllowed, Export ("taskDescription")]
		string TaskDescription { get; set; }

		// -(void)cancel;
		[Export ("cancel")]
		void Cancel ();

		// @property (readonly) NSURLSessionTaskState state;
		[Export ("state")]
		NSURLSessionTaskState State { get; }

		// @property (readonly, copy) NSError * _Nullable error;
		[NullAllowed, Export ("error", ArgumentSemantic.Copy)]
		NSError Error { get; }

		// -(void)suspend;
		[Export ("suspend")]
		void Suspend ();

		// -(void)resume;
		[Export ("resume")]
		void Resume ();

		// @property float priority __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Export ("priority")]
		float Priority { get; set; }

		// @property BOOL prefersIncrementalDelivery __attribute__((availability(macos, introduced=11.3))) __attribute__((availability(ios, introduced=14.5))) __attribute__((availability(watchos, introduced=7.4))) __attribute__((availability(tvos, introduced=14.5)));
		[Watch (7, 4), TV (14, 5), Mac (11, 3), iOS (14, 5)]
		[Export ("prefersIncrementalDelivery")]
		bool PrefersIncrementalDelivery { get; set; }

		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.9, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Not supported")]
		[Introduced (PlatformName.iOS, 7, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Not supported")]
		[Static]
		[Export ("new")]
		NSURLSessionTask New ();
	}

	[Static]
	partial interface Constants
	{
		// extern const float NSURLSessionTaskPriorityDefault __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLSessionTaskPriorityDefault", "__Internal")]
		float NSURLSessionTaskPriorityDefault { get; }

		// extern const float NSURLSessionTaskPriorityLow __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLSessionTaskPriorityLow", "__Internal")]
		float NSURLSessionTaskPriorityLow { get; }

		// extern const float NSURLSessionTaskPriorityHigh __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[Field ("NSURLSessionTaskPriorityHigh", "__Internal")]
		float NSURLSessionTaskPriorityHigh { get; }
	}

	// @interface NSURLSessionDataTask : NSURLSessionTask
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[BaseType (typeof(NSURLSessionTask))]
	interface NSURLSessionDataTask
	{
		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.9, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Please use -[NSURLSession dataTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Please use -[NSURLSession dataTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.iOS, 7, 0, message: "Please use -[NSURLSession dataTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use -[NSURLSession dataTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Please use -[NSURLSession dataTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Please use -[NSURLSession dataTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Please use -[NSURLSession dataTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use -[NSURLSession dataTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Static]
		[Export ("new")]
		NSURLSessionDataTask New ();
	}

	// @interface NSURLSessionUploadTask : NSURLSessionDataTask
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[BaseType (typeof(NSURLSessionDataTask))]
	interface NSURLSessionUploadTask
	{
		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.9, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Please use -[NSURLSession uploadTaskWithStreamedRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Please use -[NSURLSession uploadTaskWithStreamedRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.iOS, 7, 0, message: "Please use -[NSURLSession uploadTaskWithStreamedRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use -[NSURLSession uploadTaskWithStreamedRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Please use -[NSURLSession uploadTaskWithStreamedRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Please use -[NSURLSession uploadTaskWithStreamedRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Please use -[NSURLSession uploadTaskWithStreamedRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use -[NSURLSession uploadTaskWithStreamedRequest:] or other NSURLSession methods to create instances")]
		[Static]
		[Export ("new")]
		NSURLSessionUploadTask New ();
	}

	// @interface NSURLSessionDownloadTask : NSURLSessionTask
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[BaseType (typeof(NSURLSessionTask))]
	interface NSURLSessionDownloadTask
	{
		// -(void)cancelByProducingResumeData:(void (^ _Nonnull)(NSData * _Nullable))completionHandler;
		[Export ("cancelByProducingResumeData:")]
		void CancelByProducingResumeData (Action<NSData> completionHandler);

		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.9, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Please use -[NSURLSession downloadTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Please use -[NSURLSession downloadTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.iOS, 7, 0, message: "Please use -[NSURLSession downloadTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use -[NSURLSession downloadTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Please use -[NSURLSession downloadTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Please use -[NSURLSession downloadTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Please use -[NSURLSession downloadTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use -[NSURLSession downloadTaskWithRequest:] or other NSURLSession methods to create instances")]
		[Static]
		[Export ("new")]
		NSURLSessionDownloadTask New ();
	}

	// @interface NSURLSessionStreamTask : NSURLSessionTask
	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	[BaseType (typeof(NSURLSessionTask))]
	interface NSURLSessionStreamTask
	{
		// -(void)readDataOfMinLength:(NSUInteger)minBytes maxLength:(NSUInteger)maxBytes timeout:(NSTimeInterval)timeout completionHandler:(void (^ _Nonnull)(NSData * _Nullable_result, BOOL, NSError * _Nullable))completionHandler;
		[Export ("readDataOfMinLength:maxLength:timeout:completionHandler:")]
		void ReadDataOfMinLength (nuint minBytes, nuint maxBytes, double timeout, Action<NSData, bool, NSError> completionHandler);

		// -(void)writeData:(NSData * _Nonnull)data timeout:(NSTimeInterval)timeout completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
		[Export ("writeData:timeout:completionHandler:")]
		void WriteData (NSData data, double timeout, Action<NSError> completionHandler);

		// -(void)captureStreams;
		[Export ("captureStreams")]
		void CaptureStreams ();

		// -(void)closeWrite;
		[Export ("closeWrite")]
		void CloseWrite ();

		// -(void)closeRead;
		[Export ("closeRead")]
		void CloseRead ();

		// -(void)startSecureConnection;
		[Export ("startSecureConnection")]
		void StartSecureConnection ();

		// -(void)stopSecureConnection __attribute__((availability(macos, introduced=10.9, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "TLS cannot be disabled once it is enabled")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "TLS cannot be disabled once it is enabled")]
		[Introduced (PlatformName.iOS, 7, 0, message: "TLS cannot be disabled once it is enabled")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "TLS cannot be disabled once it is enabled")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "TLS cannot be disabled once it is enabled")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "TLS cannot be disabled once it is enabled")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "TLS cannot be disabled once it is enabled")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "TLS cannot be disabled once it is enabled")]
		[Export ("stopSecureConnection")]
		void StopSecureConnection ();

		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.9, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Please use -[NSURLSession streamTaskWithHostName:port:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Please use -[NSURLSession streamTaskWithHostName:port:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.iOS, 7, 0, message: "Please use -[NSURLSession streamTaskWithHostName:port:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use -[NSURLSession streamTaskWithHostName:port:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Please use -[NSURLSession streamTaskWithHostName:port:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Please use -[NSURLSession streamTaskWithHostName:port:] or other NSURLSession methods to create instances")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Please use -[NSURLSession streamTaskWithHostName:port:] or other NSURLSession methods to create instances")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use -[NSURLSession streamTaskWithHostName:port:] or other NSURLSession methods to create instances")]
		[Static]
		[Export ("new")]
		NSURLSessionStreamTask New ();
	}

	// @interface NSURLSessionWebSocketMessage : NSObject
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface NSURLSessionWebSocketMessage
	{
		// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data __attribute__((objc_designated_initializer));
		[Export ("initWithData:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSData data);

		// -(instancetype _Nonnull)initWithString:(NSString * _Nonnull)string __attribute__((objc_designated_initializer));
		[Export ("initWithString:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string @string);

		// @property (readonly) NSURLSessionWebSocketMessageType type;
		[Export ("type")]
		NSURLSessionWebSocketMessageType Type { get; }

		// @property (readonly, copy) NSData * _Nullable data;
		[NullAllowed, Export ("data", ArgumentSemantic.Copy)]
		NSData Data { get; }

		// @property (readonly, copy) NSString * _Nullable string;
		[NullAllowed, Export ("string")]
		string String { get; }
	}

	// @interface NSURLSessionWebSocketTask : NSURLSessionTask
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[BaseType (typeof(NSURLSessionTask))]
	[DisableDefaultCtor]
	interface NSURLSessionWebSocketTask
	{
		// -(void)sendMessage:(NSURLSessionWebSocketMessage * _Nonnull)message completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
		[Export ("sendMessage:completionHandler:")]
		void SendMessage (NSURLSessionWebSocketMessage message, Action<NSError> completionHandler);

		// -(void)receiveMessageWithCompletionHandler:(void (^ _Nonnull)(NSURLSessionWebSocketMessage * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("receiveMessageWithCompletionHandler:")]
		void ReceiveMessageWithCompletionHandler (Action<NSURLSessionWebSocketMessage, NSError> completionHandler);

		// -(void)sendPingWithPongReceiveHandler:(void (^ _Nonnull)(NSError * _Nullable))pongReceiveHandler;
		[Export ("sendPingWithPongReceiveHandler:")]
		void SendPingWithPongReceiveHandler (Action<NSError> pongReceiveHandler);

		// -(void)cancelWithCloseCode:(NSURLSessionWebSocketCloseCode)closeCode reason:(NSData * _Nullable)reason;
		[Export ("cancelWithCloseCode:reason:")]
		void CancelWithCloseCode (NSURLSessionWebSocketCloseCode closeCode, [NullAllowed] NSData reason);

		// @property NSInteger maximumMessageSize;
		[Export ("maximumMessageSize")]
		nint MaximumMessageSize { get; set; }

		// @property (readonly) NSURLSessionWebSocketCloseCode closeCode;
		[Export ("closeCode")]
		NSURLSessionWebSocketCloseCode CloseCode { get; }

		// @property (readonly, copy) NSData * _Nullable closeReason;
		[NullAllowed, Export ("closeReason", ArgumentSemantic.Copy)]
		NSData CloseReason { get; }
	}

	// @interface NSURLSessionConfiguration : NSObject <NSCopying>
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLSessionConfiguration : INSCopying
	{
		// @property (readonly, strong, class) NSURLSessionConfiguration * _Nonnull defaultSessionConfiguration;
		[Static]
		[Export ("defaultSessionConfiguration", ArgumentSemantic.Strong)]
		NSURLSessionConfiguration DefaultSessionConfiguration { get; }

		// @property (readonly, strong, class) NSURLSessionConfiguration * _Nonnull ephemeralSessionConfiguration;
		[Static]
		[Export ("ephemeralSessionConfiguration", ArgumentSemantic.Strong)]
		NSURLSessionConfiguration EphemeralSessionConfiguration { get; }

		// +(NSURLSessionConfiguration * _Nonnull)backgroundSessionConfigurationWithIdentifier:(NSString * _Nonnull)identifier __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
		[Static]
		[Export ("backgroundSessionConfigurationWithIdentifier:")]
		NSURLSessionConfiguration BackgroundSessionConfigurationWithIdentifier (string identifier);

		// @property (readonly, copy) NSString * _Nullable identifier;
		[NullAllowed, Export ("identifier")]
		string Identifier { get; }

		// @property NSURLRequestCachePolicy requestCachePolicy;
		[Export ("requestCachePolicy", ArgumentSemantic.Assign)]
		NSURLRequestCachePolicy RequestCachePolicy { get; set; }

		// @property NSTimeInterval timeoutIntervalForRequest;
		[Export ("timeoutIntervalForRequest")]
		double TimeoutIntervalForRequest { get; set; }

		// @property NSTimeInterval timeoutIntervalForResource;
		[Export ("timeoutIntervalForResource")]
		double TimeoutIntervalForResource { get; set; }

		// @property NSURLRequestNetworkServiceType networkServiceType;
		[Export ("networkServiceType", ArgumentSemantic.Assign)]
		NSURLRequestNetworkServiceType NetworkServiceType { get; set; }

		// @property BOOL allowsCellularAccess;
		[Export ("allowsCellularAccess")]
		bool AllowsCellularAccess { get; set; }

		// @property BOOL allowsExpensiveNetworkAccess __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("allowsExpensiveNetworkAccess")]
		bool AllowsExpensiveNetworkAccess { get; set; }

		// @property BOOL allowsConstrainedNetworkAccess __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("allowsConstrainedNetworkAccess")]
		bool AllowsConstrainedNetworkAccess { get; set; }

		// @property BOOL requiresDNSSECValidation __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.0))) __attribute__((availability(watchos, introduced=9.0))) __attribute__((availability(tvos, introduced=16.0)));
		[Watch (9, 0), TV (16, 0), Mac (13, 0), iOS (16, 0)]
		[Export ("requiresDNSSECValidation")]
		bool RequiresDNSSECValidation { get; set; }

		// @property BOOL waitsForConnectivity __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[Export ("waitsForConnectivity")]
		bool WaitsForConnectivity { get; set; }

		// @property (getter = isDiscretionary) BOOL discretionary __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (7, 0)]
		[Export ("discretionary")]
		bool Discretionary { [Bind ("isDiscretionary")] get; set; }

		// @property (copy) NSString * _Nullable sharedContainerIdentifier __attribute__((availability(macos, introduced=10.10))) __attribute__((availability(ios, introduced=8.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 10), iOS (8, 0)]
		[NullAllowed, Export ("sharedContainerIdentifier")]
		string SharedContainerIdentifier { get; set; }

		// @property BOOL sessionSendsLaunchEvents __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (11, 0), iOS (7, 0)]
		[Export ("sessionSendsLaunchEvents")]
		bool SessionSendsLaunchEvents { get; set; }

		// @property (copy) NSDictionary * _Nullable connectionProxyDictionary;
		[NullAllowed, Export ("connectionProxyDictionary", ArgumentSemantic.Copy)]
		NSDictionary ConnectionProxyDictionary { get; set; }

		// @property SSLProtocol TLSMinimumSupportedProtocol __attribute__((availability(macos, introduced=10.9, deprecated=100000))) __attribute__((availability(ios, introduced=7.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 9)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 7, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("TLSMinimumSupportedProtocol", ArgumentSemantic.Assign)]
		SSLProtocol TLSMinimumSupportedProtocol { get; set; }

		// @property SSLProtocol TLSMaximumSupportedProtocol __attribute__((availability(macos, introduced=10.9, deprecated=100000))) __attribute__((availability(ios, introduced=7.0, deprecated=100000))) __attribute__((availability(watchos, introduced=2.0, deprecated=100000))) __attribute__((availability(tvos, introduced=9.0, deprecated=100000)));
		[Introduced (PlatformName.MacOSX, 10, 9)]
		[Deprecated (PlatformName.MacOSX, 100000, 0)]
		[Introduced (PlatformName.iOS, 7, 0)]
		[Deprecated (PlatformName.iOS, 100000, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 100000, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 100000, 0)]
		[Export ("TLSMaximumSupportedProtocol", ArgumentSemantic.Assign)]
		SSLProtocol TLSMaximumSupportedProtocol { get; set; }

		// @property tls_protocol_version_t TLSMinimumSupportedProtocolVersion __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("TLSMinimumSupportedProtocolVersion", ArgumentSemantic.Assign)]
		tls_protocol_version_t TLSMinimumSupportedProtocolVersion { get; set; }

		// @property tls_protocol_version_t TLSMaximumSupportedProtocolVersion __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("TLSMaximumSupportedProtocolVersion", ArgumentSemantic.Assign)]
		tls_protocol_version_t TLSMaximumSupportedProtocolVersion { get; set; }

		// @property BOOL HTTPShouldUsePipelining;
		[Export ("HTTPShouldUsePipelining")]
		bool HTTPShouldUsePipelining { get; set; }

		// @property BOOL HTTPShouldSetCookies;
		[Export ("HTTPShouldSetCookies")]
		bool HTTPShouldSetCookies { get; set; }

		// @property NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy;
		[Export ("HTTPCookieAcceptPolicy", ArgumentSemantic.Assign)]
		NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy { get; set; }

		// @property (copy) NSDictionary * _Nullable HTTPAdditionalHeaders;
		[NullAllowed, Export ("HTTPAdditionalHeaders", ArgumentSemantic.Copy)]
		NSDictionary HTTPAdditionalHeaders { get; set; }

		// @property NSInteger HTTPMaximumConnectionsPerHost;
		[Export ("HTTPMaximumConnectionsPerHost")]
		nint HTTPMaximumConnectionsPerHost { get; set; }

		// @property (retain) NSHTTPCookieStorage * _Nullable HTTPCookieStorage;
		[NullAllowed, Export ("HTTPCookieStorage", ArgumentSemantic.Retain)]
		NSHTTPCookieStorage HTTPCookieStorage { get; set; }

		// @property (retain) NSURLCredentialStorage * _Nullable URLCredentialStorage;
		[NullAllowed, Export ("URLCredentialStorage", ArgumentSemantic.Retain)]
		NSURLCredentialStorage URLCredentialStorage { get; set; }

		// @property (retain) NSURLCache * _Nullable URLCache;
		[NullAllowed, Export ("URLCache", ArgumentSemantic.Retain)]
		NSURLCache URLCache { get; set; }

		// @property BOOL shouldUseExtendedBackgroundIdleMode __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("shouldUseExtendedBackgroundIdleMode")]
		bool ShouldUseExtendedBackgroundIdleMode { get; set; }

		// @property (copy) NSArray<Class> * _Nullable protocolClasses;
		[NullAllowed, Export ("protocolClasses", ArgumentSemantic.Copy)]
		Class[] ProtocolClasses { get; set; }

		// @property NSURLSessionMultipathServiceType multipathServiceType __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(watchos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[NoWatch, NoTV, NoMac, iOS (11, 0)]
		[Export ("multipathServiceType", ArgumentSemantic.Assign)]
		NSURLSessionMultipathServiceType MultipathServiceType { get; set; }

		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.9, deprecated=10.15))) __attribute__((availability(ios, introduced=7.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 9, message: "Please use NSURLSessionConfiguration.defaultSessionConfiguration or other class methods to create instances")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Please use NSURLSessionConfiguration.defaultSessionConfiguration or other class methods to create instances")]
		[Introduced (PlatformName.iOS, 7, 0, message: "Please use NSURLSessionConfiguration.defaultSessionConfiguration or other class methods to create instances")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use NSURLSessionConfiguration.defaultSessionConfiguration or other class methods to create instances")]
		[Introduced (PlatformName.WatchOS, 2, 0, message: "Please use NSURLSessionConfiguration.defaultSessionConfiguration or other class methods to create instances")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Please use NSURLSessionConfiguration.defaultSessionConfiguration or other class methods to create instances")]
		[Introduced (PlatformName.TvOS, 9, 0, message: "Please use NSURLSessionConfiguration.defaultSessionConfiguration or other class methods to create instances")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use NSURLSessionConfiguration.defaultSessionConfiguration or other class methods to create instances")]
		[Static]
		[Export ("new")]
		NSURLSessionConfiguration New ();
	}

	// @protocol NSURLSessionDelegate <NSObject>
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSURLSessionDelegate
	{
		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
		[Export ("URLSession:didBecomeInvalidWithError:")]
		void URLSession (NSURLSession session, [NullAllowed] NSError error);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
		[Export ("URLSession:didReceiveChallenge:completionHandler:")]
		void URLSession (NSURLSession session, NSURLAuthenticationChallenge challenge, Action<NSURLSessionAuthChallengeDisposition, NSURLCredential> completionHandler);

		// @optional -(void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (11,0), iOS (7,0)]
		[Export ("URLSessionDidFinishEventsForBackgroundURLSession:")]
		void URLSessionDidFinishEventsForBackgroundURLSession (NSURLSession session);
	}

	// @protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	interface NSURLSessionTaskDelegate : INSURLSessionDelegate
	{
		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session didCreateTask:(NSURLSessionTask * _Nonnull)task __attribute__((availability(macos, introduced=13.0))) __attribute__((availability(ios, introduced=16.0))) __attribute__((availability(watchos, introduced=9.0))) __attribute__((availability(tvos, introduced=16.0)));
		[Watch (9,0), TV (16,0), Mac (13,0), iOS (16,0)]
		[Export ("URLSession:didCreateTask:")]
		void DidCreateTask (NSURLSession session, NSURLSessionTask task);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willBeginDelayedRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLSessionDelayedRequestDisposition, NSURLRequest * _Nullable))completionHandler __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("URLSession:task:willBeginDelayedRequest:completionHandler:")]
		void Task (NSURLSession session, NSURLSessionTask task, NSURLRequest request, Action<NSURLSessionDelayedRequestDisposition, NSURLRequest> completionHandler);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session taskIsWaitingForConnectivity:(NSURLSessionTask * _Nonnull)task __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4,0), TV (11,0), Mac (10,13), iOS (11,0)]
		[Export ("URLSession:taskIsWaitingForConnectivity:")]
		void TaskIsWaitingForConnectivity (NSURLSession session, NSURLSessionTask task);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
		[Export ("URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:")]
		void Task (NSURLSession session, NSURLSessionTask task, NSHTTPURLResponse response, NSURLRequest request, Action<NSURLRequest> completionHandler);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
		[Export ("URLSession:task:didReceiveChallenge:completionHandler:")]
		void Task (NSURLSession session, NSURLSessionTask task, NSURLAuthenticationChallenge challenge, Action<NSURLSessionAuthChallengeDisposition, NSURLCredential> completionHandler);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler __attribute__((swift_async_name("urlSession(_:needNewBodyStreamForTask:)")));
		[Export ("URLSession:task:needNewBodyStream:")]
		void Task (NSURLSession session, NSURLSessionTask task, Action<NSInputStream> completionHandler);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
		[Export ("URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:")]
		void Task (NSURLSession session, NSURLSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics __attribute__((availability(macos, introduced=10.12))) __attribute__((availability(ios, introduced=10.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
		[Export ("URLSession:task:didFinishCollectingMetrics:")]
		void Task (NSURLSession session, NSURLSessionTask task, NSURLSessionTaskMetrics metrics);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
		[Export ("URLSession:task:didCompleteWithError:")]
		void Task (NSURLSession session, NSURLSessionTask task, [NullAllowed] NSError error);
	}

	// @protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	interface NSURLSessionDataDelegate : INSURLSessionTaskDelegate
	{
		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
		[Export ("URLSession:dataTask:didReceiveResponse:completionHandler:")]
		void DataTask (NSURLSession session, NSURLSessionDataTask dataTask, NSURLResponse response, Action<NSURLSessionResponseDisposition> completionHandler);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
		[Export ("URLSession:dataTask:didBecomeDownloadTask:")]
		void DataTask (NSURLSession session, NSURLSessionDataTask dataTask, NSURLSessionDownloadTask downloadTask);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
		[Export ("URLSession:dataTask:didBecomeStreamTask:")]
		void DataTask (NSURLSession session, NSURLSessionDataTask dataTask, NSURLSessionStreamTask streamTask);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
		[Export ("URLSession:dataTask:didReceiveData:")]
		void DataTask (NSURLSession session, NSURLSessionDataTask dataTask, NSData data);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
		[Export ("URLSession:dataTask:willCacheResponse:completionHandler:")]
		void DataTask (NSURLSession session, NSURLSessionDataTask dataTask, NSCachedURLResponse proposedResponse, Action<NSCachedURLResponse> completionHandler);
	}

	// @protocol NSURLSessionDownloadDelegate <NSURLSessionTaskDelegate>
	[Watch (2,0), TV (9,0), Mac (10,9), iOS (7,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	interface NSURLSessionDownloadDelegate : INSURLSessionTaskDelegate
	{
		// @required -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
		[Abstract]
		[Export ("URLSession:downloadTask:didFinishDownloadingToURL:")]
		void DownloadTask (NSURLSession session, NSURLSessionDownloadTask downloadTask, NSURL location);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
		[Export ("URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:")]
		void DownloadTask (NSURLSession session, NSURLSessionDownloadTask downloadTask, long bytesWritten, long totalBytesWritten, long totalBytesExpectedToWrite);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
		[Export ("URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:")]
		void DownloadTask (NSURLSession session, NSURLSessionDownloadTask downloadTask, long fileOffset, long expectedTotalBytes);
	}

	// @protocol NSURLSessionStreamDelegate <NSURLSessionTaskDelegate>
	[Watch (2,0), TV (9,0), Mac (10,11), iOS (9,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	interface NSURLSessionStreamDelegate : INSURLSessionTaskDelegate
	{
		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session readClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
		[Export ("URLSession:readClosedForStreamTask:")]
		void ReadClosedForStreamTask (NSURLSession session, NSURLSessionStreamTask streamTask);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session writeClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
		[Export ("URLSession:writeClosedForStreamTask:")]
		void WriteClosedForStreamTask (NSURLSession session, NSURLSessionStreamTask streamTask);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
		[Export ("URLSession:betterRouteDiscoveredForStreamTask:")]
		void BetterRouteDiscoveredForStreamTask (NSURLSession session, NSURLSessionStreamTask streamTask);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session streamTask:(NSURLSessionStreamTask * _Nonnull)streamTask didBecomeInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
		[Export ("URLSession:streamTask:didBecomeInputStream:outputStream:")]
		void StreamTask (NSURLSession session, NSURLSessionStreamTask streamTask, NSInputStream inputStream, NSOutputStream outputStream);
	}

	// @protocol NSURLSessionWebSocketDelegate <NSURLSessionTaskDelegate>
	[Watch (6,0), TV (13,0), Mac (10,15), iOS (13,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	interface NSURLSessionWebSocketDelegate : INSURLSessionTaskDelegate
	{
		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didOpenWithProtocol:(NSString * _Nullable)protocol;
		[Export ("URLSession:webSocketTask:didOpenWithProtocol:")]
		void WebSocketTask (NSURLSession session, NSURLSessionWebSocketTask webSocketTask, [NullAllowed] string protocol);

		// @optional -(void)URLSession:(NSURLSession * _Nonnull)session webSocketTask:(NSURLSessionWebSocketTask * _Nonnull)webSocketTask didCloseWithCode:(NSURLSessionWebSocketCloseCode)closeCode reason:(NSData * _Nullable)reason;
		[Export ("URLSession:webSocketTask:didCloseWithCode:reason:")]
		void WebSocketTask (NSURLSession session, NSURLSessionWebSocketTask webSocketTask, NSURLSessionWebSocketCloseCode closeCode, [NullAllowed] NSData reason);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSURLSessionDownloadTaskResumeData __attribute__((availability(macos, introduced=10.9))) __attribute__((availability(ios, introduced=7.0))) __attribute__((availability(watchos, introduced=2.0))) __attribute__((availability(tvos, introduced=9.0)));
		[Watch (2, 0), TV (9, 0), Mac (10, 9), iOS (7, 0)]
		[Field ("NSURLSessionDownloadTaskResumeData", "__Internal")]
		NSString NSURLSessionDownloadTaskResumeData { get; }
	}

	// @interface NSURLSessionDeprecated (NSURLSessionConfiguration)
	[Category]
	[BaseType (typeof(NSURLSessionConfiguration))]
	interface NSURLSessionConfiguration_NSURLSessionDeprecated
	{
		// +(NSURLSessionConfiguration * _Nonnull)backgroundSessionConfiguration:(NSString * _Nonnull)identifier __attribute__((availability(macos, introduced=10.9, deprecated=10.10))) __attribute__((availability(ios, introduced=7.0, deprecated=8.0))) __attribute__((availability(watchos, introduced=2.0, deprecated=2.0))) __attribute__((availability(tvos, introduced=9.0, deprecated=9.0)));
		[Introduced (PlatformName.MacOSX, 10, 9)]
		[Deprecated (PlatformName.MacOSX, 10, 10)]
		[Introduced (PlatformName.iOS, 7, 0)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Introduced (PlatformName.WatchOS, 2, 0)]
		[Deprecated (PlatformName.WatchOS, 2, 0)]
		[Introduced (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Static]
		[Export ("backgroundSessionConfiguration:")]
		NSURLSessionConfiguration BackgroundSessionConfiguration (string identifier);
	}

	// @interface NSURLSessionTaskTransactionMetrics : NSObject
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLSessionTaskTransactionMetrics
	{
		// @property (readonly, copy) NSURLRequest * _Nonnull request;
		[Export ("request", ArgumentSemantic.Copy)]
		NSURLRequest Request { get; }

		// @property (readonly, copy) NSURLResponse * _Nullable response;
		[NullAllowed, Export ("response", ArgumentSemantic.Copy)]
		NSURLResponse Response { get; }

		// @property (readonly, copy) NSDate * _Nullable fetchStartDate;
		[NullAllowed, Export ("fetchStartDate", ArgumentSemantic.Copy)]
		NSDate FetchStartDate { get; }

		// @property (readonly, copy) NSDate * _Nullable domainLookupStartDate;
		[NullAllowed, Export ("domainLookupStartDate", ArgumentSemantic.Copy)]
		NSDate DomainLookupStartDate { get; }

		// @property (readonly, copy) NSDate * _Nullable domainLookupEndDate;
		[NullAllowed, Export ("domainLookupEndDate", ArgumentSemantic.Copy)]
		NSDate DomainLookupEndDate { get; }

		// @property (readonly, copy) NSDate * _Nullable connectStartDate;
		[NullAllowed, Export ("connectStartDate", ArgumentSemantic.Copy)]
		NSDate ConnectStartDate { get; }

		// @property (readonly, copy) NSDate * _Nullable secureConnectionStartDate;
		[NullAllowed, Export ("secureConnectionStartDate", ArgumentSemantic.Copy)]
		NSDate SecureConnectionStartDate { get; }

		// @property (readonly, copy) NSDate * _Nullable secureConnectionEndDate;
		[NullAllowed, Export ("secureConnectionEndDate", ArgumentSemantic.Copy)]
		NSDate SecureConnectionEndDate { get; }

		// @property (readonly, copy) NSDate * _Nullable connectEndDate;
		[NullAllowed, Export ("connectEndDate", ArgumentSemantic.Copy)]
		NSDate ConnectEndDate { get; }

		// @property (readonly, copy) NSDate * _Nullable requestStartDate;
		[NullAllowed, Export ("requestStartDate", ArgumentSemantic.Copy)]
		NSDate RequestStartDate { get; }

		// @property (readonly, copy) NSDate * _Nullable requestEndDate;
		[NullAllowed, Export ("requestEndDate", ArgumentSemantic.Copy)]
		NSDate RequestEndDate { get; }

		// @property (readonly, copy) NSDate * _Nullable responseStartDate;
		[NullAllowed, Export ("responseStartDate", ArgumentSemantic.Copy)]
		NSDate ResponseStartDate { get; }

		// @property (readonly, copy) NSDate * _Nullable responseEndDate;
		[NullAllowed, Export ("responseEndDate", ArgumentSemantic.Copy)]
		NSDate ResponseEndDate { get; }

		// @property (readonly, copy) NSString * _Nullable networkProtocolName;
		[NullAllowed, Export ("networkProtocolName")]
		string NetworkProtocolName { get; }

		// @property (readonly, getter = isProxyConnection, assign) BOOL proxyConnection;
		[Export ("proxyConnection")]
		bool ProxyConnection { [Bind ("isProxyConnection")] get; }

		// @property (readonly, getter = isReusedConnection, assign) BOOL reusedConnection;
		[Export ("reusedConnection")]
		bool ReusedConnection { [Bind ("isReusedConnection")] get; }

		// @property (readonly, assign) NSURLSessionTaskMetricsResourceFetchType resourceFetchType;
		[Export ("resourceFetchType", ArgumentSemantic.Assign)]
		NSURLSessionTaskMetricsResourceFetchType ResourceFetchType { get; }

		// @property (readonly) int64_t countOfRequestHeaderBytesSent __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("countOfRequestHeaderBytesSent")]
		long CountOfRequestHeaderBytesSent { get; }

		// @property (readonly) int64_t countOfRequestBodyBytesSent __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("countOfRequestBodyBytesSent")]
		long CountOfRequestBodyBytesSent { get; }

		// @property (readonly) int64_t countOfRequestBodyBytesBeforeEncoding __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("countOfRequestBodyBytesBeforeEncoding")]
		long CountOfRequestBodyBytesBeforeEncoding { get; }

		// @property (readonly) int64_t countOfResponseHeaderBytesReceived __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("countOfResponseHeaderBytesReceived")]
		long CountOfResponseHeaderBytesReceived { get; }

		// @property (readonly) int64_t countOfResponseBodyBytesReceived __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("countOfResponseBodyBytesReceived")]
		long CountOfResponseBodyBytesReceived { get; }

		// @property (readonly) int64_t countOfResponseBodyBytesAfterDecoding __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("countOfResponseBodyBytesAfterDecoding")]
		long CountOfResponseBodyBytesAfterDecoding { get; }

		// @property (readonly, copy) NSString * _Nullable localAddress __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[NullAllowed, Export ("localAddress")]
		string LocalAddress { get; }

		// @property (readonly, copy) NSNumber * _Nullable localPort __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[NullAllowed, Export ("localPort", ArgumentSemantic.Copy)]
		NSNumber LocalPort { get; }

		// @property (readonly, copy) NSString * _Nullable remoteAddress __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[NullAllowed, Export ("remoteAddress")]
		string RemoteAddress { get; }

		// @property (readonly, copy) NSNumber * _Nullable remotePort __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[NullAllowed, Export ("remotePort", ArgumentSemantic.Copy)]
		NSNumber RemotePort { get; }

		// @property (readonly, copy) NSNumber * _Nullable negotiatedTLSProtocolVersion __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[NullAllowed, Export ("negotiatedTLSProtocolVersion", ArgumentSemantic.Copy)]
		NSNumber NegotiatedTLSProtocolVersion { get; }

		// @property (readonly, copy) NSNumber * _Nullable negotiatedTLSCipherSuite __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[NullAllowed, Export ("negotiatedTLSCipherSuite", ArgumentSemantic.Copy)]
		NSNumber NegotiatedTLSCipherSuite { get; }

		// @property (readonly, getter = isCellular) BOOL cellular __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("cellular")]
		bool Cellular { [Bind ("isCellular")] get; }

		// @property (readonly, getter = isExpensive) BOOL expensive __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("expensive")]
		bool Expensive { [Bind ("isExpensive")] get; }

		// @property (readonly, getter = isConstrained) BOOL constrained __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("constrained")]
		bool Constrained { [Bind ("isConstrained")] get; }

		// @property (readonly, getter = isMultipath) BOOL multipath __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[Export ("multipath")]
		bool Multipath { [Bind ("isMultipath")] get; }

		// @property (readonly) NSURLSessionTaskMetricsDomainResolutionProtocol domainResolutionProtocol __attribute__((availability(macos, introduced=11.0))) __attribute__((availability(ios, introduced=14.0))) __attribute__((availability(watchos, introduced=7.0))) __attribute__((availability(tvos, introduced=14.0)));
		[Watch (7, 0), TV (14, 0), Mac (11, 0), iOS (14, 0)]
		[Export ("domainResolutionProtocol")]
		NSURLSessionTaskMetricsDomainResolutionProtocol DomainResolutionProtocol { get; }

		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.12, deprecated=10.15))) __attribute__((availability(ios, introduced=10.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=3.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=10.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 12, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Not supported")]
		[Introduced (PlatformName.iOS, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 3, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Not supported")]
		[Static]
		[Export ("new")]
		NSURLSessionTaskTransactionMetrics New ();
	}

	// @interface NSURLSessionTaskMetrics : NSObject
	[Watch (3,0), TV (10,0), Mac (10,12), iOS (10,0)]
	[BaseType (typeof(NSObject))]
	interface NSURLSessionTaskMetrics
	{
		// @property (readonly, copy) NSArray<NSURLSessionTaskTransactionMetrics *> * _Nonnull transactionMetrics;
		[Export ("transactionMetrics", ArgumentSemantic.Copy)]
		NSURLSessionTaskTransactionMetrics[] TransactionMetrics { get; }

		// @property (readonly, copy) NSDateInterval * _Nonnull taskInterval;
		[Export ("taskInterval", ArgumentSemantic.Copy)]
		NSDateInterval TaskInterval { get; }

		// @property (readonly, assign) NSUInteger redirectCount;
		[Export ("redirectCount")]
		nuint RedirectCount { get; }

		// +(instancetype _Nonnull)new __attribute__((availability(macos, introduced=10.12, deprecated=10.15))) __attribute__((availability(ios, introduced=10.0, deprecated=13.0))) __attribute__((availability(watchos, introduced=3.0, deprecated=6.0))) __attribute__((availability(tvos, introduced=10.0, deprecated=13.0)));
		[Introduced (PlatformName.MacOSX, 10, 12, message: "Not supported")]
		[Deprecated (PlatformName.MacOSX, 10, 15, message: "Not supported")]
		[Introduced (PlatformName.iOS, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Not supported")]
		[Introduced (PlatformName.WatchOS, 3, 0, message: "Not supported")]
		[Deprecated (PlatformName.WatchOS, 6, 0, message: "Not supported")]
		[Introduced (PlatformName.TvOS, 10, 0, message: "Not supported")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Not supported")]
		[Static]
		[Export ("new")]
		NSURLSessionTaskMetrics New ();
	}

	// @interface NSUserActivity : NSObject
	[Watch (2,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[BaseType (typeof(NSObject))]
	interface NSUserActivity
	{
		// -(instancetype _Nonnull)initWithActivityType:(NSString * _Nonnull)activityType __attribute__((objc_designated_initializer));
		[Export ("initWithActivityType:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string activityType);

		// @property (readonly, copy) NSString * _Nonnull activityType;
		[Export ("activityType")]
		string ActivityType { get; }

		// @property (copy) NSString * _Nullable title;
		[NullAllowed, Export ("title")]
		string Title { get; set; }

		// @property (copy) NSDictionary * _Nullable userInfo;
		[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary UserInfo { get; set; }

		// -(void)addUserInfoEntriesFromDictionary:(NSDictionary * _Nonnull)otherDictionary;
		[Export ("addUserInfoEntriesFromDictionary:")]
		void AddUserInfoEntriesFromDictionary (NSDictionary otherDictionary);

		// @property (copy) NSSet<NSString *> * _Nullable requiredUserInfoKeys __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
		[NullAllowed, Export ("requiredUserInfoKeys", ArgumentSemantic.Copy)]
		NSSet<NSString> RequiredUserInfoKeys { get; set; }

		// @property (assign) BOOL needsSave;
		[Export ("needsSave")]
		bool NeedsSave { get; set; }

		// @property (copy) NSURL * _Nullable webpageURL;
		[NullAllowed, Export ("webpageURL", ArgumentSemantic.Copy)]
		NSURL WebpageURL { get; set; }

		// @property (copy) NSURL * _Nullable referrerURL __attribute__((availability(macos, introduced=10.13))) __attribute__((availability(ios, introduced=11.0))) __attribute__((availability(watchos, introduced=4.0))) __attribute__((availability(tvos, introduced=11.0)));
		[Watch (4, 0), TV (11, 0), Mac (10, 13), iOS (11, 0)]
		[NullAllowed, Export ("referrerURL", ArgumentSemantic.Copy)]
		NSURL ReferrerURL { get; set; }

		// @property (copy) NSDate * _Nullable expirationDate __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
		[NullAllowed, Export ("expirationDate", ArgumentSemantic.Copy)]
		NSDate ExpirationDate { get; set; }

		// @property (copy) NSSet<NSString *> * _Nonnull keywords __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("keywords", ArgumentSemantic.Copy)]
		NSSet<NSString> Keywords { get; set; }

		// @property BOOL supportsContinuationStreams;
		[Export ("supportsContinuationStreams")]
		bool SupportsContinuationStreams { get; set; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		NSUserActivityDelegate Delegate { get; set; }

		// @property (weak) id<NSUserActivityDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (copy) NSString * _Nullable targetContentIdentifier __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=13.0))) __attribute__((availability(watchos, introduced=6.0))) __attribute__((availability(tvos, introduced=13.0)));
		[Watch (6, 0), TV (13, 0), Mac (10, 15), iOS (13, 0)]
		[NullAllowed, Export ("targetContentIdentifier")]
		string TargetContentIdentifier { get; set; }

		// -(void)becomeCurrent;
		[Export ("becomeCurrent")]
		void BecomeCurrent ();

		// -(void)resignCurrent __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3,0), TV (10,0), Mac (10,11), iOS (9,0)]
		[Export ("resignCurrent")]
		void ResignCurrent ();

		// -(void)invalidate;
		[Export ("invalidate")]
		void Invalidate ();

		// -(void)getContinuationStreamsWithCompletionHandler:(void (^ _Nonnull)(NSInputStream * _Nullable, NSOutputStream * _Nullable, NSError * _Nullable))completionHandler;
		[Export ("getContinuationStreamsWithCompletionHandler:")]
		void GetContinuationStreamsWithCompletionHandler (Action<NSInputStream, NSOutputStream, NSError> completionHandler);

		// @property (getter = isEligibleForHandoff) BOOL eligibleForHandoff __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("eligibleForHandoff")]
		bool EligibleForHandoff { [Bind ("isEligibleForHandoff")] get; set; }

		// @property (getter = isEligibleForSearch) BOOL eligibleForSearch __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("eligibleForSearch")]
		bool EligibleForSearch { [Bind ("isEligibleForSearch")] get; set; }

		// @property (getter = isEligibleForPublicIndexing) BOOL eligibleForPublicIndexing __attribute__((availability(macos, introduced=10.11))) __attribute__((availability(ios, introduced=9.0))) __attribute__((availability(watchos, introduced=3.0))) __attribute__((availability(tvos, introduced=10.0)));
		[Watch (3, 0), TV (10, 0), Mac (10, 11), iOS (9, 0)]
		[Export ("eligibleForPublicIndexing")]
		bool EligibleForPublicIndexing { [Bind ("isEligibleForPublicIndexing")] get; set; }

		// @property (getter = isEligibleForPrediction) BOOL eligibleForPrediction __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(macos, unavailable))) __attribute__((availability(tvos, unavailable)));
		[Watch (5, 0), NoTV, NoMac, iOS (12, 0)]
		[Export ("eligibleForPrediction")]
		bool EligibleForPrediction { [Bind ("isEligibleForPrediction")] get; set; }

		// @property (copy) API_UNAVAILABLE( tvos ) NSUserActivityPersistentIdentifier persistentIdentifier __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, unavailable)));
		[Watch (5, 0), NoTV, Mac (10, 15), iOS (12, 0)]
		[Export ("persistentIdentifier")]
		string PersistentIdentifier { get; set; }

		// +(void)deleteSavedUserActivitiesWithPersistentIdentifiers:(NSArray<NSUserActivityPersistentIdentifier> * _Nonnull)persistentIdentifiers completionHandler:(void (^ _Nonnull)(void))handler __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, unavailable)));
		[Watch (5,0), NoTV, Mac (10,15), iOS (12,0)]
		[Static]
		[Export ("deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:")]
		void DeleteSavedUserActivitiesWithPersistentIdentifiers (string[] persistentIdentifiers, Action handler);

		// +(void)deleteAllSavedUserActivitiesWithCompletionHandler:(void (^ _Nonnull)(void))handler __attribute__((availability(macos, introduced=10.15))) __attribute__((availability(ios, introduced=12.0))) __attribute__((availability(watchos, introduced=5.0))) __attribute__((availability(tvos, unavailable)));
		[Watch (5,0), NoTV, Mac (10,15), iOS (12,0)]
		[Static]
		[Export ("deleteAllSavedUserActivitiesWithCompletionHandler:")]
		void DeleteAllSavedUserActivitiesWithCompletionHandler (Action handler);
	}

	[Static]
	partial interface Constants
	{
		// extern NSString *const _Nonnull NSUserActivityTypeBrowsingWeb;
		[Field ("NSUserActivityTypeBrowsingWeb", "__Internal")]
		NSString NSUserActivityTypeBrowsingWeb { get; }
	}

	// @protocol NSUserActivityDelegate <NSObject>
	[Watch (3,0), TV (9,0), Mac (10,10), iOS (8,0)]
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface NSUserActivityDelegate
	{
		// @optional -(void)userActivityWillSave:(NSUserActivity * _Nonnull)userActivity;
		[Export ("userActivityWillSave:")]
		void UserActivityWillSave (NSUserActivity userActivity);

		// @optional -(void)userActivityWasContinued:(NSUserActivity * _Nonnull)userActivity;
		[Export ("userActivityWasContinued:")]
		void UserActivityWasContinued (NSUserActivity userActivity);

		// @optional -(void)userActivity:(NSUserActivity * _Nonnull)userActivity didReceiveInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
		[Export ("userActivity:didReceiveInputStream:outputStream:")]
		void UserActivity (NSUserActivity userActivity, NSInputStream inputStream, NSOutputStream outputStream);
	}

	// @interface NSUUID : NSObject <NSCopying, NSSecureCoding>
	[Watch (2,0), TV (9,0), Mac (10,8), iOS (6,0)]
	[BaseType (typeof(NSObject))]
	interface NSUUID : INSCopying, INSSecureCoding
	{
		// +(instancetype _Nonnull)UUID;
		[Static]
		[Export ("UUID")]
		NSUUID UUID ();

		// -(instancetype _Nullable)initWithUUIDString:(NSString * _Nonnull)string;
		[Export ("initWithUUIDString:")]
		NativeHandle Constructor (string @string);

		// -(instancetype _Nonnull)initWithUUIDBytes:(const unsigned char * _Nullable)bytes;
		[Export ("initWithUUIDBytes:")]
		NativeHandle Constructor ([NullAllowed] byte[] bytes);

		// -(void)getUUIDBytes:(unsigned char * _Nonnull)uuid;
		[Export ("getUUIDBytes:")]
		void GetUUIDBytes (byte[] uuid);

		// -(NSComparisonResult)compare:(NSUUID * _Nonnull)otherUUID __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(watchos, introduced=8.0))) __attribute__((availability(tvos, introduced=15.0)));
		[Watch (8,0), TV (15,0), Mac (12,0), iOS (15,0)]
		[Export ("compare:")]
		NSComparisonResult Compare (NSUUID otherUUID);

		// @property (readonly, copy) NSString * _Nonnull UUIDString;
		[Export ("UUIDString")]
		string UUIDString { get; }
	}

	[Static]
	partial interface Constants
	{
		// extern double StripeCoreVersionNumber;
		[Field ("StripeCoreVersionNumber", "__Internal")]
		double StripeCoreVersionNumber { get; }

		// extern const unsigned char[] StripeCoreVersionString;
		[Field ("StripeCoreVersionString", "__Internal")]
		byte[] StripeCoreVersionString { get; }
	}
}
