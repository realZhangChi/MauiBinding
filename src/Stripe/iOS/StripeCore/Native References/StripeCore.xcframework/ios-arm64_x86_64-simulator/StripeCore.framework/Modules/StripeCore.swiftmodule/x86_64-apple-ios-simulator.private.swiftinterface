// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StripeCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreGraphics
import CoreTelephony
import Foundation
import PassKit
@_exported import StripeCore
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_spi(STP) public struct EmptyResponse : StripeCore.UnknownFieldsDecodable {
  @_spi(STP) public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters?
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) public struct StripeFile : StripeCore.UnknownFieldsDecodable, Swift.Equatable {
  @_spi(STP) @frozen public enum Purpose : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
    @_spi(STP) case disputeEvidence
    @_spi(STP) case identityDocument
    @_spi(STP) case identityPrivate
    @_spi(STP) case unparsable
    @_spi(STP) public init?(rawValue: Swift.String)
    @_spi(STP) public typealias RawValue = Swift.String
    @_spi(STP) public var rawValue: Swift.String {
      @_spi(STP) get
    }
  }
  @_spi(STP) public let created: Foundation.Date
  @_spi(STP) public let id: Swift.String
  @_spi(STP) public let purpose: StripeCore.StripeFile.Purpose
  @_spi(STP) public let size: Swift.Int
  @_spi(STP) public let type: Swift.String?
  @_spi(STP) public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters?
  @_spi(STP) public static func == (a: StripeCore.StripeFile, b: StripeCore.StripeFile) -> Swift.Bool
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
extension StripeCore.STPAPIClient {
  @_spi(STP) public typealias FileAndUploadMetrics = (file: StripeCore.StripeFile, metrics: StripeCore.STPAPIClient.ImageUploadMetrics)
  @_spi(STP) public struct ImageUploadMetrics {
    @_spi(STP) public let timeToUpload: Foundation.TimeInterval
    @_spi(STP) public let fileSizeBytes: Swift.Int
  }
  @_spi(STP) public static let defaultImageFileName: Swift.String
  @_spi(STP) public func uploadImage(_ image: UIKit.UIImage, compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality, purpose: Swift.String, fileName: Swift.String = defaultImageFileName, ownedBy: Swift.String? = nil, ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<StripeCore.StripeFile, Swift.Error>) -> Swift.Void)
  @_spi(STP) public func uploadImageAndGetMetrics(_ image: UIKit.UIImage, compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality, purpose: Swift.String, fileName: Swift.String = defaultImageFileName, ownedBy: Swift.String? = nil, ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<StripeCore.STPAPIClient.FileAndUploadMetrics, Swift.Error>) -> Swift.Void)
  @_spi(STP) public func uploadImage(_ image: UIKit.UIImage, compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality, purpose: Swift.String, fileName: Swift.String = defaultImageFileName, ownedBy: Swift.String? = nil, ephemeralKeySecret: Swift.String? = nil) -> StripeCore.Future<StripeCore.StripeFile>
  @_spi(STP) public func uploadImageAndGetMetrics(_ image: UIKit.UIImage, compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality, purpose: Swift.String, fileName: Swift.String = defaultImageFileName, ownedBy: Swift.String? = nil, ephemeralKeySecret: Swift.String? = nil) -> StripeCore.Future<StripeCore.STPAPIClient.FileAndUploadMetrics>
}
@_inheritsConvenienceInitializers @objc public class STPAPIClient : ObjectiveC.NSObject {
  @objc public static let STPSDKVersion: Swift.String
  @objc(sharedClient) public static let shared: StripeCore.STPAPIClient
  @objc public var publishableKey: Swift.String? {
    @objc get
    @objc set
  }
  @_spi(STP) public var _stored_configuration: ObjectiveC.NSObject?
  @objc public var stripeAccount: Swift.String?
  @objc public var appInfo: StripeCore.STPAppInfo?
  @objc public static let apiVersion: Swift.String
  @_spi(STP) public var apiURL: Foundation.URL!
  @_spi(STP) public var urlSession: Foundation.URLSession
  @_spi(STP) public var sourcePollers: [Swift.String : ObjectiveC.NSObject]?
  @_spi(STP) public var sourcePollersQueue: Dispatch.DispatchQueue?
  @_spi(STP) public var betas: Swift.Set<Swift.String>
  @_spi(STP) public var publishableKeyIsUserKey: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc(initWithPublishableKey:) convenience public init(publishableKey: Swift.String)
  @_spi(STP) public func configuredRequest(for url: Foundation.URL, using ephemeralKeySecret: Swift.String? = nil, additionalHeaders: [Swift.String : Swift.String] = [:]) -> Foundation.URLRequest
  @_spi(STP) public func authorizationHeader(using substituteAuthorizationBearer: Swift.String? = nil) -> [Swift.String : Swift.String]
  @_spi(STP) public var isTestmode: Swift.Bool {
    get
  }
  @objc deinit
}
extension StripeCore.STPAPIClient {
  @_spi(STP) public func get<T>(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @_spi(STP) public func get<T>(url: Foundation.URL, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @_spi(STP) public func get<T>(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil) -> StripeCore.Promise<T> where T : Swift.Decodable
  @_spi(STP) public func post<T>(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @_spi(STP) public func post<T>(url: Foundation.URL, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<T, Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @_spi(STP) public func post<T>(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = nil) -> StripeCore.Promise<T> where T : Swift.Decodable
  @_spi(STP) public func post<I, O>(resource: Swift.String, object: I, ephemeralKeySecret: Swift.String? = nil) -> StripeCore.Promise<O> where I : Swift.Encodable, O : Swift.Decodable
  @_spi(STP) public func post<I, O>(resource: Swift.String, object: I, ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<O, Swift.Error>) -> Swift.Void) where I : Swift.Encodable, O : Swift.Decodable
  @_spi(STP) public func post<I, O>(url: Foundation.URL, object: I, ephemeralKeySecret: Swift.String? = nil, completion: @escaping (Swift.Result<O, Swift.Error>) -> Swift.Void) where I : Swift.Encodable, O : Swift.Decodable
  @_spi(STP) public static func decodeResponse<T>(data: Foundation.Data?, error: Swift.Error?, response: Foundation.URLResponse?) -> Swift.Result<T, Swift.Error> where T : Swift.Decodable
}
@objc public class STPAppInfo : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, partnerId: Swift.String?, version: Swift.String?, url: Swift.String?)
  @objc public var name: Swift.String {
    get
  }
  @objc public var partnerId: Swift.String? {
    get
  }
  @objc public var version: Swift.String? {
    get
  }
  @objc public var url: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class StripeAPI : ObjectiveC.NSObject {
  @objc public static var defaultPublishableKey: Swift.String?
  @objc public func setDefaultPublishableKey(_ publishableKey: Swift.String)
  @objc public static var advancedFraudSignalsEnabled: Swift.Bool
  @objc public static var maxRetries: Swift.Int
  @objc public class var jcbPaymentNetworkSupported: Swift.Bool {
    @objc get
    @objc set(JCBPaymentNetworkSupported)
  }
  @objc public static var additionalEnabledApplePayNetworks: [PassKit.PKPaymentNetwork]
  @objc public class func canSubmitPaymentRequest(_ paymentRequest: PassKit.PKPaymentRequest) -> Swift.Bool
  @objc public class func deviceSupportsApplePay() -> Swift.Bool
  @objc(paymentRequestWithMerchantIdentifier:country:currency:) public class func paymentRequest(withMerchantIdentifier merchantIdentifier: Swift.String, country countryCode: Swift.String, currency currencyCode: Swift.String) -> PassKit.PKPaymentRequest
  @discardableResult
  @objc(handleStripeURLCallbackWithURL:) public static func handleURLCallback(with url: Foundation.URL) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_spi(STP) extension StripeCore.StripeAPIConfiguration {
  @_spi(STP) public static let STPSDKVersion: Swift.String
}
@_spi(STP) public struct StripeAPIConfiguration {
  @_spi(STP) public static let sharedUrlSessionConfiguration: Foundation.URLSessionConfiguration
}
@_spi(STP) public enum StripeError : Swift.Error {
  @_spi(STP) case apiError(StripeCore.StripeAPIError)
  @_spi(STP) case invalidRequest
  @_spi(STP) public var localizedDescription: Swift.String {
    @_spi(STP) get
  }
}
@_spi(STP) extension StripeCore.StripeError : Foundation.LocalizedError {
  @_spi(STP) public var errorDescription: Swift.String? {
    @_spi(STP) get
  }
  @_spi(STP) public var failureReason: Swift.String? {
    @_spi(STP) get
  }
  @_spi(STP) public var recoverySuggestion: Swift.String? {
    @_spi(STP) get
  }
  @_spi(STP) public var helpAnchor: Swift.String? {
    @_spi(STP) get
  }
}
@_spi(STP) extension StripeCore.StripeError : StripeCore.AnalyticLoggableError {
  @_spi(STP) public func analyticLoggableSerializeForLogging() -> [Swift.String : Any]
}
@_spi(STP) public struct StripeAPIError : StripeCore.UnknownFieldsDecodable {
  @_spi(STP) public var type: StripeCore.StripeAPIError.ErrorType
  @_spi(STP) public var code: Swift.String?
  @_spi(STP) public var docUrl: Foundation.URL?
  @_spi(STP) public var message: Swift.String?
  @_spi(STP) public var param: Swift.String?
  @_spi(STP) public var statusCode: Swift.Int?
  @_spi(STP) public enum ErrorType : Swift.String, StripeCore.SafeEnumCodable {
    @_spi(STP) case apiError
    @_spi(STP) case cardError
    @_spi(STP) case idempotencyError
    @_spi(STP) case invalidRequestError
    @_spi(STP) case unparsable
    @_spi(STP) public init?(rawValue: Swift.String)
    @_spi(STP) public typealias RawValue = Swift.String
    @_spi(STP) public var rawValue: Swift.String {
      @_spi(STP) get
    }
  }
  @_spi(STP) public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters?
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) public struct StripeAPIErrorResponse : StripeCore.UnknownFieldsDecodable {
  @_spi(STP) public var error: StripeCore.StripeAPIError?
  @_spi(STP) public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters?
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) public protocol Analytic {
  @_spi(STP) var event: StripeCore.STPAnalyticEvent { get }
  @_spi(STP) var params: [Swift.String : Any] { get }
}
@_spi(STP) public protocol ErrorAnalytic : StripeCore.Analytic {
  @_spi(STP) var error: Swift.Error { get }
}
@_spi(STP) public struct GenericAnalytic : StripeCore.Analytic {
  @_spi(STP) public let event: StripeCore.STPAnalyticEvent
  @_spi(STP) public let params: [Swift.String : Any]
  @_spi(STP) public init(event: StripeCore.STPAnalyticEvent, params: [Swift.String : Any])
}
@_spi(STP) public protocol AnalyticLoggableError : Swift.Error {
  @_spi(STP) func analyticLoggableSerializeForLogging() -> [Swift.String : Any]
}
@_spi(STP) public protocol AnalyticLoggableStringError : Swift.Error {
  @_spi(STP) var loggableType: Swift.String { get }
}
@_spi(STP) extension StripeCore.AnalyticLoggableStringError where Self : Swift.RawRepresentable, Self.RawValue == Swift.String {
  @_spi(STP) public var loggableType: Swift.String {
    @_spi(STP) get
  }
}
@_spi(STP) extension Swift.Error {
  @_spi(STP) public func serializeForLogging() -> [Swift.String : Any]
}
@_spi(STP) public protocol AnalyticsClientV2Protocol {
  @_spi(STP) var clientId: Swift.String { get }
  @_spi(STP) func log(eventName: Swift.String, parameters: [Swift.String : Any])
}
@_spi(STP) public class AnalyticsClientV2 : StripeCore.AnalyticsClientV2Protocol {
  @_spi(STP) final public let clientId: Swift.String
  @_spi(STP) final public let origin: Swift.String
  @_spi(STP) public init(clientId: Swift.String, origin: Swift.String)
  @_spi(STP) public static func serialize(error: Swift.Error, filePath: Swift.StaticString?, line: Swift.UInt?) -> [Swift.String : Any]
  @_spi(STP) public func log(eventName: Swift.String, parameters: [Swift.String : Any])
  @_spi(STP) @objc deinit
}
@_spi(STP) extension StripeCore.AnalyticsClientV2Protocol {
  @_spi(STP) public func makeCommonPayload() -> [Swift.String : Any]
  @_spi(STP) public func payload(withEventName eventName: Swift.String, parameters: [Swift.String : Any]) -> [Swift.String : Any]
}
@_spi(STP) public enum STPAnalyticEvent : Swift.String {
  @_spi(STP) case tokenCreation
  @_spi(STP) case sourceCreation
  @_spi(STP) case paymentMethodCreation
  @_spi(STP) case paymentMethodIntentCreation
  @_spi(STP) case setupIntentConfirmationAttempt
  @_spi(STP) case _3DS2AuthenticationRequestParamsFailed
  @_spi(STP) case _3DS2AuthenticationAttempt
  @_spi(STP) case _3DS2FrictionlessFlow
  @_spi(STP) case urlRedirectNextAction
  @_spi(STP) case _3DS2ChallengeFlowPresented
  @_spi(STP) case _3DS2ChallengeFlowTimedOut
  @_spi(STP) case _3DS2ChallengeFlowUserCanceled
  @_spi(STP) case _3DS2ChallengeFlowCompleted
  @_spi(STP) case _3DS2ChallengeFlowErrored
  @_spi(STP) case _3DS2RedirectUserCanceled
  @_spi(STP) case cardMetadataLoadedTooSlow
  @_spi(STP) case cardMetadataResponseFailure
  @_spi(STP) case cardMetadataMissingRange
  @_spi(STP) case cardScanSucceeded
  @_spi(STP) case cardScanCancelled
  @_spi(STP) case verificationSheetPresented
  @_spi(STP) case verificationSheetClosed
  @_spi(STP) case verificationSheetFailed
  @_spi(STP) case financialConnectionsSheetPresented
  @_spi(STP) case financialConnectionsSheetClosed
  @_spi(STP) case financialConnectionsSheetFailed
  @_spi(STP) case mcInitCustomCustomer
  @_spi(STP) case mcInitCompleteCustomer
  @_spi(STP) case mcInitCustomApplePay
  @_spi(STP) case mcInitCompleteApplePay
  @_spi(STP) case mcInitCustomCustomerApplePay
  @_spi(STP) case mcInitCompleteCustomerApplePay
  @_spi(STP) case mcInitCustomDefault
  @_spi(STP) case mcInitCompleteDefault
  @_spi(STP) case mcShowCustomNewPM
  @_spi(STP) case mcShowCustomSavedPM
  @_spi(STP) case mcShowCustomApplePay
  @_spi(STP) case mcShowCustomLink
  @_spi(STP) case mcShowCompleteNewPM
  @_spi(STP) case mcShowCompleteSavedPM
  @_spi(STP) case mcShowCompleteApplePay
  @_spi(STP) case mcShowCompleteLink
  @_spi(STP) case mcPaymentCustomNewPMSuccess
  @_spi(STP) case mcPaymentCustomSavedPMSuccess
  @_spi(STP) case mcPaymentCustomApplePaySuccess
  @_spi(STP) case mcPaymentCustomLinkSuccess
  @_spi(STP) case mcPaymentCompleteNewPMSuccess
  @_spi(STP) case mcPaymentCompleteSavedPMSuccess
  @_spi(STP) case mcPaymentCompleteApplePaySuccess
  @_spi(STP) case mcPaymentCompleteLinkSuccess
  @_spi(STP) case mcPaymentCustomNewPMFailure
  @_spi(STP) case mcPaymentCustomSavedPMFailure
  @_spi(STP) case mcPaymentCustomApplePayFailure
  @_spi(STP) case mcPaymentCustomLinkFailure
  @_spi(STP) case mcPaymentCompleteNewPMFailure
  @_spi(STP) case mcPaymentCompleteSavedPMFailure
  @_spi(STP) case mcPaymentCompleteApplePayFailure
  @_spi(STP) case mcPaymentCompleteLinkFailure
  @_spi(STP) case mcOptionSelectCustomNewPM
  @_spi(STP) case mcOptionSelectCustomSavedPM
  @_spi(STP) case mcOptionSelectCustomApplePay
  @_spi(STP) case mcOptionSelectCustomLink
  @_spi(STP) case mcOptionSelectCompleteNewPM
  @_spi(STP) case mcOptionSelectCompleteSavedPM
  @_spi(STP) case mcOptionSelectCompleteApplePay
  @_spi(STP) case mcOptionSelectCompleteLink
  @_spi(STP) case linkSignupCheckboxChecked
  @_spi(STP) case linkSignupFlowPresented
  @_spi(STP) case linkSignupStart
  @_spi(STP) case linkSignupComplete
  @_spi(STP) case linkSignupFailure
  @_spi(STP) case linkPopupShow
  @_spi(STP) case linkPopupSuccess
  @_spi(STP) case linkPopupCancel
  @_spi(STP) case linkPopupSkipped
  @_spi(STP) case linkPopupError
  @_spi(STP) case linkPopupLogout
  @_spi(STP) case linkAccountLookupFailure
  @_spi(STP) case luxeSerializeFailure
  @_spi(STP) case luxeImageSelectorIconDownloaded
  @_spi(STP) case luxeImageSelectorIconFromBundle
  @_spi(STP) case luxeImageSelectorIconNotFound
  @_spi(STP) case cs_add_payment_method_screen_presented
  @_spi(STP) case cs_select_payment_method_screen_presented
  @_spi(STP) case cs_select_payment_method_screen_confirmed_savedpm_success
  @_spi(STP) case cs_select_payment_method_screen_confirmed_savedpm_failure
  @_spi(STP) case cs_select_payment_method_screen_edit_tapped
  @_spi(STP) case cs_select_payment_method_screen_done_tapped
  @_spi(STP) case cs_select_payment_method_screen_removepm_success
  @_spi(STP) case cs_select_payment_method_screen_removepm_failure
  @_spi(STP) case cs_add_payment_method_via_setupintent_success
  @_spi(STP) case cs_add_payment_method_via_setupintent_canceled
  @_spi(STP) case cs_add_payment_method_via_setupintent_failure
  @_spi(STP) case cs_add_payment_method_via_createAttach_success
  @_spi(STP) case cs_add_payment_method_via_createAttach_failure
  @_spi(STP) case addressShow
  @_spi(STP) case addressCompleted
  @_spi(STP) case paymentMethodMessagingViewLoadSucceeded
  @_spi(STP) case paymentMethodMessagingViewLoadFailed
  @_spi(STP) case paymentMethodMessagingViewTapped
  @_spi(STP) case paymentSheetForceSuccess
  @_spi(STP) case paymentSheetLoadStarted
  @_spi(STP) case paymentSheetLoadSucceeded
  @_spi(STP) case paymentSheetLoadFailed
  @_spi(STP) case paymentSheetDismissed
  @_spi(STP) case paymentSheetCarouselPaymentMethodTapped
  @_spi(STP) case paymentSheetConfirmButtonTapped
  @_spi(STP) public init?(rawValue: Swift.String)
  @_spi(STP) public typealias RawValue = Swift.String
  @_spi(STP) public var rawValue: Swift.String {
    @_spi(STP) get
  }
}
@_spi(STP) public protocol STPAnalyticsProtocol {
  @_spi(STP) static var stp_analyticsIdentifier: Swift.String { get }
}
@_spi(STP) public protocol STPAnalyticsClientProtocol {
  @_spi(STP) func addClass<T>(toProductUsageIfNecessary klass: T.Type) where T : StripeCore.STPAnalyticsProtocol
  @_spi(STP) func log(analytic: StripeCore.Analytic, apiClient: StripeCore.STPAPIClient)
}
@_spi(STP) @objc @_inheritsConvenienceInitializers public class STPAnalyticsClient : ObjectiveC.NSObject, StripeCore.STPAnalyticsClientProtocol {
  @_spi(STP) @objc public static let sharedClient: StripeCore.STPAnalyticsClient
  @_spi(STP) @objc public var productUsage: Swift.Set<Swift.String>
  @_spi(STP) @objc public class func tokenType(fromParameters parameters: [Swift.AnyHashable : Any]) -> Swift.String?
  @_spi(STP) public func addClass<T>(toProductUsageIfNecessary klass: T.Type) where T : StripeCore.STPAnalyticsProtocol
  @_spi(STP) public func clearAdditionalInfo()
  @_spi(STP) public func additionalInfo() -> [Swift.String]
  @_spi(STP) public func log(analytic: StripeCore.Analytic, apiClient: StripeCore.STPAPIClient = .shared)
  @_spi(STP) @objc override dynamic public init()
  @_spi(STP) @objc deinit
}
@_spi(STP) extension StripeCore.STPAnalyticsClient {
  @_spi(STP) public func commonPayload(_ apiClient: StripeCore.STPAPIClient) -> [Swift.String : Any]
}
@_spi(STP) extension Foundation.Decimal {
  @_spi(STP) public var floatValue: Swift.Float {
    @_spi(STP) get
  }
}
extension StripeCore.STPErrorCode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_spi(STP) extension Swift.Array {
  @_spi(STP) public func stp_boundSafeObject(at index: Swift.Int) -> Element?
}
extension Swift.Array where Element == Swift.String {
  public func caseInsensitiveContains(_ other: Swift.String) -> Swift.Bool
}
extension Swift.Array where Element : Swift.Equatable {
  @discardableResult
  public mutating func remove(_ element: Element) -> Element?
}
extension Foundation.Bundle {
  @_spi(STP) public class func stp_applicationName() -> Swift.String?
  @_spi(STP) public class func stp_applicationVersion() -> Swift.String?
  @_spi(STP) public class func stp_applicationBundleId() -> Swift.String?
  @_spi(STP) public class func buildVersion() -> Swift.String?
  @_spi(STP) public class var displayName: Swift.String? {
    get
  }
}
@_spi(STP) extension Foundation.CharacterSet {
  @_spi(STP) public static let stp_asciiDigit: Foundation.CharacterSet
  @_spi(STP) public static let stp_asciiLetters: Foundation.CharacterSet
  @_spi(STP) public static let stp_invertedAsciiDigit: Foundation.CharacterSet
  @_spi(STP) public static let stp_postalCode: Foundation.CharacterSet
  @_spi(STP) public static let stp_invertedPostalCode: Foundation.CharacterSet
}
extension Foundation.NSError {
  @_spi(STP) @objc dynamic public class func stp_genericConnectionError() -> Foundation.NSError
  @_spi(STP) @objc dynamic public class func stp_genericFailedToParseResponseError() -> Foundation.NSError
  @_spi(STP) @objc dynamic public class func stp_ephemeralKeyDecodingError() -> Foundation.NSError
  @_spi(STP) @objc dynamic public class func stp_clientSecretError() -> Foundation.NSError
  @_spi(STP) @objc dynamic public class func stp_cardErrorInvalidNumberUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardInvalidCVCUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorInvalidExpMonthUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorInvalidExpYearUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorExpiredCardUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorDeclinedUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_genericDeclineErrorUserMessage() -> Swift.String
  @_spi(STP) @objc dynamic public class func stp_cardErrorProcessingErrorUserMessage() -> Swift.String
  @_spi(STP) public static var stp_invalidOwnerName: Swift.String {
    get
  }
  @_spi(STP) public static var stp_invalidBankAccountIban: Swift.String {
    get
  }
}
@_spi(STP) extension Foundation.NSError {
  @_spi(STP) public class func stp_unexpectedErrorMessage() -> Swift.String
}
extension Foundation.URLRequest {
  @_spi(STP) public mutating func stp_addParameters(toURL parameters: [Swift.String : Any])
  @_spi(STP) public mutating func stp_setFormPayload(_ formPayload: [Swift.String : Any])
  @_spi(STP) public mutating func stp_setMultipartForm(_ data: Foundation.Data?, boundary: Swift.String?)
}
@_spi(STP) extension Swift.String {
  @_spi(STP) public func stp_stringByRemovingCharacters(from characterSet: Foundation.CharacterSet) -> Swift.String
  @_spi(STP) public var isSecretKey: Swift.Bool {
    @_spi(STP) get
  }
  @_spi(STP) public var nonEmpty: Swift.String? {
    @_spi(STP) get
  }
}
@_spi(STP) public func stringIfHasContentsElseNil(_ string: Swift.String?) -> Swift.String?
@_spi(STP) public typealias ImageDataAndSize = (imageData: Foundation.Data, imageSize: CoreFoundation.CGSize)
extension UIKit.UIImage {
  @_spi(STP) public static let defaultCompressionQuality: CoreFoundation.CGFloat
  @_spi(STP) public func jpegDataAndDimensions(maxBytes: Swift.Int? = nil, compressionQuality: CoreFoundation.CGFloat = defaultCompressionQuality) -> StripeCore.ImageDataAndSize
  @_spi(STP) public func heicDataAndDimensions(maxBytes: Swift.Int? = nil, compressionQuality: CoreFoundation.CGFloat = defaultCompressionQuality) -> StripeCore.ImageDataAndSize
  @_spi(STP) public func resized(to scale: CoreFoundation.CGFloat) -> UIKit.UIImage?
}
extension Swift.Array where Element : UIKit.UIImage {
  @_spi(STP) public func heicData(compressionQuality: CoreFoundation.CGFloat = UIImage.defaultCompressionQuality) -> Foundation.Data?
}
public protocol UnknownFieldsDecodable : Swift.Decodable {
  var _allResponseFieldsStorage: StripeCore.NonEncodableParameters? { get set }
}
public protocol UnknownFieldsEncodable : Swift.Encodable {
  var _additionalParametersStorage: StripeCore.NonEncodableParameters? { get set }
}
public protocol SafeEnumDecodable : Swift.Decodable {
  static var unparsable: Self { get }
}
public protocol SafeEnumCodable : StripeCore.SafeEnumDecodable, Swift.Encodable {
}
extension StripeCore.UnknownFieldsDecodable {
  public var allResponseFields: [Swift.String : Any] {
    get
  }
}
extension StripeCore.UnknownFieldsEncodable {
  public var additionalParameters: [Swift.String : Any] {
    get
    set
  }
}
@_spi(STP) public enum UnknownFieldsCodableFloats : Swift.String {
  @_spi(STP) case PositiveInfinity
  @_spi(STP) case NegativeInfinity
  @_spi(STP) case NaN
  @_spi(STP) public init?(rawValue: Swift.String)
  @_spi(STP) public typealias RawValue = Swift.String
  @_spi(STP) public var rawValue: Swift.String {
    @_spi(STP) get
  }
}
public protocol UnknownFieldsCodable : StripeCore.UnknownFieldsDecodable, StripeCore.UnknownFieldsEncodable {
}
public struct NonEncodableParameters {
  @_spi(STP) public var storage: [Swift.String : Any] {
    get
  }
}
extension StripeCore.NonEncodableParameters : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension StripeCore.NonEncodableParameters : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension StripeCore.NonEncodableParameters : Swift.Equatable {
  public static func == (lhs: StripeCore.NonEncodableParameters, rhs: StripeCore.NonEncodableParameters) -> Swift.Bool
}
extension StripeCore.NonEncodableParameters : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomLeafReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_spi(STP) @_hasMissingDesignatedInitializers public class StripeJSONDecoder {
  @_spi(STP) public var userInfo: [Swift.CodingUserInfoKey : Any]
  @_spi(STP) public var inputFormatting: Foundation.JSONSerialization.ReadingOptions
  @_spi(STP) public func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  @_spi(STP) @objc deinit
}
@_spi(STP) @_hasMissingDesignatedInitializers public class StripeJSONEncoder {
  @_spi(STP) public var userInfo: [Swift.CodingUserInfoKey : Any]
  @_spi(STP) public var outputFormatting: Foundation.JSONSerialization.WritingOptions
  @_spi(STP) public func encode<T>(_ value: T, includingUnknownFields: Swift.Bool = true) throws -> Foundation.Data where T : Swift.Encodable
  @_spi(STP) public func encodeJSONDictionary<T>(_ value: T, includingUnknownFields: Swift.Bool = true) throws -> [Swift.String : Any] where T : Swift.Encodable
  @_spi(STP) @objc deinit
}
@_spi(STP) @frozen public enum FinancialConnectionsSDKResult {
  @_spi(STP) case completed(linkedBank: StripeCore.LinkedBank)
  @_spi(STP) case cancelled
  @_spi(STP) case failed(error: Swift.Error)
}
@_spi(STP) public protocol FinancialConnectionsSDKInterface {
  @_spi(STP) init()
  @_spi(STP) func presentFinancialConnectionsSheet(apiClient: StripeCore.STPAPIClient, clientSecret: Swift.String, returnURL: Swift.String?, from presentingViewController: UIKit.UIViewController, completion: @escaping (StripeCore.FinancialConnectionsSDKResult) -> Swift.Void)
}
@_spi(STP) public protocol LinkedBank {
  @_spi(STP) var sessionId: Swift.String { get }
  @_spi(STP) var accountId: Swift.String { get }
  @_spi(STP) var displayName: Swift.String? { get }
  @_spi(STP) var bankName: Swift.String? { get }
  @_spi(STP) var last4: Swift.String? { get }
  @_spi(STP) var instantlyVerified: Swift.Bool { get }
}
@_spi(STP) @objc(STP_Internal_DownloadManager) public class DownloadManager : ObjectiveC.NSObject, Foundation.URLSessionDelegate {
  @_spi(STP) public typealias UpdateImageHandler = (UIKit.UIImage) -> Swift.Void
  @_spi(STP) public static let sharedManager: StripeCore.DownloadManager
  @_spi(STP) public init(urlSessionConfiguration: Foundation.URLSessionConfiguration = .default)
  @_spi(STP) @objc deinit
}
@_spi(STP) extension StripeCore.DownloadManager {
  @_spi(STP) public func downloadImage(url: Foundation.URL, updateHandler: StripeCore.DownloadManager.UpdateImageHandler?) -> UIKit.UIImage
}
@_spi(STP) extension StripeCore.DownloadManager {
  @_spi(STP) public func imagePlaceHolder() -> UIKit.UIImage
}
@_spi(STP) @_hasMissingDesignatedInitializers public class Future<Value> {
  @_spi(STP) public typealias Result = Swift.Result<Value, Swift.Error>
  @_spi(STP) public func observe(on queue: Dispatch.DispatchQueue? = nil, using callback: @escaping (StripeCore.Future<Value>.Result) -> Swift.Void)
  @_spi(STP) public func chained<T>(on queue: Dispatch.DispatchQueue? = nil, using closure: @escaping (Value) throws -> StripeCore.Future<T>) -> StripeCore.Future<T>
  @_spi(STP) @objc deinit
}
@_spi(STP) @_inheritsConvenienceInitializers public class Promise<Value> : StripeCore.Future<Value> {
  @_spi(STP) public init()
  @_spi(STP) convenience public init(value: Value)
  @_spi(STP) convenience public init(error: Swift.Error)
  @_spi(STP) public func resolve(with value: Value)
  @_spi(STP) public func reject(with error: Swift.Error)
  @_spi(STP) public func fullfill(with result: StripeCore.Promise<Value>.Result)
  @_spi(STP) public func fulfill(with block: () throws -> Value)
  @_spi(STP) @objc deinit
}
@_spi(STP) public protocol BundleLocatorProtocol {
  @_spi(STP) static var internalClass: Swift.AnyClass { get }
  @_spi(STP) static var bundleName: Swift.String { get }
  @_spi(STP) static var resourcesBundle: Foundation.Bundle { get }
}
@_spi(STP) extension StripeCore.BundleLocatorProtocol {
  @_spi(STP) public static func computeResourcesBundle() -> Foundation.Bundle
}
@_spi(STP) final public class FileDownloader {
  @_spi(STP) public init(urlSession: Foundation.URLSession)
  @_spi(STP) final public func downloadFileTemporarily(from remoteURL: Foundation.URL) -> StripeCore.Future<Foundation.URL>
  @_spi(STP) final public func downloadFile(from remoteURL: Foundation.URL, fileReadingOptions: Foundation.Data.ReadingOptions = []) -> StripeCore.Future<Foundation.Data>
  @_spi(STP) @objc deinit
}
@_spi(STP) @_hasMissingDesignatedInitializers public class PaymentsSDKVariant {
  @_spi(STP) public static let variant: Swift.String
  @_spi(STP) public static var ocrTypeString: Swift.String {
    @_spi(STP) get
  }
  @_spi(STP) public static var paymentUserAgent: Swift.String {
    @_spi(STP) get
  }
  @_spi(STP) @objc deinit
}
@_spi(STP) public func stpDispatchToMainThreadIfNecessary(_ block: @escaping () -> Swift.Void)
@objc public enum STPErrorCode : Swift.Int {
  @objc(STPConnectionError) case connectionError = 40
  @objc(STPInvalidRequestError) case invalidRequestError = 50
  @objc(STPAuthenticationError) case authenticationError = 51
  @objc(STPAPIError) case apiError = 60
  @objc(STPCardError) case cardError = 70
  @objc(STPCancellationError) case cancellationError = 80
  @objc(STPEphemeralKeyDecodingError) case ephemeralKeyDecodingError = 1000
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class STPError : ObjectiveC.NSObject {
  @objc public static let stripeDomain: Swift.String
  @objc public static let STPPaymentHandlerErrorDomain: Swift.String
  @objc public static let errorMessageKey: Swift.String
  @objc public static let hintKey: Swift.String
  @objc public static let cardErrorCodeKey: Swift.String
  @objc public static let errorParameterKey: Swift.String
  @objc public static let stripeErrorCodeKey: Swift.String
  @objc public static let stripeErrorTypeKey: Swift.String
  @objc public static let stripeDeclineCodeKey: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSError {
  @_spi(STP) @_hasMissingDesignatedInitializers public class Utils {
    @_spi(STP) public static func localizedMessage(fromAPIErrorCode errorCode: Swift.String, declineCode: Swift.String? = nil) -> Swift.String?
    @_spi(STP) public static func cardErrorCode(fromAPIErrorCode errorCode: Swift.String) -> StripeCore.STPCardErrorCode?
    @_spi(STP) @objc deinit
  }
}
extension Foundation.NSError {
  @_spi(STP) public static func stp_error(from modernStripeError: StripeCore.StripeError) -> Foundation.NSError?
  @_spi(STP) public static func stp_error(errorType: Swift.String?, stripeErrorCode: Swift.String?, stripeErrorMessage: Swift.String?, errorParam: Swift.String?, declineCode: Any?, httpResponse: Foundation.HTTPURLResponse?) -> Foundation.NSError?
  @_spi(STP) public static func stp_error(fromStripeResponse jsonDictionary: [Swift.AnyHashable : Any]?, httpResponse: Foundation.HTTPURLResponse?) -> Foundation.NSError?
  @objc(stp_errorFromStripeResponse:) public static func stp_error(fromStripeResponse jsonDictionary: [Swift.AnyHashable : Any]?) -> Foundation.NSError?
}
public enum STPCardErrorCode : Swift.String {
  case invalidNumber
  case invalidExpMonth
  case invalidExpYear
  case invalidCVC
  case incorrectNumber
  case expiredCard
  case cardDeclined
  case incorrectCVC
  case processingError
  case incorrectZip
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc extension StripeCore.STPError {
  @objc public static let invalidNumber: Swift.String
  @objc public static let invalidExpMonth: Swift.String
  @objc public static let invalidExpYear: Swift.String
  @objc public static let invalidCVC: Swift.String
  @objc public static let incorrectNumber: Swift.String
  @objc public static let expiredCard: Swift.String
  @objc public static let cardDeclined: Swift.String
  @objc public static let processingError: Swift.String
  @objc public static let incorrectCVC: Swift.String
  @objc public static let incorrectZip: Swift.String
}
@_spi(STP) public enum STPTextValidationState : Swift.Int {
  @_spi(STP) case empty
  @_spi(STP) case incomplete
  @_spi(STP) case complete
  @_spi(STP) case invalid
  @_spi(STP) public init?(rawValue: Swift.Int)
  @_spi(STP) public typealias RawValue = Swift.Int
  @_spi(STP) public var rawValue: Swift.Int {
    @_spi(STP) get
  }
}
@_spi(STP) @objc @_inheritsConvenienceInitializers open class STPNumericStringValidator : ObjectiveC.NSObject {
  @_spi(STP) public class func isStringNumeric(_ string: Swift.String) -> Swift.Bool
  @_spi(STP) public class func sanitizedNumericString(for string: Swift.String) -> Swift.String
  @_spi(STP) @objc override dynamic public init()
  @_spi(STP) @objc deinit
}
@_spi(STP) @objc public protocol STPURLCallbackListener : ObjectiveC.NSObjectProtocol {
  @_spi(STP) @objc func handleURLCallback(_ url: Foundation.URL) -> Swift.Bool
}
@_spi(STP) @objc @_inheritsConvenienceInitializers public class STPURLCallbackHandler : ObjectiveC.NSObject {
  @_spi(STP) public static var sharedHandler: StripeCore.STPURLCallbackHandler
  @_spi(STP) @objc public class func shared() -> StripeCore.STPURLCallbackHandler
  @_spi(STP) @discardableResult
  @objc public func handleURLCallback(_ url: Foundation.URL) -> Swift.Bool
  @_spi(STP) @objc(registerListener:forURL:) public func register(_ listener: StripeCore.STPURLCallbackListener, for url: Foundation.URL)
  @_spi(STP) @objc public func unregisterListener(_ listener: StripeCore.STPURLCallbackListener)
  @_spi(STP) @objc override dynamic public init()
  @_spi(STP) @objc deinit
}
@_spi(STP) @_hasMissingDesignatedInitializers final public class URLEncoder {
  @_spi(STP) final public class func string(byURLEncoding string: Swift.String) -> Swift.String
  @_spi(STP) final public class func convertToCamelCase(snakeCase input: Swift.String) -> Swift.String
  @_spi(STP) final public class func convertToSnakeCase(camelCase input: Swift.String) -> Swift.String
  @_spi(STP) @objc(queryStringFromParameters:) final public class func queryString(from parameters: [Swift.String : Any]) -> Swift.String
  @_spi(STP) @objc deinit
}
extension Foundation.URLSession {
  @_spi(STP) public func stp_performDataTask(with request: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void, retryCount: Swift.Int = StripeAPI.maxRetries)
}
@_spi(STP) @_hasMissingDesignatedInitializers final public class STPLocalizationUtils {
  @_spi(STP) final public class func localizedStripeString(forKey key: Swift.String, bundleLocator: StripeCore.BundleLocatorProtocol.Type) -> Swift.String
  @_spi(STP) @objc deinit
}
@_spi(STP) @inline(__always) public func STPNonLocalizedString(_ string: Swift.String) -> Swift.String
@_spi(STP) extension Swift.String {
  @_spi(STP) public enum Localized {
    @_spi(STP) public static var close: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static var tryAgain: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static var scan_card_title_capitalization: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static var scan_card: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static var scan_card_privacy_link_text: Swift.String {
      @_spi(STP) get
    }
    @_spi(STP) public static func scanCardExpectedPrivacyLinkText() -> Foundation.NSAttributedString?
  }
}
@_spi(STP) @_hasMissingDesignatedInitializers final public class FraudDetectionData : Swift.Codable {
  @_spi(STP) public static let shared: StripeCore.FraudDetectionData
  @_spi(STP) final public var muid: Swift.String?
  @_spi(STP) final public var guid: Swift.String?
  @_spi(STP) final public var sid: Swift.String?
  @_spi(STP) @objc deinit
  @_spi(STP) final public func encode(to encoder: Swift.Encoder) throws
  @_spi(STP) public init(from decoder: Swift.Decoder) throws
}
@_spi(STP) extension StripeCore.FraudDetectionData : Swift.Equatable {
  @_spi(STP) public static func == (lhs: StripeCore.FraudDetectionData, rhs: StripeCore.FraudDetectionData) -> Swift.Bool
}
@_spi(STP) @objc final public class STPTelemetryClient : ObjectiveC.NSObject {
  @_spi(STP) public static var shared: StripeCore.STPTelemetryClient
  @_spi(STP) final public func addTelemetryFields(toParams params: inout [Swift.String : Any])
  @_spi(STP) final public func paramsByAddingTelemetryFields(toParams params: [Swift.String : Any]) -> [Swift.String : Any]
  @_spi(STP) final public func sendTelemetryData(forceSend: Swift.Bool = false, completion: ((Swift.Result<[Swift.String : Any], Swift.Error>) -> Swift.Void)? = nil)
  @_spi(STP) final public func updateFraudDetectionIfNecessary(completion: @escaping ((Swift.Result<StripeCore.FraudDetectionData, Swift.Error>) -> Swift.Void))
  @_spi(STP) final public class func shouldSendTelemetry() -> Swift.Bool
  @_spi(STP) public init(sessionConfiguration config: Foundation.URLSessionConfiguration)
  @_spi(STP) @objc deinit
}
@_spi(STP) extension UIKit.UIActivityIndicatorView {
  @_spi(STP) @_Concurrency.MainActor(unsafe) public func stp_startAnimatingAndShow()
  @_spi(STP) @_Concurrency.MainActor(unsafe) public func stp_stopAnimatingAndHide()
}
@_spi(STP) extension UIKit.UIFont {
  @_spi(STP) public static func preferredFont(forTextStyle style: UIKit.UIFont.TextStyle, weight: UIKit.UIFont.Weight, maximumPointSize: CoreFoundation.CGFloat? = nil) -> UIKit.UIFont
  @_spi(STP) public func withPreferredSize(forTextStyle style: UIKit.UIFont.TextStyle, weight: UIKit.UIFont.Weight? = nil) -> UIKit.UIFont
}
extension StripeCore.StripeFile.Purpose : Swift.Hashable {}
extension StripeCore.StripeFile.Purpose : Swift.RawRepresentable {}
extension StripeCore.StripeFile.Purpose : Swift.Sendable {}
extension StripeCore.StripeAPIError.ErrorType : Swift.Equatable {}
extension StripeCore.StripeAPIError.ErrorType : Swift.Hashable {}
extension StripeCore.StripeAPIError.ErrorType : Swift.RawRepresentable {}
extension StripeCore.STPAnalyticEvent : Swift.Equatable {}
extension StripeCore.STPAnalyticEvent : Swift.Hashable {}
extension StripeCore.STPAnalyticEvent : Swift.RawRepresentable {}
extension StripeCore.STPErrorCode : Swift.Equatable {}
extension StripeCore.STPErrorCode : Swift.Hashable {}
extension StripeCore.STPErrorCode : Swift.RawRepresentable {}
extension StripeCore.UnknownFieldsCodableFloats : Swift.Equatable {}
extension StripeCore.UnknownFieldsCodableFloats : Swift.Hashable {}
extension StripeCore.UnknownFieldsCodableFloats : Swift.RawRepresentable {}
extension StripeCore.STPCardErrorCode : Swift.Equatable {}
extension StripeCore.STPCardErrorCode : Swift.Hashable {}
extension StripeCore.STPCardErrorCode : Swift.RawRepresentable {}
extension StripeCore.STPTextValidationState : Swift.Equatable {}
extension StripeCore.STPTextValidationState : Swift.Hashable {}
extension StripeCore.STPTextValidationState : Swift.RawRepresentable {}
